
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Category
 * 
 */
export type Category = $Result.DefaultSelection<Prisma.$CategoryPayload>
/**
 * Model Product
 * 
 */
export type Product = $Result.DefaultSelection<Prisma.$ProductPayload>
/**
 * Model ProductImage
 * 
 */
export type ProductImage = $Result.DefaultSelection<Prisma.$ProductImagePayload>
/**
 * Model B2BAccount
 * 
 */
export type B2BAccount = $Result.DefaultSelection<Prisma.$B2BAccountPayload>
/**
 * Model MarkupRule
 * 
 */
export type MarkupRule = $Result.DefaultSelection<Prisma.$MarkupRulePayload>
/**
 * Model Booking
 * 
 */
export type Booking = $Result.DefaultSelection<Prisma.$BookingPayload>
/**
 * Model BookingItem
 * 
 */
export type BookingItem = $Result.DefaultSelection<Prisma.$BookingItemPayload>
/**
 * Model ExternalServiceMapping
 * 
 */
export type ExternalServiceMapping = $Result.DefaultSelection<Prisma.$ExternalServiceMappingPayload>
/**
 * Model PaymentTransaction
 * 
 */
export type PaymentTransaction = $Result.DefaultSelection<Prisma.$PaymentTransactionPayload>
/**
 * Model BillingRecord
 * 
 */
export type BillingRecord = $Result.DefaultSelection<Prisma.$BillingRecordPayload>
/**
 * Model Settings
 * 
 */
export type Settings = $Result.DefaultSelection<Prisma.$SettingsPayload>
/**
 * Model ApprovedTour
 * 
 */
export type ApprovedTour = $Result.DefaultSelection<Prisma.$ApprovedTourPayload>
/**
 * Model Complaint
 * 
 */
export type Complaint = $Result.DefaultSelection<Prisma.$ComplaintPayload>
/**
 * Model ComplaintMessage
 * 
 */
export type ComplaintMessage = $Result.DefaultSelection<Prisma.$ComplaintMessagePayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  CUSTOMER: 'CUSTOMER',
  B2B: 'B2B',
  ADMIN: 'ADMIN',
  ACCOUNT_MANAGER: 'ACCOUNT_MANAGER'
};

export type Role = (typeof Role)[keyof typeof Role]


export const ProductType: {
  THEME_PARK: 'THEME_PARK',
  TOUR: 'TOUR',
  ACTIVITY: 'ACTIVITY'
};

export type ProductType = (typeof ProductType)[keyof typeof ProductType]


export const BookingStatus: {
  PENDING: 'PENDING',
  CONFIRMED: 'CONFIRMED',
  CANCELLED: 'CANCELLED',
  FAILED: 'FAILED'
};

export type BookingStatus = (typeof BookingStatus)[keyof typeof BookingStatus]


export const PaymentMethod: {
  CREDIT_CARD: 'CREDIT_CARD',
  DEBIT_CARD: 'DEBIT_CARD',
  ZIINA: 'ZIINA',
  BANK_TRANSFER: 'BANK_TRANSFER',
  CASH: 'CASH'
};

export type PaymentMethod = (typeof PaymentMethod)[keyof typeof PaymentMethod]


export const PaymentStatus: {
  UNPAID: 'UNPAID',
  PENDING: 'PENDING',
  PAID: 'PAID',
  FAILED: 'FAILED',
  REFUNDED: 'REFUNDED',
  CANCELLED: 'CANCELLED'
};

export type PaymentStatus = (typeof PaymentStatus)[keyof typeof PaymentStatus]


export const Currency: {
  AED: 'AED',
  USD: 'USD',
  EUR: 'EUR'
};

export type Currency = (typeof Currency)[keyof typeof Currency]


export const CategoryStatus: {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  ARCHIVED: 'ARCHIVED'
};

export type CategoryStatus = (typeof CategoryStatus)[keyof typeof CategoryStatus]


export const ComplaintCategory: {
  TOUR_QUALITY: 'TOUR_QUALITY',
  TOUR_GUIDE: 'TOUR_GUIDE',
  BOOKING_ISSUES: 'BOOKING_ISSUES',
  PAYMENT_ISSUES: 'PAYMENT_ISSUES',
  CANCELLATION: 'CANCELLATION',
  REFUND_REQUEST: 'REFUND_REQUEST',
  TRANSPORTATION: 'TRANSPORTATION',
  FACILITY: 'FACILITY',
  SAFETY: 'SAFETY',
  TICKET_REJECTION: 'TICKET_REJECTION',
  OTHER: 'OTHER'
};

export type ComplaintCategory = (typeof ComplaintCategory)[keyof typeof ComplaintCategory]


export const ComplaintStatus: {
  OPEN: 'OPEN',
  IN_PROGRESS: 'IN_PROGRESS',
  RESOLVED: 'RESOLVED',
  CLOSED: 'CLOSED'
};

export type ComplaintStatus = (typeof ComplaintStatus)[keyof typeof ComplaintStatus]


export const ComplaintPriority: {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

export type ComplaintPriority = (typeof ComplaintPriority)[keyof typeof ComplaintPriority]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type ProductType = $Enums.ProductType

export const ProductType: typeof $Enums.ProductType

export type BookingStatus = $Enums.BookingStatus

export const BookingStatus: typeof $Enums.BookingStatus

export type PaymentMethod = $Enums.PaymentMethod

export const PaymentMethod: typeof $Enums.PaymentMethod

export type PaymentStatus = $Enums.PaymentStatus

export const PaymentStatus: typeof $Enums.PaymentStatus

export type Currency = $Enums.Currency

export const Currency: typeof $Enums.Currency

export type CategoryStatus = $Enums.CategoryStatus

export const CategoryStatus: typeof $Enums.CategoryStatus

export type ComplaintCategory = $Enums.ComplaintCategory

export const ComplaintCategory: typeof $Enums.ComplaintCategory

export type ComplaintStatus = $Enums.ComplaintStatus

export const ComplaintStatus: typeof $Enums.ComplaintStatus

export type ComplaintPriority = $Enums.ComplaintPriority

export const ComplaintPriority: typeof $Enums.ComplaintPriority

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P]): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number }): $Utils.JsPromise<R>

  /**
   * Executes a raw MongoDB command and returns the result of it.
   * @example
   * ```
   * const user = await prisma.$runCommandRaw({
   *   aggregate: 'User',
   *   pipeline: [{ $match: { name: 'Bob' } }, { $project: { email: true, _id: false } }],
   *   explain: false,
   * })
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $runCommandRaw(command: Prisma.InputJsonObject): Prisma.PrismaPromise<Prisma.JsonObject>

  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **Category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.CategoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.product`: Exposes CRUD operations for the **Product** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.product.findMany()
    * ```
    */
  get product(): Prisma.ProductDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.productImage`: Exposes CRUD operations for the **ProductImage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProductImages
    * const productImages = await prisma.productImage.findMany()
    * ```
    */
  get productImage(): Prisma.ProductImageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.b2BAccount`: Exposes CRUD operations for the **B2BAccount** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more B2BAccounts
    * const b2BAccounts = await prisma.b2BAccount.findMany()
    * ```
    */
  get b2BAccount(): Prisma.B2BAccountDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.markupRule`: Exposes CRUD operations for the **MarkupRule** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MarkupRules
    * const markupRules = await prisma.markupRule.findMany()
    * ```
    */
  get markupRule(): Prisma.MarkupRuleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.booking`: Exposes CRUD operations for the **Booking** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Bookings
    * const bookings = await prisma.booking.findMany()
    * ```
    */
  get booking(): Prisma.BookingDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.bookingItem`: Exposes CRUD operations for the **BookingItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BookingItems
    * const bookingItems = await prisma.bookingItem.findMany()
    * ```
    */
  get bookingItem(): Prisma.BookingItemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.externalServiceMapping`: Exposes CRUD operations for the **ExternalServiceMapping** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ExternalServiceMappings
    * const externalServiceMappings = await prisma.externalServiceMapping.findMany()
    * ```
    */
  get externalServiceMapping(): Prisma.ExternalServiceMappingDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.paymentTransaction`: Exposes CRUD operations for the **PaymentTransaction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PaymentTransactions
    * const paymentTransactions = await prisma.paymentTransaction.findMany()
    * ```
    */
  get paymentTransaction(): Prisma.PaymentTransactionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.billingRecord`: Exposes CRUD operations for the **BillingRecord** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BillingRecords
    * const billingRecords = await prisma.billingRecord.findMany()
    * ```
    */
  get billingRecord(): Prisma.BillingRecordDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.settings`: Exposes CRUD operations for the **Settings** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Settings
    * const settings = await prisma.settings.findMany()
    * ```
    */
  get settings(): Prisma.SettingsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.approvedTour`: Exposes CRUD operations for the **ApprovedTour** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ApprovedTours
    * const approvedTours = await prisma.approvedTour.findMany()
    * ```
    */
  get approvedTour(): Prisma.ApprovedTourDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.complaint`: Exposes CRUD operations for the **Complaint** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Complaints
    * const complaints = await prisma.complaint.findMany()
    * ```
    */
  get complaint(): Prisma.ComplaintDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.complaintMessage`: Exposes CRUD operations for the **ComplaintMessage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ComplaintMessages
    * const complaintMessages = await prisma.complaintMessage.findMany()
    * ```
    */
  get complaintMessage(): Prisma.ComplaintMessageDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.14.0
   * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Category: 'Category',
    Product: 'Product',
    ProductImage: 'ProductImage',
    B2BAccount: 'B2BAccount',
    MarkupRule: 'MarkupRule',
    Booking: 'Booking',
    BookingItem: 'BookingItem',
    ExternalServiceMapping: 'ExternalServiceMapping',
    PaymentTransaction: 'PaymentTransaction',
    BillingRecord: 'BillingRecord',
    Settings: 'Settings',
    ApprovedTour: 'ApprovedTour',
    Complaint: 'Complaint',
    ComplaintMessage: 'ComplaintMessage'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "category" | "product" | "productImage" | "b2BAccount" | "markupRule" | "booking" | "bookingItem" | "externalServiceMapping" | "paymentTransaction" | "billingRecord" | "settings" | "approvedTour" | "complaint" | "complaintMessage"
      txIsolationLevel: never
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.UserFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.UserAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Category: {
        payload: Prisma.$CategoryPayload<ExtArgs>
        fields: Prisma.CategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findFirst: {
            args: Prisma.CategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findMany: {
            args: Prisma.CategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          create: {
            args: Prisma.CategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          createMany: {
            args: Prisma.CategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          update: {
            args: Prisma.CategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          deleteMany: {
            args: Prisma.CategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          aggregate: {
            args: Prisma.CategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCategory>
          }
          groupBy: {
            args: Prisma.CategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<CategoryGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.CategoryFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.CategoryAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.CategoryCountArgs<ExtArgs>
            result: $Utils.Optional<CategoryCountAggregateOutputType> | number
          }
        }
      }
      Product: {
        payload: Prisma.$ProductPayload<ExtArgs>
        fields: Prisma.ProductFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findFirst: {
            args: Prisma.ProductFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findMany: {
            args: Prisma.ProductFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[]
          }
          create: {
            args: Prisma.ProductCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          createMany: {
            args: Prisma.ProductCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ProductDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          update: {
            args: Prisma.ProductUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          deleteMany: {
            args: Prisma.ProductDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProductUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProductUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          aggregate: {
            args: Prisma.ProductAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProduct>
          }
          groupBy: {
            args: Prisma.ProductGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.ProductFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.ProductAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.ProductCountArgs<ExtArgs>
            result: $Utils.Optional<ProductCountAggregateOutputType> | number
          }
        }
      }
      ProductImage: {
        payload: Prisma.$ProductImagePayload<ExtArgs>
        fields: Prisma.ProductImageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductImageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductImagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductImageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductImagePayload>
          }
          findFirst: {
            args: Prisma.ProductImageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductImagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductImageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductImagePayload>
          }
          findMany: {
            args: Prisma.ProductImageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductImagePayload>[]
          }
          create: {
            args: Prisma.ProductImageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductImagePayload>
          }
          createMany: {
            args: Prisma.ProductImageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ProductImageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductImagePayload>
          }
          update: {
            args: Prisma.ProductImageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductImagePayload>
          }
          deleteMany: {
            args: Prisma.ProductImageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProductImageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProductImageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductImagePayload>
          }
          aggregate: {
            args: Prisma.ProductImageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProductImage>
          }
          groupBy: {
            args: Prisma.ProductImageGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductImageGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.ProductImageFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.ProductImageAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.ProductImageCountArgs<ExtArgs>
            result: $Utils.Optional<ProductImageCountAggregateOutputType> | number
          }
        }
      }
      B2BAccount: {
        payload: Prisma.$B2BAccountPayload<ExtArgs>
        fields: Prisma.B2BAccountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.B2BAccountFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$B2BAccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.B2BAccountFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$B2BAccountPayload>
          }
          findFirst: {
            args: Prisma.B2BAccountFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$B2BAccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.B2BAccountFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$B2BAccountPayload>
          }
          findMany: {
            args: Prisma.B2BAccountFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$B2BAccountPayload>[]
          }
          create: {
            args: Prisma.B2BAccountCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$B2BAccountPayload>
          }
          createMany: {
            args: Prisma.B2BAccountCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.B2BAccountDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$B2BAccountPayload>
          }
          update: {
            args: Prisma.B2BAccountUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$B2BAccountPayload>
          }
          deleteMany: {
            args: Prisma.B2BAccountDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.B2BAccountUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.B2BAccountUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$B2BAccountPayload>
          }
          aggregate: {
            args: Prisma.B2BAccountAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateB2BAccount>
          }
          groupBy: {
            args: Prisma.B2BAccountGroupByArgs<ExtArgs>
            result: $Utils.Optional<B2BAccountGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.B2BAccountFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.B2BAccountAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.B2BAccountCountArgs<ExtArgs>
            result: $Utils.Optional<B2BAccountCountAggregateOutputType> | number
          }
        }
      }
      MarkupRule: {
        payload: Prisma.$MarkupRulePayload<ExtArgs>
        fields: Prisma.MarkupRuleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MarkupRuleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarkupRulePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MarkupRuleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarkupRulePayload>
          }
          findFirst: {
            args: Prisma.MarkupRuleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarkupRulePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MarkupRuleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarkupRulePayload>
          }
          findMany: {
            args: Prisma.MarkupRuleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarkupRulePayload>[]
          }
          create: {
            args: Prisma.MarkupRuleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarkupRulePayload>
          }
          createMany: {
            args: Prisma.MarkupRuleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.MarkupRuleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarkupRulePayload>
          }
          update: {
            args: Prisma.MarkupRuleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarkupRulePayload>
          }
          deleteMany: {
            args: Prisma.MarkupRuleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MarkupRuleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MarkupRuleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarkupRulePayload>
          }
          aggregate: {
            args: Prisma.MarkupRuleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMarkupRule>
          }
          groupBy: {
            args: Prisma.MarkupRuleGroupByArgs<ExtArgs>
            result: $Utils.Optional<MarkupRuleGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.MarkupRuleFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.MarkupRuleAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.MarkupRuleCountArgs<ExtArgs>
            result: $Utils.Optional<MarkupRuleCountAggregateOutputType> | number
          }
        }
      }
      Booking: {
        payload: Prisma.$BookingPayload<ExtArgs>
        fields: Prisma.BookingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BookingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BookingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingPayload>
          }
          findFirst: {
            args: Prisma.BookingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BookingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingPayload>
          }
          findMany: {
            args: Prisma.BookingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingPayload>[]
          }
          create: {
            args: Prisma.BookingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingPayload>
          }
          createMany: {
            args: Prisma.BookingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.BookingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingPayload>
          }
          update: {
            args: Prisma.BookingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingPayload>
          }
          deleteMany: {
            args: Prisma.BookingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BookingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BookingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingPayload>
          }
          aggregate: {
            args: Prisma.BookingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBooking>
          }
          groupBy: {
            args: Prisma.BookingGroupByArgs<ExtArgs>
            result: $Utils.Optional<BookingGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.BookingFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.BookingAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.BookingCountArgs<ExtArgs>
            result: $Utils.Optional<BookingCountAggregateOutputType> | number
          }
        }
      }
      BookingItem: {
        payload: Prisma.$BookingItemPayload<ExtArgs>
        fields: Prisma.BookingItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BookingItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BookingItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingItemPayload>
          }
          findFirst: {
            args: Prisma.BookingItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BookingItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingItemPayload>
          }
          findMany: {
            args: Prisma.BookingItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingItemPayload>[]
          }
          create: {
            args: Prisma.BookingItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingItemPayload>
          }
          createMany: {
            args: Prisma.BookingItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.BookingItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingItemPayload>
          }
          update: {
            args: Prisma.BookingItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingItemPayload>
          }
          deleteMany: {
            args: Prisma.BookingItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BookingItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BookingItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BookingItemPayload>
          }
          aggregate: {
            args: Prisma.BookingItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBookingItem>
          }
          groupBy: {
            args: Prisma.BookingItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<BookingItemGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.BookingItemFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.BookingItemAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.BookingItemCountArgs<ExtArgs>
            result: $Utils.Optional<BookingItemCountAggregateOutputType> | number
          }
        }
      }
      ExternalServiceMapping: {
        payload: Prisma.$ExternalServiceMappingPayload<ExtArgs>
        fields: Prisma.ExternalServiceMappingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ExternalServiceMappingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExternalServiceMappingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ExternalServiceMappingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExternalServiceMappingPayload>
          }
          findFirst: {
            args: Prisma.ExternalServiceMappingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExternalServiceMappingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ExternalServiceMappingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExternalServiceMappingPayload>
          }
          findMany: {
            args: Prisma.ExternalServiceMappingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExternalServiceMappingPayload>[]
          }
          create: {
            args: Prisma.ExternalServiceMappingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExternalServiceMappingPayload>
          }
          createMany: {
            args: Prisma.ExternalServiceMappingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ExternalServiceMappingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExternalServiceMappingPayload>
          }
          update: {
            args: Prisma.ExternalServiceMappingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExternalServiceMappingPayload>
          }
          deleteMany: {
            args: Prisma.ExternalServiceMappingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ExternalServiceMappingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ExternalServiceMappingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExternalServiceMappingPayload>
          }
          aggregate: {
            args: Prisma.ExternalServiceMappingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateExternalServiceMapping>
          }
          groupBy: {
            args: Prisma.ExternalServiceMappingGroupByArgs<ExtArgs>
            result: $Utils.Optional<ExternalServiceMappingGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.ExternalServiceMappingFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.ExternalServiceMappingAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.ExternalServiceMappingCountArgs<ExtArgs>
            result: $Utils.Optional<ExternalServiceMappingCountAggregateOutputType> | number
          }
        }
      }
      PaymentTransaction: {
        payload: Prisma.$PaymentTransactionPayload<ExtArgs>
        fields: Prisma.PaymentTransactionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PaymentTransactionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentTransactionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PaymentTransactionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentTransactionPayload>
          }
          findFirst: {
            args: Prisma.PaymentTransactionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentTransactionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PaymentTransactionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentTransactionPayload>
          }
          findMany: {
            args: Prisma.PaymentTransactionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentTransactionPayload>[]
          }
          create: {
            args: Prisma.PaymentTransactionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentTransactionPayload>
          }
          createMany: {
            args: Prisma.PaymentTransactionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PaymentTransactionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentTransactionPayload>
          }
          update: {
            args: Prisma.PaymentTransactionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentTransactionPayload>
          }
          deleteMany: {
            args: Prisma.PaymentTransactionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PaymentTransactionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PaymentTransactionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentTransactionPayload>
          }
          aggregate: {
            args: Prisma.PaymentTransactionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePaymentTransaction>
          }
          groupBy: {
            args: Prisma.PaymentTransactionGroupByArgs<ExtArgs>
            result: $Utils.Optional<PaymentTransactionGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.PaymentTransactionFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.PaymentTransactionAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.PaymentTransactionCountArgs<ExtArgs>
            result: $Utils.Optional<PaymentTransactionCountAggregateOutputType> | number
          }
        }
      }
      BillingRecord: {
        payload: Prisma.$BillingRecordPayload<ExtArgs>
        fields: Prisma.BillingRecordFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BillingRecordFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingRecordPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BillingRecordFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingRecordPayload>
          }
          findFirst: {
            args: Prisma.BillingRecordFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingRecordPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BillingRecordFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingRecordPayload>
          }
          findMany: {
            args: Prisma.BillingRecordFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingRecordPayload>[]
          }
          create: {
            args: Prisma.BillingRecordCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingRecordPayload>
          }
          createMany: {
            args: Prisma.BillingRecordCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.BillingRecordDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingRecordPayload>
          }
          update: {
            args: Prisma.BillingRecordUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingRecordPayload>
          }
          deleteMany: {
            args: Prisma.BillingRecordDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BillingRecordUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BillingRecordUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BillingRecordPayload>
          }
          aggregate: {
            args: Prisma.BillingRecordAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBillingRecord>
          }
          groupBy: {
            args: Prisma.BillingRecordGroupByArgs<ExtArgs>
            result: $Utils.Optional<BillingRecordGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.BillingRecordFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.BillingRecordAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.BillingRecordCountArgs<ExtArgs>
            result: $Utils.Optional<BillingRecordCountAggregateOutputType> | number
          }
        }
      }
      Settings: {
        payload: Prisma.$SettingsPayload<ExtArgs>
        fields: Prisma.SettingsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SettingsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SettingsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingsPayload>
          }
          findFirst: {
            args: Prisma.SettingsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SettingsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingsPayload>
          }
          findMany: {
            args: Prisma.SettingsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingsPayload>[]
          }
          create: {
            args: Prisma.SettingsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingsPayload>
          }
          createMany: {
            args: Prisma.SettingsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.SettingsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingsPayload>
          }
          update: {
            args: Prisma.SettingsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingsPayload>
          }
          deleteMany: {
            args: Prisma.SettingsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SettingsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SettingsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SettingsPayload>
          }
          aggregate: {
            args: Prisma.SettingsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSettings>
          }
          groupBy: {
            args: Prisma.SettingsGroupByArgs<ExtArgs>
            result: $Utils.Optional<SettingsGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.SettingsFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.SettingsAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.SettingsCountArgs<ExtArgs>
            result: $Utils.Optional<SettingsCountAggregateOutputType> | number
          }
        }
      }
      ApprovedTour: {
        payload: Prisma.$ApprovedTourPayload<ExtArgs>
        fields: Prisma.ApprovedTourFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ApprovedTourFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApprovedTourPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ApprovedTourFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApprovedTourPayload>
          }
          findFirst: {
            args: Prisma.ApprovedTourFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApprovedTourPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ApprovedTourFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApprovedTourPayload>
          }
          findMany: {
            args: Prisma.ApprovedTourFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApprovedTourPayload>[]
          }
          create: {
            args: Prisma.ApprovedTourCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApprovedTourPayload>
          }
          createMany: {
            args: Prisma.ApprovedTourCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ApprovedTourDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApprovedTourPayload>
          }
          update: {
            args: Prisma.ApprovedTourUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApprovedTourPayload>
          }
          deleteMany: {
            args: Prisma.ApprovedTourDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ApprovedTourUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ApprovedTourUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApprovedTourPayload>
          }
          aggregate: {
            args: Prisma.ApprovedTourAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateApprovedTour>
          }
          groupBy: {
            args: Prisma.ApprovedTourGroupByArgs<ExtArgs>
            result: $Utils.Optional<ApprovedTourGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.ApprovedTourFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.ApprovedTourAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.ApprovedTourCountArgs<ExtArgs>
            result: $Utils.Optional<ApprovedTourCountAggregateOutputType> | number
          }
        }
      }
      Complaint: {
        payload: Prisma.$ComplaintPayload<ExtArgs>
        fields: Prisma.ComplaintFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ComplaintFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComplaintPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ComplaintFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComplaintPayload>
          }
          findFirst: {
            args: Prisma.ComplaintFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComplaintPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ComplaintFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComplaintPayload>
          }
          findMany: {
            args: Prisma.ComplaintFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComplaintPayload>[]
          }
          create: {
            args: Prisma.ComplaintCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComplaintPayload>
          }
          createMany: {
            args: Prisma.ComplaintCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ComplaintDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComplaintPayload>
          }
          update: {
            args: Prisma.ComplaintUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComplaintPayload>
          }
          deleteMany: {
            args: Prisma.ComplaintDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ComplaintUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ComplaintUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComplaintPayload>
          }
          aggregate: {
            args: Prisma.ComplaintAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateComplaint>
          }
          groupBy: {
            args: Prisma.ComplaintGroupByArgs<ExtArgs>
            result: $Utils.Optional<ComplaintGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.ComplaintFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.ComplaintAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.ComplaintCountArgs<ExtArgs>
            result: $Utils.Optional<ComplaintCountAggregateOutputType> | number
          }
        }
      }
      ComplaintMessage: {
        payload: Prisma.$ComplaintMessagePayload<ExtArgs>
        fields: Prisma.ComplaintMessageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ComplaintMessageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComplaintMessagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ComplaintMessageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComplaintMessagePayload>
          }
          findFirst: {
            args: Prisma.ComplaintMessageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComplaintMessagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ComplaintMessageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComplaintMessagePayload>
          }
          findMany: {
            args: Prisma.ComplaintMessageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComplaintMessagePayload>[]
          }
          create: {
            args: Prisma.ComplaintMessageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComplaintMessagePayload>
          }
          createMany: {
            args: Prisma.ComplaintMessageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ComplaintMessageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComplaintMessagePayload>
          }
          update: {
            args: Prisma.ComplaintMessageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComplaintMessagePayload>
          }
          deleteMany: {
            args: Prisma.ComplaintMessageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ComplaintMessageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ComplaintMessageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ComplaintMessagePayload>
          }
          aggregate: {
            args: Prisma.ComplaintMessageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateComplaintMessage>
          }
          groupBy: {
            args: Prisma.ComplaintMessageGroupByArgs<ExtArgs>
            result: $Utils.Optional<ComplaintMessageGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.ComplaintMessageFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.ComplaintMessageAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.ComplaintMessageCountArgs<ExtArgs>
            result: $Utils.Optional<ComplaintMessageCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $runCommandRaw: {
          args: Prisma.InputJsonObject,
          result: Prisma.JsonObject
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    category?: CategoryOmit
    product?: ProductOmit
    productImage?: ProductImageOmit
    b2BAccount?: B2BAccountOmit
    markupRule?: MarkupRuleOmit
    booking?: BookingOmit
    bookingItem?: BookingItemOmit
    externalServiceMapping?: ExternalServiceMappingOmit
    paymentTransaction?: PaymentTransactionOmit
    billingRecord?: BillingRecordOmit
    settings?: SettingsOmit
    approvedTour?: ApprovedTourOmit
    complaint?: ComplaintOmit
    complaintMessage?: ComplaintMessageOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    bookings: number
    createdProducts: number
    b2bAccounts: number
    managedUsers: number
    billingRecords: number
    complaints: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bookings?: boolean | UserCountOutputTypeCountBookingsArgs
    createdProducts?: boolean | UserCountOutputTypeCountCreatedProductsArgs
    b2bAccounts?: boolean | UserCountOutputTypeCountB2bAccountsArgs
    managedUsers?: boolean | UserCountOutputTypeCountManagedUsersArgs
    billingRecords?: boolean | UserCountOutputTypeCountBillingRecordsArgs
    complaints?: boolean | UserCountOutputTypeCountComplaintsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBookingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookingWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountB2bAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: B2BAccountWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountManagedUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBillingRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BillingRecordWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountComplaintsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ComplaintWhereInput
  }


  /**
   * Count Type CategoryCountOutputType
   */

  export type CategoryCountOutputType = {
    products: number
  }

  export type CategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | CategoryCountOutputTypeCountProductsArgs
  }

  // Custom InputTypes
  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryCountOutputType
     */
    select?: CategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
  }


  /**
   * Count Type ProductCountOutputType
   */

  export type ProductCountOutputType = {
    images: number
    markupRules: number
    bookingItems: number
  }

  export type ProductCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    images?: boolean | ProductCountOutputTypeCountImagesArgs
    markupRules?: boolean | ProductCountOutputTypeCountMarkupRulesArgs
    bookingItems?: boolean | ProductCountOutputTypeCountBookingItemsArgs
  }

  // Custom InputTypes
  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCountOutputType
     */
    select?: ProductCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountImagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductImageWhereInput
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountMarkupRulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MarkupRuleWhereInput
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountBookingItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookingItemWhereInput
  }


  /**
   * Count Type B2BAccountCountOutputType
   */

  export type B2BAccountCountOutputType = {
    markupRules: number
    bookings: number
  }

  export type B2BAccountCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    markupRules?: boolean | B2BAccountCountOutputTypeCountMarkupRulesArgs
    bookings?: boolean | B2BAccountCountOutputTypeCountBookingsArgs
  }

  // Custom InputTypes
  /**
   * B2BAccountCountOutputType without action
   */
  export type B2BAccountCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the B2BAccountCountOutputType
     */
    select?: B2BAccountCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * B2BAccountCountOutputType without action
   */
  export type B2BAccountCountOutputTypeCountMarkupRulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MarkupRuleWhereInput
  }

  /**
   * B2BAccountCountOutputType without action
   */
  export type B2BAccountCountOutputTypeCountBookingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookingWhereInput
  }


  /**
   * Count Type BookingCountOutputType
   */

  export type BookingCountOutputType = {
    items: number
    paymentTransactions: number
    billingRecords: number
    complaints: number
  }

  export type BookingCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    items?: boolean | BookingCountOutputTypeCountItemsArgs
    paymentTransactions?: boolean | BookingCountOutputTypeCountPaymentTransactionsArgs
    billingRecords?: boolean | BookingCountOutputTypeCountBillingRecordsArgs
    complaints?: boolean | BookingCountOutputTypeCountComplaintsArgs
  }

  // Custom InputTypes
  /**
   * BookingCountOutputType without action
   */
  export type BookingCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookingCountOutputType
     */
    select?: BookingCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BookingCountOutputType without action
   */
  export type BookingCountOutputTypeCountItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookingItemWhereInput
  }

  /**
   * BookingCountOutputType without action
   */
  export type BookingCountOutputTypeCountPaymentTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentTransactionWhereInput
  }

  /**
   * BookingCountOutputType without action
   */
  export type BookingCountOutputTypeCountBillingRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BillingRecordWhereInput
  }

  /**
   * BookingCountOutputType without action
   */
  export type BookingCountOutputTypeCountComplaintsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ComplaintWhereInput
  }


  /**
   * Count Type ComplaintCountOutputType
   */

  export type ComplaintCountOutputType = {
    messages: number
  }

  export type ComplaintCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    messages?: boolean | ComplaintCountOutputTypeCountMessagesArgs
  }

  // Custom InputTypes
  /**
   * ComplaintCountOutputType without action
   */
  export type ComplaintCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComplaintCountOutputType
     */
    select?: ComplaintCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ComplaintCountOutputType without action
   */
  export type ComplaintCountOutputTypeCountMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ComplaintMessageWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    markupValue: number | null
  }

  export type UserSumAggregateOutputType = {
    markupValue: number | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    firstName: string | null
    lastName: string | null
    email: string | null
    phoneNumber: string | null
    dateOfBirth: Date | null
    nationality: string | null
    password: string | null
    role: $Enums.Role | null
    preferredLanguage: string | null
    companyName: string | null
    businessLicense: string | null
    markupType: string | null
    markupValue: number | null
    isActive: boolean | null
    emailVerified: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    accountManagerId: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    firstName: string | null
    lastName: string | null
    email: string | null
    phoneNumber: string | null
    dateOfBirth: Date | null
    nationality: string | null
    password: string | null
    role: $Enums.Role | null
    preferredLanguage: string | null
    companyName: string | null
    businessLicense: string | null
    markupType: string | null
    markupValue: number | null
    isActive: boolean | null
    emailVerified: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    accountManagerId: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    firstName: number
    lastName: number
    email: number
    phoneNumber: number
    dateOfBirth: number
    nationality: number
    password: number
    role: number
    preferredLanguage: number
    companyName: number
    businessLicense: number
    markupType: number
    markupValue: number
    isActive: number
    emailVerified: number
    createdAt: number
    updatedAt: number
    metadata: number
    accountManagerId: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    markupValue?: true
  }

  export type UserSumAggregateInputType = {
    markupValue?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    phoneNumber?: true
    dateOfBirth?: true
    nationality?: true
    password?: true
    role?: true
    preferredLanguage?: true
    companyName?: true
    businessLicense?: true
    markupType?: true
    markupValue?: true
    isActive?: true
    emailVerified?: true
    createdAt?: true
    updatedAt?: true
    accountManagerId?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    phoneNumber?: true
    dateOfBirth?: true
    nationality?: true
    password?: true
    role?: true
    preferredLanguage?: true
    companyName?: true
    businessLicense?: true
    markupType?: true
    markupValue?: true
    isActive?: true
    emailVerified?: true
    createdAt?: true
    updatedAt?: true
    accountManagerId?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    phoneNumber?: true
    dateOfBirth?: true
    nationality?: true
    password?: true
    role?: true
    preferredLanguage?: true
    companyName?: true
    businessLicense?: true
    markupType?: true
    markupValue?: true
    isActive?: true
    emailVerified?: true
    createdAt?: true
    updatedAt?: true
    metadata?: true
    accountManagerId?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    firstName: string
    lastName: string
    email: string
    phoneNumber: string
    dateOfBirth: Date | null
    nationality: string
    password: string
    role: $Enums.Role
    preferredLanguage: string
    companyName: string | null
    businessLicense: string | null
    markupType: string | null
    markupValue: number | null
    isActive: boolean
    emailVerified: boolean
    createdAt: Date
    updatedAt: Date
    metadata: JsonValue | null
    accountManagerId: string | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    phoneNumber?: boolean
    dateOfBirth?: boolean
    nationality?: boolean
    password?: boolean
    role?: boolean
    preferredLanguage?: boolean
    companyName?: boolean
    businessLicense?: boolean
    markupType?: boolean
    markupValue?: boolean
    isActive?: boolean
    emailVerified?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    metadata?: boolean
    accountManagerId?: boolean
    bookings?: boolean | User$bookingsArgs<ExtArgs>
    createdProducts?: boolean | User$createdProductsArgs<ExtArgs>
    b2bAccounts?: boolean | User$b2bAccountsArgs<ExtArgs>
    managedUsers?: boolean | User$managedUsersArgs<ExtArgs>
    accountManager?: boolean | User$accountManagerArgs<ExtArgs>
    billingRecords?: boolean | User$billingRecordsArgs<ExtArgs>
    complaints?: boolean | User$complaintsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>



  export type UserSelectScalar = {
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    phoneNumber?: boolean
    dateOfBirth?: boolean
    nationality?: boolean
    password?: boolean
    role?: boolean
    preferredLanguage?: boolean
    companyName?: boolean
    businessLicense?: boolean
    markupType?: boolean
    markupValue?: boolean
    isActive?: boolean
    emailVerified?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    metadata?: boolean
    accountManagerId?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "firstName" | "lastName" | "email" | "phoneNumber" | "dateOfBirth" | "nationality" | "password" | "role" | "preferredLanguage" | "companyName" | "businessLicense" | "markupType" | "markupValue" | "isActive" | "emailVerified" | "createdAt" | "updatedAt" | "metadata" | "accountManagerId", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bookings?: boolean | User$bookingsArgs<ExtArgs>
    createdProducts?: boolean | User$createdProductsArgs<ExtArgs>
    b2bAccounts?: boolean | User$b2bAccountsArgs<ExtArgs>
    managedUsers?: boolean | User$managedUsersArgs<ExtArgs>
    accountManager?: boolean | User$accountManagerArgs<ExtArgs>
    billingRecords?: boolean | User$billingRecordsArgs<ExtArgs>
    complaints?: boolean | User$complaintsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      bookings: Prisma.$BookingPayload<ExtArgs>[]
      createdProducts: Prisma.$ProductPayload<ExtArgs>[]
      b2bAccounts: Prisma.$B2BAccountPayload<ExtArgs>[]
      managedUsers: Prisma.$UserPayload<ExtArgs>[]
      accountManager: Prisma.$UserPayload<ExtArgs> | null
      billingRecords: Prisma.$BillingRecordPayload<ExtArgs>[]
      complaints: Prisma.$ComplaintPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      firstName: string
      lastName: string
      email: string
      phoneNumber: string
      dateOfBirth: Date | null
      nationality: string
      password: string
      role: $Enums.Role
      preferredLanguage: string
      companyName: string | null
      businessLicense: string | null
      markupType: string | null
      markupValue: number | null
      isActive: boolean
      emailVerified: boolean
      createdAt: Date
      updatedAt: Date
      metadata: Prisma.JsonValue | null
      accountManagerId: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * @param {UserFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const user = await prisma.user.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: UserFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a User.
     * @param {UserAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const user = await prisma.user.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: UserAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    bookings<T extends User$bookingsArgs<ExtArgs> = {}>(args?: Subset<T, User$bookingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    createdProducts<T extends User$createdProductsArgs<ExtArgs> = {}>(args?: Subset<T, User$createdProductsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    b2bAccounts<T extends User$b2bAccountsArgs<ExtArgs> = {}>(args?: Subset<T, User$b2bAccountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$B2BAccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    managedUsers<T extends User$managedUsersArgs<ExtArgs> = {}>(args?: Subset<T, User$managedUsersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    accountManager<T extends User$accountManagerArgs<ExtArgs> = {}>(args?: Subset<T, User$accountManagerArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    billingRecords<T extends User$billingRecordsArgs<ExtArgs> = {}>(args?: Subset<T, User$billingRecordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BillingRecordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    complaints<T extends User$complaintsArgs<ExtArgs> = {}>(args?: Subset<T, User$complaintsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComplaintPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly phoneNumber: FieldRef<"User", 'String'>
    readonly dateOfBirth: FieldRef<"User", 'DateTime'>
    readonly nationality: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'Role'>
    readonly preferredLanguage: FieldRef<"User", 'String'>
    readonly companyName: FieldRef<"User", 'String'>
    readonly businessLicense: FieldRef<"User", 'String'>
    readonly markupType: FieldRef<"User", 'String'>
    readonly markupValue: FieldRef<"User", 'Float'>
    readonly isActive: FieldRef<"User", 'Boolean'>
    readonly emailVerified: FieldRef<"User", 'Boolean'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly metadata: FieldRef<"User", 'Json'>
    readonly accountManagerId: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User findRaw
   */
  export type UserFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * User aggregateRaw
   */
  export type UserAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * User.bookings
   */
  export type User$bookingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Booking
     */
    omit?: BookingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingInclude<ExtArgs> | null
    where?: BookingWhereInput
    orderBy?: BookingOrderByWithRelationInput | BookingOrderByWithRelationInput[]
    cursor?: BookingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BookingScalarFieldEnum | BookingScalarFieldEnum[]
  }

  /**
   * User.createdProducts
   */
  export type User$createdProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    cursor?: ProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * User.b2bAccounts
   */
  export type User$b2bAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the B2BAccount
     */
    select?: B2BAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the B2BAccount
     */
    omit?: B2BAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: B2BAccountInclude<ExtArgs> | null
    where?: B2BAccountWhereInput
    orderBy?: B2BAccountOrderByWithRelationInput | B2BAccountOrderByWithRelationInput[]
    cursor?: B2BAccountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: B2BAccountScalarFieldEnum | B2BAccountScalarFieldEnum[]
  }

  /**
   * User.managedUsers
   */
  export type User$managedUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User.accountManager
   */
  export type User$accountManagerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * User.billingRecords
   */
  export type User$billingRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingRecord
     */
    select?: BillingRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BillingRecord
     */
    omit?: BillingRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingRecordInclude<ExtArgs> | null
    where?: BillingRecordWhereInput
    orderBy?: BillingRecordOrderByWithRelationInput | BillingRecordOrderByWithRelationInput[]
    cursor?: BillingRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BillingRecordScalarFieldEnum | BillingRecordScalarFieldEnum[]
  }

  /**
   * User.complaints
   */
  export type User$complaintsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Complaint
     */
    select?: ComplaintSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Complaint
     */
    omit?: ComplaintOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintInclude<ExtArgs> | null
    where?: ComplaintWhereInput
    orderBy?: ComplaintOrderByWithRelationInput | ComplaintOrderByWithRelationInput[]
    cursor?: ComplaintWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ComplaintScalarFieldEnum | ComplaintScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Category
   */

  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryAvgAggregateOutputType = {
    displayOrder: number | null
  }

  export type CategorySumAggregateOutputType = {
    displayOrder: number | null
  }

  export type CategoryMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    slug: string | null
    icon: string | null
    status: $Enums.CategoryStatus | null
    displayOrder: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CategoryMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    slug: string | null
    icon: string | null
    status: $Enums.CategoryStatus | null
    displayOrder: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CategoryCountAggregateOutputType = {
    id: number
    name: number
    description: number
    slug: number
    icon: number
    status: number
    displayOrder: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CategoryAvgAggregateInputType = {
    displayOrder?: true
  }

  export type CategorySumAggregateInputType = {
    displayOrder?: true
  }

  export type CategoryMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    slug?: true
    icon?: true
    status?: true
    displayOrder?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CategoryMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    slug?: true
    icon?: true
    status?: true
    displayOrder?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CategoryCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    slug?: true
    icon?: true
    status?: true
    displayOrder?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Category to aggregate.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type CategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithAggregationInput | CategoryOrderByWithAggregationInput[]
    by: CategoryScalarFieldEnum[] | CategoryScalarFieldEnum
    having?: CategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _avg?: CategoryAvgAggregateInputType
    _sum?: CategorySumAggregateInputType
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }

  export type CategoryGroupByOutputType = {
    id: string
    name: string
    description: string
    slug: string
    icon: string | null
    status: $Enums.CategoryStatus
    displayOrder: number
    createdAt: Date
    updatedAt: Date
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends CategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type CategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    slug?: boolean
    icon?: boolean
    status?: boolean
    displayOrder?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    products?: boolean | Category$productsArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>



  export type CategorySelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    slug?: boolean
    icon?: boolean
    status?: boolean
    displayOrder?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CategoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "slug" | "icon" | "status" | "displayOrder" | "createdAt" | "updatedAt", ExtArgs["result"]["category"]>
  export type CategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | Category$productsArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $CategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Category"
    objects: {
      products: Prisma.$ProductPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string
      slug: string
      icon: string | null
      status: $Enums.CategoryStatus
      displayOrder: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["category"]>
    composites: {}
  }

  type CategoryGetPayload<S extends boolean | null | undefined | CategoryDefaultArgs> = $Result.GetResult<Prisma.$CategoryPayload, S>

  type CategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CategoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CategoryCountAggregateInputType | true
    }

  export interface CategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Category'], meta: { name: 'Category' } }
    /**
     * Find zero or one Category that matches the filter.
     * @param {CategoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CategoryFindUniqueArgs>(args: SelectSubset<T, CategoryFindUniqueArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Category that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CategoryFindUniqueOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, CategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CategoryFindFirstArgs>(args?: SelectSubset<T, CategoryFindFirstArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Category that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, CategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryWithIdOnly = await prisma.category.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CategoryFindManyArgs>(args?: SelectSubset<T, CategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Category.
     * @param {CategoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
     */
    create<T extends CategoryCreateArgs>(args: SelectSubset<T, CategoryCreateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Categories.
     * @param {CategoryCreateManyArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CategoryCreateManyArgs>(args?: SelectSubset<T, CategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Category.
     * @param {CategoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
     */
    delete<T extends CategoryDeleteArgs>(args: SelectSubset<T, CategoryDeleteArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Category.
     * @param {CategoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CategoryUpdateArgs>(args: SelectSubset<T, CategoryUpdateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Categories.
     * @param {CategoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CategoryDeleteManyArgs>(args?: SelectSubset<T, CategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CategoryUpdateManyArgs>(args: SelectSubset<T, CategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Category.
     * @param {CategoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
     */
    upsert<T extends CategoryUpsertArgs>(args: SelectSubset<T, CategoryUpsertArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Categories that matches the filter.
     * @param {CategoryFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const category = await prisma.category.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: CategoryFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Category.
     * @param {CategoryAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const category = await prisma.category.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: CategoryAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategoryCountArgs>(
      args?: Subset<T, CategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): Prisma.PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryGroupByArgs['orderBy'] }
        : { orderBy?: CategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Category model
   */
  readonly fields: CategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    products<T extends Category$productsArgs<ExtArgs> = {}>(args?: Subset<T, Category$productsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Category model
   */
  interface CategoryFieldRefs {
    readonly id: FieldRef<"Category", 'String'>
    readonly name: FieldRef<"Category", 'String'>
    readonly description: FieldRef<"Category", 'String'>
    readonly slug: FieldRef<"Category", 'String'>
    readonly icon: FieldRef<"Category", 'String'>
    readonly status: FieldRef<"Category", 'CategoryStatus'>
    readonly displayOrder: FieldRef<"Category", 'Int'>
    readonly createdAt: FieldRef<"Category", 'DateTime'>
    readonly updatedAt: FieldRef<"Category", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Category findUnique
   */
  export type CategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findUniqueOrThrow
   */
  export type CategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findFirst
   */
  export type CategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findFirstOrThrow
   */
  export type CategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findMany
   */
  export type CategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Categories to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category create
   */
  export type CategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a Category.
     */
    data: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
  }

  /**
   * Category createMany
   */
  export type CategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
  }

  /**
   * Category update
   */
  export type CategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a Category.
     */
    data: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
    /**
     * Choose, which Category to update.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category updateMany
   */
  export type CategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Categories.
     */
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategoryWhereInput
    /**
     * Limit how many Categories to update.
     */
    limit?: number
  }

  /**
   * Category upsert
   */
  export type CategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the Category to update in case it exists.
     */
    where: CategoryWhereUniqueInput
    /**
     * In case the Category found by the `where` argument doesn't exist, create a new Category with this data.
     */
    create: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
    /**
     * In case the Category was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
  }

  /**
   * Category delete
   */
  export type CategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter which Category to delete.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category deleteMany
   */
  export type CategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categories to delete
     */
    where?: CategoryWhereInput
    /**
     * Limit how many Categories to delete.
     */
    limit?: number
  }

  /**
   * Category findRaw
   */
  export type CategoryFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Category aggregateRaw
   */
  export type CategoryAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Category.products
   */
  export type Category$productsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    cursor?: ProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Category without action
   */
  export type CategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
  }


  /**
   * Model Product
   */

  export type AggregateProduct = {
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  export type ProductAvgAggregateOutputType = {
    basePrice: number | null
  }

  export type ProductSumAggregateOutputType = {
    basePrice: number | null
  }

  export type ProductMinAggregateOutputType = {
    id: string | null
    name: string | null
    slug: string | null
    type: $Enums.ProductType | null
    shortDesc: string | null
    longDesc: string | null
    baseCurrency: $Enums.Currency | null
    basePrice: number | null
    isActive: boolean | null
    categoryId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
  }

  export type ProductMaxAggregateOutputType = {
    id: string | null
    name: string | null
    slug: string | null
    type: $Enums.ProductType | null
    shortDesc: string | null
    longDesc: string | null
    baseCurrency: $Enums.Currency | null
    basePrice: number | null
    isActive: boolean | null
    categoryId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
  }

  export type ProductCountAggregateOutputType = {
    id: number
    name: number
    slug: number
    type: number
    shortDesc: number
    longDesc: number
    baseCurrency: number
    basePrice: number
    isActive: number
    categoryId: number
    createdAt: number
    updatedAt: number
    createdById: number
    externalIds: number
    _all: number
  }


  export type ProductAvgAggregateInputType = {
    basePrice?: true
  }

  export type ProductSumAggregateInputType = {
    basePrice?: true
  }

  export type ProductMinAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    type?: true
    shortDesc?: true
    longDesc?: true
    baseCurrency?: true
    basePrice?: true
    isActive?: true
    categoryId?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
  }

  export type ProductMaxAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    type?: true
    shortDesc?: true
    longDesc?: true
    baseCurrency?: true
    basePrice?: true
    isActive?: true
    categoryId?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
  }

  export type ProductCountAggregateInputType = {
    id?: true
    name?: true
    slug?: true
    type?: true
    shortDesc?: true
    longDesc?: true
    baseCurrency?: true
    basePrice?: true
    isActive?: true
    categoryId?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    externalIds?: true
    _all?: true
  }

  export type ProductAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Product to aggregate.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Products
    **/
    _count?: true | ProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductMaxAggregateInputType
  }

  export type GetProductAggregateType<T extends ProductAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct[P]>
      : GetScalarType<T[P], AggregateProduct[P]>
  }




  export type ProductGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithAggregationInput | ProductOrderByWithAggregationInput[]
    by: ProductScalarFieldEnum[] | ProductScalarFieldEnum
    having?: ProductScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductCountAggregateInputType | true
    _avg?: ProductAvgAggregateInputType
    _sum?: ProductSumAggregateInputType
    _min?: ProductMinAggregateInputType
    _max?: ProductMaxAggregateInputType
  }

  export type ProductGroupByOutputType = {
    id: string
    name: string
    slug: string
    type: $Enums.ProductType
    shortDesc: string | null
    longDesc: string | null
    baseCurrency: $Enums.Currency
    basePrice: number
    isActive: boolean
    categoryId: string
    createdAt: Date
    updatedAt: Date
    createdById: string | null
    externalIds: JsonValue | null
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  type GetProductGroupByPayload<T extends ProductGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductGroupByOutputType[P]>
            : GetScalarType<T[P], ProductGroupByOutputType[P]>
        }
      >
    >


  export type ProductSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    slug?: boolean
    type?: boolean
    shortDesc?: boolean
    longDesc?: boolean
    baseCurrency?: boolean
    basePrice?: boolean
    isActive?: boolean
    categoryId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    externalIds?: boolean
    images?: boolean | Product$imagesArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    createdBy?: boolean | Product$createdByArgs<ExtArgs>
    markupRules?: boolean | Product$markupRulesArgs<ExtArgs>
    bookingItems?: boolean | Product$bookingItemsArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["product"]>



  export type ProductSelectScalar = {
    id?: boolean
    name?: boolean
    slug?: boolean
    type?: boolean
    shortDesc?: boolean
    longDesc?: boolean
    baseCurrency?: boolean
    basePrice?: boolean
    isActive?: boolean
    categoryId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    externalIds?: boolean
  }

  export type ProductOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "slug" | "type" | "shortDesc" | "longDesc" | "baseCurrency" | "basePrice" | "isActive" | "categoryId" | "createdAt" | "updatedAt" | "createdById" | "externalIds", ExtArgs["result"]["product"]>
  export type ProductInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    images?: boolean | Product$imagesArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    createdBy?: boolean | Product$createdByArgs<ExtArgs>
    markupRules?: boolean | Product$markupRulesArgs<ExtArgs>
    bookingItems?: boolean | Product$bookingItemsArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ProductPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Product"
    objects: {
      images: Prisma.$ProductImagePayload<ExtArgs>[]
      category: Prisma.$CategoryPayload<ExtArgs>
      createdBy: Prisma.$UserPayload<ExtArgs> | null
      markupRules: Prisma.$MarkupRulePayload<ExtArgs>[]
      bookingItems: Prisma.$BookingItemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      slug: string
      type: $Enums.ProductType
      shortDesc: string | null
      longDesc: string | null
      baseCurrency: $Enums.Currency
      basePrice: number
      isActive: boolean
      categoryId: string
      createdAt: Date
      updatedAt: Date
      createdById: string | null
      externalIds: Prisma.JsonValue | null
    }, ExtArgs["result"]["product"]>
    composites: {}
  }

  type ProductGetPayload<S extends boolean | null | undefined | ProductDefaultArgs> = $Result.GetResult<Prisma.$ProductPayload, S>

  type ProductCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProductFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProductCountAggregateInputType | true
    }

  export interface ProductDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Product'], meta: { name: 'Product' } }
    /**
     * Find zero or one Product that matches the filter.
     * @param {ProductFindUniqueArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProductFindUniqueArgs>(args: SelectSubset<T, ProductFindUniqueArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Product that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProductFindUniqueOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProductFindUniqueOrThrowArgs>(args: SelectSubset<T, ProductFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Product that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProductFindFirstArgs>(args?: SelectSubset<T, ProductFindFirstArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Product that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProductFindFirstOrThrowArgs>(args?: SelectSubset<T, ProductFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.product.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.product.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productWithIdOnly = await prisma.product.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProductFindManyArgs>(args?: SelectSubset<T, ProductFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Product.
     * @param {ProductCreateArgs} args - Arguments to create a Product.
     * @example
     * // Create one Product
     * const Product = await prisma.product.create({
     *   data: {
     *     // ... data to create a Product
     *   }
     * })
     * 
     */
    create<T extends ProductCreateArgs>(args: SelectSubset<T, ProductCreateArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Products.
     * @param {ProductCreateManyArgs} args - Arguments to create many Products.
     * @example
     * // Create many Products
     * const product = await prisma.product.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProductCreateManyArgs>(args?: SelectSubset<T, ProductCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Product.
     * @param {ProductDeleteArgs} args - Arguments to delete one Product.
     * @example
     * // Delete one Product
     * const Product = await prisma.product.delete({
     *   where: {
     *     // ... filter to delete one Product
     *   }
     * })
     * 
     */
    delete<T extends ProductDeleteArgs>(args: SelectSubset<T, ProductDeleteArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Product.
     * @param {ProductUpdateArgs} args - Arguments to update one Product.
     * @example
     * // Update one Product
     * const product = await prisma.product.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProductUpdateArgs>(args: SelectSubset<T, ProductUpdateArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Products.
     * @param {ProductDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.product.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProductDeleteManyArgs>(args?: SelectSubset<T, ProductDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProductUpdateManyArgs>(args: SelectSubset<T, ProductUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Product.
     * @param {ProductUpsertArgs} args - Arguments to update or create a Product.
     * @example
     * // Update or create a Product
     * const product = await prisma.product.upsert({
     *   create: {
     *     // ... data to create a Product
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product we want to update
     *   }
     * })
     */
    upsert<T extends ProductUpsertArgs>(args: SelectSubset<T, ProductUpsertArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Products that matches the filter.
     * @param {ProductFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const product = await prisma.product.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: ProductFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Product.
     * @param {ProductAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const product = await prisma.product.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: ProductAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.product.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends ProductCountArgs>(
      args?: Subset<T, ProductCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductAggregateArgs>(args: Subset<T, ProductAggregateArgs>): Prisma.PrismaPromise<GetProductAggregateType<T>>

    /**
     * Group by Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductGroupByArgs['orderBy'] }
        : { orderBy?: ProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Product model
   */
  readonly fields: ProductFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Product.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    images<T extends Product$imagesArgs<ExtArgs> = {}>(args?: Subset<T, Product$imagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductImagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    category<T extends CategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CategoryDefaultArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    createdBy<T extends Product$createdByArgs<ExtArgs> = {}>(args?: Subset<T, Product$createdByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    markupRules<T extends Product$markupRulesArgs<ExtArgs> = {}>(args?: Subset<T, Product$markupRulesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MarkupRulePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    bookingItems<T extends Product$bookingItemsArgs<ExtArgs> = {}>(args?: Subset<T, Product$bookingItemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookingItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Product model
   */
  interface ProductFieldRefs {
    readonly id: FieldRef<"Product", 'String'>
    readonly name: FieldRef<"Product", 'String'>
    readonly slug: FieldRef<"Product", 'String'>
    readonly type: FieldRef<"Product", 'ProductType'>
    readonly shortDesc: FieldRef<"Product", 'String'>
    readonly longDesc: FieldRef<"Product", 'String'>
    readonly baseCurrency: FieldRef<"Product", 'Currency'>
    readonly basePrice: FieldRef<"Product", 'Float'>
    readonly isActive: FieldRef<"Product", 'Boolean'>
    readonly categoryId: FieldRef<"Product", 'String'>
    readonly createdAt: FieldRef<"Product", 'DateTime'>
    readonly updatedAt: FieldRef<"Product", 'DateTime'>
    readonly createdById: FieldRef<"Product", 'String'>
    readonly externalIds: FieldRef<"Product", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * Product findUnique
   */
  export type ProductFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product findUniqueOrThrow
   */
  export type ProductFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product findFirst
   */
  export type ProductFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product findFirstOrThrow
   */
  export type ProductFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product findMany
   */
  export type ProductFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Products to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product create
   */
  export type ProductCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The data needed to create a Product.
     */
    data: XOR<ProductCreateInput, ProductUncheckedCreateInput>
  }

  /**
   * Product createMany
   */
  export type ProductCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Products.
     */
    data: ProductCreateManyInput | ProductCreateManyInput[]
  }

  /**
   * Product update
   */
  export type ProductUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The data needed to update a Product.
     */
    data: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
    /**
     * Choose, which Product to update.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product updateMany
   */
  export type ProductUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Products.
     */
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyInput>
    /**
     * Filter which Products to update
     */
    where?: ProductWhereInput
    /**
     * Limit how many Products to update.
     */
    limit?: number
  }

  /**
   * Product upsert
   */
  export type ProductUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The filter to search for the Product to update in case it exists.
     */
    where: ProductWhereUniqueInput
    /**
     * In case the Product found by the `where` argument doesn't exist, create a new Product with this data.
     */
    create: XOR<ProductCreateInput, ProductUncheckedCreateInput>
    /**
     * In case the Product was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
  }

  /**
   * Product delete
   */
  export type ProductDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter which Product to delete.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product deleteMany
   */
  export type ProductDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Products to delete
     */
    where?: ProductWhereInput
    /**
     * Limit how many Products to delete.
     */
    limit?: number
  }

  /**
   * Product findRaw
   */
  export type ProductFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Product aggregateRaw
   */
  export type ProductAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Product.images
   */
  export type Product$imagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductImage
     */
    select?: ProductImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductImage
     */
    omit?: ProductImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductImageInclude<ExtArgs> | null
    where?: ProductImageWhereInput
    orderBy?: ProductImageOrderByWithRelationInput | ProductImageOrderByWithRelationInput[]
    cursor?: ProductImageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductImageScalarFieldEnum | ProductImageScalarFieldEnum[]
  }

  /**
   * Product.createdBy
   */
  export type Product$createdByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Product.markupRules
   */
  export type Product$markupRulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarkupRule
     */
    select?: MarkupRuleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarkupRule
     */
    omit?: MarkupRuleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarkupRuleInclude<ExtArgs> | null
    where?: MarkupRuleWhereInput
    orderBy?: MarkupRuleOrderByWithRelationInput | MarkupRuleOrderByWithRelationInput[]
    cursor?: MarkupRuleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MarkupRuleScalarFieldEnum | MarkupRuleScalarFieldEnum[]
  }

  /**
   * Product.bookingItems
   */
  export type Product$bookingItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookingItem
     */
    select?: BookingItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookingItem
     */
    omit?: BookingItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingItemInclude<ExtArgs> | null
    where?: BookingItemWhereInput
    orderBy?: BookingItemOrderByWithRelationInput | BookingItemOrderByWithRelationInput[]
    cursor?: BookingItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BookingItemScalarFieldEnum | BookingItemScalarFieldEnum[]
  }

  /**
   * Product without action
   */
  export type ProductDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
  }


  /**
   * Model ProductImage
   */

  export type AggregateProductImage = {
    _count: ProductImageCountAggregateOutputType | null
    _min: ProductImageMinAggregateOutputType | null
    _max: ProductImageMaxAggregateOutputType | null
  }

  export type ProductImageMinAggregateOutputType = {
    id: string | null
    url: string | null
    alt: string | null
    productId: string | null
  }

  export type ProductImageMaxAggregateOutputType = {
    id: string | null
    url: string | null
    alt: string | null
    productId: string | null
  }

  export type ProductImageCountAggregateOutputType = {
    id: number
    url: number
    alt: number
    productId: number
    _all: number
  }


  export type ProductImageMinAggregateInputType = {
    id?: true
    url?: true
    alt?: true
    productId?: true
  }

  export type ProductImageMaxAggregateInputType = {
    id?: true
    url?: true
    alt?: true
    productId?: true
  }

  export type ProductImageCountAggregateInputType = {
    id?: true
    url?: true
    alt?: true
    productId?: true
    _all?: true
  }

  export type ProductImageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductImage to aggregate.
     */
    where?: ProductImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductImages to fetch.
     */
    orderBy?: ProductImageOrderByWithRelationInput | ProductImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProductImages
    **/
    _count?: true | ProductImageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductImageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductImageMaxAggregateInputType
  }

  export type GetProductImageAggregateType<T extends ProductImageAggregateArgs> = {
        [P in keyof T & keyof AggregateProductImage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProductImage[P]>
      : GetScalarType<T[P], AggregateProductImage[P]>
  }




  export type ProductImageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductImageWhereInput
    orderBy?: ProductImageOrderByWithAggregationInput | ProductImageOrderByWithAggregationInput[]
    by: ProductImageScalarFieldEnum[] | ProductImageScalarFieldEnum
    having?: ProductImageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductImageCountAggregateInputType | true
    _min?: ProductImageMinAggregateInputType
    _max?: ProductImageMaxAggregateInputType
  }

  export type ProductImageGroupByOutputType = {
    id: string
    url: string
    alt: string | null
    productId: string
    _count: ProductImageCountAggregateOutputType | null
    _min: ProductImageMinAggregateOutputType | null
    _max: ProductImageMaxAggregateOutputType | null
  }

  type GetProductImageGroupByPayload<T extends ProductImageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductImageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductImageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductImageGroupByOutputType[P]>
            : GetScalarType<T[P], ProductImageGroupByOutputType[P]>
        }
      >
    >


  export type ProductImageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    url?: boolean
    alt?: boolean
    productId?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productImage"]>



  export type ProductImageSelectScalar = {
    id?: boolean
    url?: boolean
    alt?: boolean
    productId?: boolean
  }

  export type ProductImageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "url" | "alt" | "productId", ExtArgs["result"]["productImage"]>
  export type ProductImageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }

  export type $ProductImagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProductImage"
    objects: {
      product: Prisma.$ProductPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      url: string
      alt: string | null
      productId: string
    }, ExtArgs["result"]["productImage"]>
    composites: {}
  }

  type ProductImageGetPayload<S extends boolean | null | undefined | ProductImageDefaultArgs> = $Result.GetResult<Prisma.$ProductImagePayload, S>

  type ProductImageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProductImageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProductImageCountAggregateInputType | true
    }

  export interface ProductImageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProductImage'], meta: { name: 'ProductImage' } }
    /**
     * Find zero or one ProductImage that matches the filter.
     * @param {ProductImageFindUniqueArgs} args - Arguments to find a ProductImage
     * @example
     * // Get one ProductImage
     * const productImage = await prisma.productImage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProductImageFindUniqueArgs>(args: SelectSubset<T, ProductImageFindUniqueArgs<ExtArgs>>): Prisma__ProductImageClient<$Result.GetResult<Prisma.$ProductImagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ProductImage that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProductImageFindUniqueOrThrowArgs} args - Arguments to find a ProductImage
     * @example
     * // Get one ProductImage
     * const productImage = await prisma.productImage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProductImageFindUniqueOrThrowArgs>(args: SelectSubset<T, ProductImageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProductImageClient<$Result.GetResult<Prisma.$ProductImagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProductImage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductImageFindFirstArgs} args - Arguments to find a ProductImage
     * @example
     * // Get one ProductImage
     * const productImage = await prisma.productImage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProductImageFindFirstArgs>(args?: SelectSubset<T, ProductImageFindFirstArgs<ExtArgs>>): Prisma__ProductImageClient<$Result.GetResult<Prisma.$ProductImagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProductImage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductImageFindFirstOrThrowArgs} args - Arguments to find a ProductImage
     * @example
     * // Get one ProductImage
     * const productImage = await prisma.productImage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProductImageFindFirstOrThrowArgs>(args?: SelectSubset<T, ProductImageFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProductImageClient<$Result.GetResult<Prisma.$ProductImagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProductImages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductImageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProductImages
     * const productImages = await prisma.productImage.findMany()
     * 
     * // Get first 10 ProductImages
     * const productImages = await prisma.productImage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productImageWithIdOnly = await prisma.productImage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProductImageFindManyArgs>(args?: SelectSubset<T, ProductImageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductImagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ProductImage.
     * @param {ProductImageCreateArgs} args - Arguments to create a ProductImage.
     * @example
     * // Create one ProductImage
     * const ProductImage = await prisma.productImage.create({
     *   data: {
     *     // ... data to create a ProductImage
     *   }
     * })
     * 
     */
    create<T extends ProductImageCreateArgs>(args: SelectSubset<T, ProductImageCreateArgs<ExtArgs>>): Prisma__ProductImageClient<$Result.GetResult<Prisma.$ProductImagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ProductImages.
     * @param {ProductImageCreateManyArgs} args - Arguments to create many ProductImages.
     * @example
     * // Create many ProductImages
     * const productImage = await prisma.productImage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProductImageCreateManyArgs>(args?: SelectSubset<T, ProductImageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ProductImage.
     * @param {ProductImageDeleteArgs} args - Arguments to delete one ProductImage.
     * @example
     * // Delete one ProductImage
     * const ProductImage = await prisma.productImage.delete({
     *   where: {
     *     // ... filter to delete one ProductImage
     *   }
     * })
     * 
     */
    delete<T extends ProductImageDeleteArgs>(args: SelectSubset<T, ProductImageDeleteArgs<ExtArgs>>): Prisma__ProductImageClient<$Result.GetResult<Prisma.$ProductImagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ProductImage.
     * @param {ProductImageUpdateArgs} args - Arguments to update one ProductImage.
     * @example
     * // Update one ProductImage
     * const productImage = await prisma.productImage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProductImageUpdateArgs>(args: SelectSubset<T, ProductImageUpdateArgs<ExtArgs>>): Prisma__ProductImageClient<$Result.GetResult<Prisma.$ProductImagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ProductImages.
     * @param {ProductImageDeleteManyArgs} args - Arguments to filter ProductImages to delete.
     * @example
     * // Delete a few ProductImages
     * const { count } = await prisma.productImage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProductImageDeleteManyArgs>(args?: SelectSubset<T, ProductImageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductImageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProductImages
     * const productImage = await prisma.productImage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProductImageUpdateManyArgs>(args: SelectSubset<T, ProductImageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProductImage.
     * @param {ProductImageUpsertArgs} args - Arguments to update or create a ProductImage.
     * @example
     * // Update or create a ProductImage
     * const productImage = await prisma.productImage.upsert({
     *   create: {
     *     // ... data to create a ProductImage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProductImage we want to update
     *   }
     * })
     */
    upsert<T extends ProductImageUpsertArgs>(args: SelectSubset<T, ProductImageUpsertArgs<ExtArgs>>): Prisma__ProductImageClient<$Result.GetResult<Prisma.$ProductImagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProductImages that matches the filter.
     * @param {ProductImageFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const productImage = await prisma.productImage.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: ProductImageFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a ProductImage.
     * @param {ProductImageAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const productImage = await prisma.productImage.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: ProductImageAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of ProductImages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductImageCountArgs} args - Arguments to filter ProductImages to count.
     * @example
     * // Count the number of ProductImages
     * const count = await prisma.productImage.count({
     *   where: {
     *     // ... the filter for the ProductImages we want to count
     *   }
     * })
    **/
    count<T extends ProductImageCountArgs>(
      args?: Subset<T, ProductImageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductImageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProductImage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductImageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductImageAggregateArgs>(args: Subset<T, ProductImageAggregateArgs>): Prisma.PrismaPromise<GetProductImageAggregateType<T>>

    /**
     * Group by ProductImage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductImageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductImageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductImageGroupByArgs['orderBy'] }
        : { orderBy?: ProductImageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductImageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductImageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProductImage model
   */
  readonly fields: ProductImageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProductImage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductImageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProductImage model
   */
  interface ProductImageFieldRefs {
    readonly id: FieldRef<"ProductImage", 'String'>
    readonly url: FieldRef<"ProductImage", 'String'>
    readonly alt: FieldRef<"ProductImage", 'String'>
    readonly productId: FieldRef<"ProductImage", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ProductImage findUnique
   */
  export type ProductImageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductImage
     */
    select?: ProductImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductImage
     */
    omit?: ProductImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductImageInclude<ExtArgs> | null
    /**
     * Filter, which ProductImage to fetch.
     */
    where: ProductImageWhereUniqueInput
  }

  /**
   * ProductImage findUniqueOrThrow
   */
  export type ProductImageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductImage
     */
    select?: ProductImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductImage
     */
    omit?: ProductImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductImageInclude<ExtArgs> | null
    /**
     * Filter, which ProductImage to fetch.
     */
    where: ProductImageWhereUniqueInput
  }

  /**
   * ProductImage findFirst
   */
  export type ProductImageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductImage
     */
    select?: ProductImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductImage
     */
    omit?: ProductImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductImageInclude<ExtArgs> | null
    /**
     * Filter, which ProductImage to fetch.
     */
    where?: ProductImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductImages to fetch.
     */
    orderBy?: ProductImageOrderByWithRelationInput | ProductImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductImages.
     */
    cursor?: ProductImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductImages.
     */
    distinct?: ProductImageScalarFieldEnum | ProductImageScalarFieldEnum[]
  }

  /**
   * ProductImage findFirstOrThrow
   */
  export type ProductImageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductImage
     */
    select?: ProductImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductImage
     */
    omit?: ProductImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductImageInclude<ExtArgs> | null
    /**
     * Filter, which ProductImage to fetch.
     */
    where?: ProductImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductImages to fetch.
     */
    orderBy?: ProductImageOrderByWithRelationInput | ProductImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductImages.
     */
    cursor?: ProductImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductImages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductImages.
     */
    distinct?: ProductImageScalarFieldEnum | ProductImageScalarFieldEnum[]
  }

  /**
   * ProductImage findMany
   */
  export type ProductImageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductImage
     */
    select?: ProductImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductImage
     */
    omit?: ProductImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductImageInclude<ExtArgs> | null
    /**
     * Filter, which ProductImages to fetch.
     */
    where?: ProductImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductImages to fetch.
     */
    orderBy?: ProductImageOrderByWithRelationInput | ProductImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProductImages.
     */
    cursor?: ProductImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductImages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductImages.
     */
    skip?: number
    distinct?: ProductImageScalarFieldEnum | ProductImageScalarFieldEnum[]
  }

  /**
   * ProductImage create
   */
  export type ProductImageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductImage
     */
    select?: ProductImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductImage
     */
    omit?: ProductImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductImageInclude<ExtArgs> | null
    /**
     * The data needed to create a ProductImage.
     */
    data: XOR<ProductImageCreateInput, ProductImageUncheckedCreateInput>
  }

  /**
   * ProductImage createMany
   */
  export type ProductImageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProductImages.
     */
    data: ProductImageCreateManyInput | ProductImageCreateManyInput[]
  }

  /**
   * ProductImage update
   */
  export type ProductImageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductImage
     */
    select?: ProductImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductImage
     */
    omit?: ProductImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductImageInclude<ExtArgs> | null
    /**
     * The data needed to update a ProductImage.
     */
    data: XOR<ProductImageUpdateInput, ProductImageUncheckedUpdateInput>
    /**
     * Choose, which ProductImage to update.
     */
    where: ProductImageWhereUniqueInput
  }

  /**
   * ProductImage updateMany
   */
  export type ProductImageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProductImages.
     */
    data: XOR<ProductImageUpdateManyMutationInput, ProductImageUncheckedUpdateManyInput>
    /**
     * Filter which ProductImages to update
     */
    where?: ProductImageWhereInput
    /**
     * Limit how many ProductImages to update.
     */
    limit?: number
  }

  /**
   * ProductImage upsert
   */
  export type ProductImageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductImage
     */
    select?: ProductImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductImage
     */
    omit?: ProductImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductImageInclude<ExtArgs> | null
    /**
     * The filter to search for the ProductImage to update in case it exists.
     */
    where: ProductImageWhereUniqueInput
    /**
     * In case the ProductImage found by the `where` argument doesn't exist, create a new ProductImage with this data.
     */
    create: XOR<ProductImageCreateInput, ProductImageUncheckedCreateInput>
    /**
     * In case the ProductImage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductImageUpdateInput, ProductImageUncheckedUpdateInput>
  }

  /**
   * ProductImage delete
   */
  export type ProductImageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductImage
     */
    select?: ProductImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductImage
     */
    omit?: ProductImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductImageInclude<ExtArgs> | null
    /**
     * Filter which ProductImage to delete.
     */
    where: ProductImageWhereUniqueInput
  }

  /**
   * ProductImage deleteMany
   */
  export type ProductImageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductImages to delete
     */
    where?: ProductImageWhereInput
    /**
     * Limit how many ProductImages to delete.
     */
    limit?: number
  }

  /**
   * ProductImage findRaw
   */
  export type ProductImageFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * ProductImage aggregateRaw
   */
  export type ProductImageAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * ProductImage without action
   */
  export type ProductImageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductImage
     */
    select?: ProductImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProductImage
     */
    omit?: ProductImageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductImageInclude<ExtArgs> | null
  }


  /**
   * Model B2BAccount
   */

  export type AggregateB2BAccount = {
    _count: B2BAccountCountAggregateOutputType | null
    _avg: B2BAccountAvgAggregateOutputType | null
    _sum: B2BAccountSumAggregateOutputType | null
    _min: B2BAccountMinAggregateOutputType | null
    _max: B2BAccountMaxAggregateOutputType | null
  }

  export type B2BAccountAvgAggregateOutputType = {
    defaultMarkup: number | null
  }

  export type B2BAccountSumAggregateOutputType = {
    defaultMarkup: number | null
  }

  export type B2BAccountMinAggregateOutputType = {
    id: string | null
    name: string | null
    code: string | null
    userId: string | null
    defaultMarkup: number | null
    currency: $Enums.Currency | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type B2BAccountMaxAggregateOutputType = {
    id: string | null
    name: string | null
    code: string | null
    userId: string | null
    defaultMarkup: number | null
    currency: $Enums.Currency | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type B2BAccountCountAggregateOutputType = {
    id: number
    name: number
    code: number
    userId: number
    defaultMarkup: number
    currency: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type B2BAccountAvgAggregateInputType = {
    defaultMarkup?: true
  }

  export type B2BAccountSumAggregateInputType = {
    defaultMarkup?: true
  }

  export type B2BAccountMinAggregateInputType = {
    id?: true
    name?: true
    code?: true
    userId?: true
    defaultMarkup?: true
    currency?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type B2BAccountMaxAggregateInputType = {
    id?: true
    name?: true
    code?: true
    userId?: true
    defaultMarkup?: true
    currency?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type B2BAccountCountAggregateInputType = {
    id?: true
    name?: true
    code?: true
    userId?: true
    defaultMarkup?: true
    currency?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type B2BAccountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which B2BAccount to aggregate.
     */
    where?: B2BAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of B2BAccounts to fetch.
     */
    orderBy?: B2BAccountOrderByWithRelationInput | B2BAccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: B2BAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` B2BAccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` B2BAccounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned B2BAccounts
    **/
    _count?: true | B2BAccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: B2BAccountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: B2BAccountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: B2BAccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: B2BAccountMaxAggregateInputType
  }

  export type GetB2BAccountAggregateType<T extends B2BAccountAggregateArgs> = {
        [P in keyof T & keyof AggregateB2BAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateB2BAccount[P]>
      : GetScalarType<T[P], AggregateB2BAccount[P]>
  }




  export type B2BAccountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: B2BAccountWhereInput
    orderBy?: B2BAccountOrderByWithAggregationInput | B2BAccountOrderByWithAggregationInput[]
    by: B2BAccountScalarFieldEnum[] | B2BAccountScalarFieldEnum
    having?: B2BAccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: B2BAccountCountAggregateInputType | true
    _avg?: B2BAccountAvgAggregateInputType
    _sum?: B2BAccountSumAggregateInputType
    _min?: B2BAccountMinAggregateInputType
    _max?: B2BAccountMaxAggregateInputType
  }

  export type B2BAccountGroupByOutputType = {
    id: string
    name: string
    code: string
    userId: string | null
    defaultMarkup: number
    currency: $Enums.Currency
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: B2BAccountCountAggregateOutputType | null
    _avg: B2BAccountAvgAggregateOutputType | null
    _sum: B2BAccountSumAggregateOutputType | null
    _min: B2BAccountMinAggregateOutputType | null
    _max: B2BAccountMaxAggregateOutputType | null
  }

  type GetB2BAccountGroupByPayload<T extends B2BAccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<B2BAccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof B2BAccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], B2BAccountGroupByOutputType[P]>
            : GetScalarType<T[P], B2BAccountGroupByOutputType[P]>
        }
      >
    >


  export type B2BAccountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    userId?: boolean
    defaultMarkup?: boolean
    currency?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | B2BAccount$userArgs<ExtArgs>
    markupRules?: boolean | B2BAccount$markupRulesArgs<ExtArgs>
    bookings?: boolean | B2BAccount$bookingsArgs<ExtArgs>
    _count?: boolean | B2BAccountCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["b2BAccount"]>



  export type B2BAccountSelectScalar = {
    id?: boolean
    name?: boolean
    code?: boolean
    userId?: boolean
    defaultMarkup?: boolean
    currency?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type B2BAccountOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "code" | "userId" | "defaultMarkup" | "currency" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["b2BAccount"]>
  export type B2BAccountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | B2BAccount$userArgs<ExtArgs>
    markupRules?: boolean | B2BAccount$markupRulesArgs<ExtArgs>
    bookings?: boolean | B2BAccount$bookingsArgs<ExtArgs>
    _count?: boolean | B2BAccountCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $B2BAccountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "B2BAccount"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
      markupRules: Prisma.$MarkupRulePayload<ExtArgs>[]
      bookings: Prisma.$BookingPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      code: string
      userId: string | null
      defaultMarkup: number
      currency: $Enums.Currency
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["b2BAccount"]>
    composites: {}
  }

  type B2BAccountGetPayload<S extends boolean | null | undefined | B2BAccountDefaultArgs> = $Result.GetResult<Prisma.$B2BAccountPayload, S>

  type B2BAccountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<B2BAccountFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: B2BAccountCountAggregateInputType | true
    }

  export interface B2BAccountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['B2BAccount'], meta: { name: 'B2BAccount' } }
    /**
     * Find zero or one B2BAccount that matches the filter.
     * @param {B2BAccountFindUniqueArgs} args - Arguments to find a B2BAccount
     * @example
     * // Get one B2BAccount
     * const b2BAccount = await prisma.b2BAccount.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends B2BAccountFindUniqueArgs>(args: SelectSubset<T, B2BAccountFindUniqueArgs<ExtArgs>>): Prisma__B2BAccountClient<$Result.GetResult<Prisma.$B2BAccountPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one B2BAccount that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {B2BAccountFindUniqueOrThrowArgs} args - Arguments to find a B2BAccount
     * @example
     * // Get one B2BAccount
     * const b2BAccount = await prisma.b2BAccount.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends B2BAccountFindUniqueOrThrowArgs>(args: SelectSubset<T, B2BAccountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__B2BAccountClient<$Result.GetResult<Prisma.$B2BAccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first B2BAccount that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {B2BAccountFindFirstArgs} args - Arguments to find a B2BAccount
     * @example
     * // Get one B2BAccount
     * const b2BAccount = await prisma.b2BAccount.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends B2BAccountFindFirstArgs>(args?: SelectSubset<T, B2BAccountFindFirstArgs<ExtArgs>>): Prisma__B2BAccountClient<$Result.GetResult<Prisma.$B2BAccountPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first B2BAccount that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {B2BAccountFindFirstOrThrowArgs} args - Arguments to find a B2BAccount
     * @example
     * // Get one B2BAccount
     * const b2BAccount = await prisma.b2BAccount.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends B2BAccountFindFirstOrThrowArgs>(args?: SelectSubset<T, B2BAccountFindFirstOrThrowArgs<ExtArgs>>): Prisma__B2BAccountClient<$Result.GetResult<Prisma.$B2BAccountPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more B2BAccounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {B2BAccountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all B2BAccounts
     * const b2BAccounts = await prisma.b2BAccount.findMany()
     * 
     * // Get first 10 B2BAccounts
     * const b2BAccounts = await prisma.b2BAccount.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const b2BAccountWithIdOnly = await prisma.b2BAccount.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends B2BAccountFindManyArgs>(args?: SelectSubset<T, B2BAccountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$B2BAccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a B2BAccount.
     * @param {B2BAccountCreateArgs} args - Arguments to create a B2BAccount.
     * @example
     * // Create one B2BAccount
     * const B2BAccount = await prisma.b2BAccount.create({
     *   data: {
     *     // ... data to create a B2BAccount
     *   }
     * })
     * 
     */
    create<T extends B2BAccountCreateArgs>(args: SelectSubset<T, B2BAccountCreateArgs<ExtArgs>>): Prisma__B2BAccountClient<$Result.GetResult<Prisma.$B2BAccountPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many B2BAccounts.
     * @param {B2BAccountCreateManyArgs} args - Arguments to create many B2BAccounts.
     * @example
     * // Create many B2BAccounts
     * const b2BAccount = await prisma.b2BAccount.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends B2BAccountCreateManyArgs>(args?: SelectSubset<T, B2BAccountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a B2BAccount.
     * @param {B2BAccountDeleteArgs} args - Arguments to delete one B2BAccount.
     * @example
     * // Delete one B2BAccount
     * const B2BAccount = await prisma.b2BAccount.delete({
     *   where: {
     *     // ... filter to delete one B2BAccount
     *   }
     * })
     * 
     */
    delete<T extends B2BAccountDeleteArgs>(args: SelectSubset<T, B2BAccountDeleteArgs<ExtArgs>>): Prisma__B2BAccountClient<$Result.GetResult<Prisma.$B2BAccountPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one B2BAccount.
     * @param {B2BAccountUpdateArgs} args - Arguments to update one B2BAccount.
     * @example
     * // Update one B2BAccount
     * const b2BAccount = await prisma.b2BAccount.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends B2BAccountUpdateArgs>(args: SelectSubset<T, B2BAccountUpdateArgs<ExtArgs>>): Prisma__B2BAccountClient<$Result.GetResult<Prisma.$B2BAccountPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more B2BAccounts.
     * @param {B2BAccountDeleteManyArgs} args - Arguments to filter B2BAccounts to delete.
     * @example
     * // Delete a few B2BAccounts
     * const { count } = await prisma.b2BAccount.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends B2BAccountDeleteManyArgs>(args?: SelectSubset<T, B2BAccountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more B2BAccounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {B2BAccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many B2BAccounts
     * const b2BAccount = await prisma.b2BAccount.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends B2BAccountUpdateManyArgs>(args: SelectSubset<T, B2BAccountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one B2BAccount.
     * @param {B2BAccountUpsertArgs} args - Arguments to update or create a B2BAccount.
     * @example
     * // Update or create a B2BAccount
     * const b2BAccount = await prisma.b2BAccount.upsert({
     *   create: {
     *     // ... data to create a B2BAccount
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the B2BAccount we want to update
     *   }
     * })
     */
    upsert<T extends B2BAccountUpsertArgs>(args: SelectSubset<T, B2BAccountUpsertArgs<ExtArgs>>): Prisma__B2BAccountClient<$Result.GetResult<Prisma.$B2BAccountPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more B2BAccounts that matches the filter.
     * @param {B2BAccountFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const b2BAccount = await prisma.b2BAccount.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: B2BAccountFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a B2BAccount.
     * @param {B2BAccountAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const b2BAccount = await prisma.b2BAccount.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: B2BAccountAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of B2BAccounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {B2BAccountCountArgs} args - Arguments to filter B2BAccounts to count.
     * @example
     * // Count the number of B2BAccounts
     * const count = await prisma.b2BAccount.count({
     *   where: {
     *     // ... the filter for the B2BAccounts we want to count
     *   }
     * })
    **/
    count<T extends B2BAccountCountArgs>(
      args?: Subset<T, B2BAccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], B2BAccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a B2BAccount.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {B2BAccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends B2BAccountAggregateArgs>(args: Subset<T, B2BAccountAggregateArgs>): Prisma.PrismaPromise<GetB2BAccountAggregateType<T>>

    /**
     * Group by B2BAccount.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {B2BAccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends B2BAccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: B2BAccountGroupByArgs['orderBy'] }
        : { orderBy?: B2BAccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, B2BAccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetB2BAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the B2BAccount model
   */
  readonly fields: B2BAccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for B2BAccount.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__B2BAccountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends B2BAccount$userArgs<ExtArgs> = {}>(args?: Subset<T, B2BAccount$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    markupRules<T extends B2BAccount$markupRulesArgs<ExtArgs> = {}>(args?: Subset<T, B2BAccount$markupRulesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MarkupRulePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    bookings<T extends B2BAccount$bookingsArgs<ExtArgs> = {}>(args?: Subset<T, B2BAccount$bookingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the B2BAccount model
   */
  interface B2BAccountFieldRefs {
    readonly id: FieldRef<"B2BAccount", 'String'>
    readonly name: FieldRef<"B2BAccount", 'String'>
    readonly code: FieldRef<"B2BAccount", 'String'>
    readonly userId: FieldRef<"B2BAccount", 'String'>
    readonly defaultMarkup: FieldRef<"B2BAccount", 'Float'>
    readonly currency: FieldRef<"B2BAccount", 'Currency'>
    readonly isActive: FieldRef<"B2BAccount", 'Boolean'>
    readonly createdAt: FieldRef<"B2BAccount", 'DateTime'>
    readonly updatedAt: FieldRef<"B2BAccount", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * B2BAccount findUnique
   */
  export type B2BAccountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the B2BAccount
     */
    select?: B2BAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the B2BAccount
     */
    omit?: B2BAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: B2BAccountInclude<ExtArgs> | null
    /**
     * Filter, which B2BAccount to fetch.
     */
    where: B2BAccountWhereUniqueInput
  }

  /**
   * B2BAccount findUniqueOrThrow
   */
  export type B2BAccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the B2BAccount
     */
    select?: B2BAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the B2BAccount
     */
    omit?: B2BAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: B2BAccountInclude<ExtArgs> | null
    /**
     * Filter, which B2BAccount to fetch.
     */
    where: B2BAccountWhereUniqueInput
  }

  /**
   * B2BAccount findFirst
   */
  export type B2BAccountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the B2BAccount
     */
    select?: B2BAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the B2BAccount
     */
    omit?: B2BAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: B2BAccountInclude<ExtArgs> | null
    /**
     * Filter, which B2BAccount to fetch.
     */
    where?: B2BAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of B2BAccounts to fetch.
     */
    orderBy?: B2BAccountOrderByWithRelationInput | B2BAccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for B2BAccounts.
     */
    cursor?: B2BAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` B2BAccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` B2BAccounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of B2BAccounts.
     */
    distinct?: B2BAccountScalarFieldEnum | B2BAccountScalarFieldEnum[]
  }

  /**
   * B2BAccount findFirstOrThrow
   */
  export type B2BAccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the B2BAccount
     */
    select?: B2BAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the B2BAccount
     */
    omit?: B2BAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: B2BAccountInclude<ExtArgs> | null
    /**
     * Filter, which B2BAccount to fetch.
     */
    where?: B2BAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of B2BAccounts to fetch.
     */
    orderBy?: B2BAccountOrderByWithRelationInput | B2BAccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for B2BAccounts.
     */
    cursor?: B2BAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` B2BAccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` B2BAccounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of B2BAccounts.
     */
    distinct?: B2BAccountScalarFieldEnum | B2BAccountScalarFieldEnum[]
  }

  /**
   * B2BAccount findMany
   */
  export type B2BAccountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the B2BAccount
     */
    select?: B2BAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the B2BAccount
     */
    omit?: B2BAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: B2BAccountInclude<ExtArgs> | null
    /**
     * Filter, which B2BAccounts to fetch.
     */
    where?: B2BAccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of B2BAccounts to fetch.
     */
    orderBy?: B2BAccountOrderByWithRelationInput | B2BAccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing B2BAccounts.
     */
    cursor?: B2BAccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` B2BAccounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` B2BAccounts.
     */
    skip?: number
    distinct?: B2BAccountScalarFieldEnum | B2BAccountScalarFieldEnum[]
  }

  /**
   * B2BAccount create
   */
  export type B2BAccountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the B2BAccount
     */
    select?: B2BAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the B2BAccount
     */
    omit?: B2BAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: B2BAccountInclude<ExtArgs> | null
    /**
     * The data needed to create a B2BAccount.
     */
    data: XOR<B2BAccountCreateInput, B2BAccountUncheckedCreateInput>
  }

  /**
   * B2BAccount createMany
   */
  export type B2BAccountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many B2BAccounts.
     */
    data: B2BAccountCreateManyInput | B2BAccountCreateManyInput[]
  }

  /**
   * B2BAccount update
   */
  export type B2BAccountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the B2BAccount
     */
    select?: B2BAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the B2BAccount
     */
    omit?: B2BAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: B2BAccountInclude<ExtArgs> | null
    /**
     * The data needed to update a B2BAccount.
     */
    data: XOR<B2BAccountUpdateInput, B2BAccountUncheckedUpdateInput>
    /**
     * Choose, which B2BAccount to update.
     */
    where: B2BAccountWhereUniqueInput
  }

  /**
   * B2BAccount updateMany
   */
  export type B2BAccountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update B2BAccounts.
     */
    data: XOR<B2BAccountUpdateManyMutationInput, B2BAccountUncheckedUpdateManyInput>
    /**
     * Filter which B2BAccounts to update
     */
    where?: B2BAccountWhereInput
    /**
     * Limit how many B2BAccounts to update.
     */
    limit?: number
  }

  /**
   * B2BAccount upsert
   */
  export type B2BAccountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the B2BAccount
     */
    select?: B2BAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the B2BAccount
     */
    omit?: B2BAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: B2BAccountInclude<ExtArgs> | null
    /**
     * The filter to search for the B2BAccount to update in case it exists.
     */
    where: B2BAccountWhereUniqueInput
    /**
     * In case the B2BAccount found by the `where` argument doesn't exist, create a new B2BAccount with this data.
     */
    create: XOR<B2BAccountCreateInput, B2BAccountUncheckedCreateInput>
    /**
     * In case the B2BAccount was found with the provided `where` argument, update it with this data.
     */
    update: XOR<B2BAccountUpdateInput, B2BAccountUncheckedUpdateInput>
  }

  /**
   * B2BAccount delete
   */
  export type B2BAccountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the B2BAccount
     */
    select?: B2BAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the B2BAccount
     */
    omit?: B2BAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: B2BAccountInclude<ExtArgs> | null
    /**
     * Filter which B2BAccount to delete.
     */
    where: B2BAccountWhereUniqueInput
  }

  /**
   * B2BAccount deleteMany
   */
  export type B2BAccountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which B2BAccounts to delete
     */
    where?: B2BAccountWhereInput
    /**
     * Limit how many B2BAccounts to delete.
     */
    limit?: number
  }

  /**
   * B2BAccount findRaw
   */
  export type B2BAccountFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * B2BAccount aggregateRaw
   */
  export type B2BAccountAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * B2BAccount.user
   */
  export type B2BAccount$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * B2BAccount.markupRules
   */
  export type B2BAccount$markupRulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarkupRule
     */
    select?: MarkupRuleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarkupRule
     */
    omit?: MarkupRuleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarkupRuleInclude<ExtArgs> | null
    where?: MarkupRuleWhereInput
    orderBy?: MarkupRuleOrderByWithRelationInput | MarkupRuleOrderByWithRelationInput[]
    cursor?: MarkupRuleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MarkupRuleScalarFieldEnum | MarkupRuleScalarFieldEnum[]
  }

  /**
   * B2BAccount.bookings
   */
  export type B2BAccount$bookingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Booking
     */
    omit?: BookingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingInclude<ExtArgs> | null
    where?: BookingWhereInput
    orderBy?: BookingOrderByWithRelationInput | BookingOrderByWithRelationInput[]
    cursor?: BookingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BookingScalarFieldEnum | BookingScalarFieldEnum[]
  }

  /**
   * B2BAccount without action
   */
  export type B2BAccountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the B2BAccount
     */
    select?: B2BAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the B2BAccount
     */
    omit?: B2BAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: B2BAccountInclude<ExtArgs> | null
  }


  /**
   * Model MarkupRule
   */

  export type AggregateMarkupRule = {
    _count: MarkupRuleCountAggregateOutputType | null
    _avg: MarkupRuleAvgAggregateOutputType | null
    _sum: MarkupRuleSumAggregateOutputType | null
    _min: MarkupRuleMinAggregateOutputType | null
    _max: MarkupRuleMaxAggregateOutputType | null
  }

  export type MarkupRuleAvgAggregateOutputType = {
    percentage: number | null
  }

  export type MarkupRuleSumAggregateOutputType = {
    percentage: number | null
  }

  export type MarkupRuleMinAggregateOutputType = {
    id: string | null
    b2bAccountId: string | null
    productId: string | null
    percentage: number | null
    createdAt: Date | null
    updatedAt: Date | null
    isActive: boolean | null
  }

  export type MarkupRuleMaxAggregateOutputType = {
    id: string | null
    b2bAccountId: string | null
    productId: string | null
    percentage: number | null
    createdAt: Date | null
    updatedAt: Date | null
    isActive: boolean | null
  }

  export type MarkupRuleCountAggregateOutputType = {
    id: number
    b2bAccountId: number
    productId: number
    percentage: number
    createdAt: number
    updatedAt: number
    isActive: number
    _all: number
  }


  export type MarkupRuleAvgAggregateInputType = {
    percentage?: true
  }

  export type MarkupRuleSumAggregateInputType = {
    percentage?: true
  }

  export type MarkupRuleMinAggregateInputType = {
    id?: true
    b2bAccountId?: true
    productId?: true
    percentage?: true
    createdAt?: true
    updatedAt?: true
    isActive?: true
  }

  export type MarkupRuleMaxAggregateInputType = {
    id?: true
    b2bAccountId?: true
    productId?: true
    percentage?: true
    createdAt?: true
    updatedAt?: true
    isActive?: true
  }

  export type MarkupRuleCountAggregateInputType = {
    id?: true
    b2bAccountId?: true
    productId?: true
    percentage?: true
    createdAt?: true
    updatedAt?: true
    isActive?: true
    _all?: true
  }

  export type MarkupRuleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MarkupRule to aggregate.
     */
    where?: MarkupRuleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MarkupRules to fetch.
     */
    orderBy?: MarkupRuleOrderByWithRelationInput | MarkupRuleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MarkupRuleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MarkupRules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MarkupRules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MarkupRules
    **/
    _count?: true | MarkupRuleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MarkupRuleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MarkupRuleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MarkupRuleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MarkupRuleMaxAggregateInputType
  }

  export type GetMarkupRuleAggregateType<T extends MarkupRuleAggregateArgs> = {
        [P in keyof T & keyof AggregateMarkupRule]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMarkupRule[P]>
      : GetScalarType<T[P], AggregateMarkupRule[P]>
  }




  export type MarkupRuleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MarkupRuleWhereInput
    orderBy?: MarkupRuleOrderByWithAggregationInput | MarkupRuleOrderByWithAggregationInput[]
    by: MarkupRuleScalarFieldEnum[] | MarkupRuleScalarFieldEnum
    having?: MarkupRuleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MarkupRuleCountAggregateInputType | true
    _avg?: MarkupRuleAvgAggregateInputType
    _sum?: MarkupRuleSumAggregateInputType
    _min?: MarkupRuleMinAggregateInputType
    _max?: MarkupRuleMaxAggregateInputType
  }

  export type MarkupRuleGroupByOutputType = {
    id: string
    b2bAccountId: string | null
    productId: string | null
    percentage: number
    createdAt: Date
    updatedAt: Date
    isActive: boolean
    _count: MarkupRuleCountAggregateOutputType | null
    _avg: MarkupRuleAvgAggregateOutputType | null
    _sum: MarkupRuleSumAggregateOutputType | null
    _min: MarkupRuleMinAggregateOutputType | null
    _max: MarkupRuleMaxAggregateOutputType | null
  }

  type GetMarkupRuleGroupByPayload<T extends MarkupRuleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MarkupRuleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MarkupRuleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MarkupRuleGroupByOutputType[P]>
            : GetScalarType<T[P], MarkupRuleGroupByOutputType[P]>
        }
      >
    >


  export type MarkupRuleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    b2bAccountId?: boolean
    productId?: boolean
    percentage?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isActive?: boolean
    b2bAccount?: boolean | MarkupRule$b2bAccountArgs<ExtArgs>
    product?: boolean | MarkupRule$productArgs<ExtArgs>
  }, ExtArgs["result"]["markupRule"]>



  export type MarkupRuleSelectScalar = {
    id?: boolean
    b2bAccountId?: boolean
    productId?: boolean
    percentage?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isActive?: boolean
  }

  export type MarkupRuleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "b2bAccountId" | "productId" | "percentage" | "createdAt" | "updatedAt" | "isActive", ExtArgs["result"]["markupRule"]>
  export type MarkupRuleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    b2bAccount?: boolean | MarkupRule$b2bAccountArgs<ExtArgs>
    product?: boolean | MarkupRule$productArgs<ExtArgs>
  }

  export type $MarkupRulePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MarkupRule"
    objects: {
      b2bAccount: Prisma.$B2BAccountPayload<ExtArgs> | null
      product: Prisma.$ProductPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      b2bAccountId: string | null
      productId: string | null
      percentage: number
      createdAt: Date
      updatedAt: Date
      isActive: boolean
    }, ExtArgs["result"]["markupRule"]>
    composites: {}
  }

  type MarkupRuleGetPayload<S extends boolean | null | undefined | MarkupRuleDefaultArgs> = $Result.GetResult<Prisma.$MarkupRulePayload, S>

  type MarkupRuleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MarkupRuleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MarkupRuleCountAggregateInputType | true
    }

  export interface MarkupRuleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MarkupRule'], meta: { name: 'MarkupRule' } }
    /**
     * Find zero or one MarkupRule that matches the filter.
     * @param {MarkupRuleFindUniqueArgs} args - Arguments to find a MarkupRule
     * @example
     * // Get one MarkupRule
     * const markupRule = await prisma.markupRule.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MarkupRuleFindUniqueArgs>(args: SelectSubset<T, MarkupRuleFindUniqueArgs<ExtArgs>>): Prisma__MarkupRuleClient<$Result.GetResult<Prisma.$MarkupRulePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MarkupRule that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MarkupRuleFindUniqueOrThrowArgs} args - Arguments to find a MarkupRule
     * @example
     * // Get one MarkupRule
     * const markupRule = await prisma.markupRule.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MarkupRuleFindUniqueOrThrowArgs>(args: SelectSubset<T, MarkupRuleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MarkupRuleClient<$Result.GetResult<Prisma.$MarkupRulePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MarkupRule that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarkupRuleFindFirstArgs} args - Arguments to find a MarkupRule
     * @example
     * // Get one MarkupRule
     * const markupRule = await prisma.markupRule.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MarkupRuleFindFirstArgs>(args?: SelectSubset<T, MarkupRuleFindFirstArgs<ExtArgs>>): Prisma__MarkupRuleClient<$Result.GetResult<Prisma.$MarkupRulePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MarkupRule that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarkupRuleFindFirstOrThrowArgs} args - Arguments to find a MarkupRule
     * @example
     * // Get one MarkupRule
     * const markupRule = await prisma.markupRule.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MarkupRuleFindFirstOrThrowArgs>(args?: SelectSubset<T, MarkupRuleFindFirstOrThrowArgs<ExtArgs>>): Prisma__MarkupRuleClient<$Result.GetResult<Prisma.$MarkupRulePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MarkupRules that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarkupRuleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MarkupRules
     * const markupRules = await prisma.markupRule.findMany()
     * 
     * // Get first 10 MarkupRules
     * const markupRules = await prisma.markupRule.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const markupRuleWithIdOnly = await prisma.markupRule.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MarkupRuleFindManyArgs>(args?: SelectSubset<T, MarkupRuleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MarkupRulePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MarkupRule.
     * @param {MarkupRuleCreateArgs} args - Arguments to create a MarkupRule.
     * @example
     * // Create one MarkupRule
     * const MarkupRule = await prisma.markupRule.create({
     *   data: {
     *     // ... data to create a MarkupRule
     *   }
     * })
     * 
     */
    create<T extends MarkupRuleCreateArgs>(args: SelectSubset<T, MarkupRuleCreateArgs<ExtArgs>>): Prisma__MarkupRuleClient<$Result.GetResult<Prisma.$MarkupRulePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MarkupRules.
     * @param {MarkupRuleCreateManyArgs} args - Arguments to create many MarkupRules.
     * @example
     * // Create many MarkupRules
     * const markupRule = await prisma.markupRule.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MarkupRuleCreateManyArgs>(args?: SelectSubset<T, MarkupRuleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a MarkupRule.
     * @param {MarkupRuleDeleteArgs} args - Arguments to delete one MarkupRule.
     * @example
     * // Delete one MarkupRule
     * const MarkupRule = await prisma.markupRule.delete({
     *   where: {
     *     // ... filter to delete one MarkupRule
     *   }
     * })
     * 
     */
    delete<T extends MarkupRuleDeleteArgs>(args: SelectSubset<T, MarkupRuleDeleteArgs<ExtArgs>>): Prisma__MarkupRuleClient<$Result.GetResult<Prisma.$MarkupRulePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MarkupRule.
     * @param {MarkupRuleUpdateArgs} args - Arguments to update one MarkupRule.
     * @example
     * // Update one MarkupRule
     * const markupRule = await prisma.markupRule.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MarkupRuleUpdateArgs>(args: SelectSubset<T, MarkupRuleUpdateArgs<ExtArgs>>): Prisma__MarkupRuleClient<$Result.GetResult<Prisma.$MarkupRulePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MarkupRules.
     * @param {MarkupRuleDeleteManyArgs} args - Arguments to filter MarkupRules to delete.
     * @example
     * // Delete a few MarkupRules
     * const { count } = await prisma.markupRule.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MarkupRuleDeleteManyArgs>(args?: SelectSubset<T, MarkupRuleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MarkupRules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarkupRuleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MarkupRules
     * const markupRule = await prisma.markupRule.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MarkupRuleUpdateManyArgs>(args: SelectSubset<T, MarkupRuleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MarkupRule.
     * @param {MarkupRuleUpsertArgs} args - Arguments to update or create a MarkupRule.
     * @example
     * // Update or create a MarkupRule
     * const markupRule = await prisma.markupRule.upsert({
     *   create: {
     *     // ... data to create a MarkupRule
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MarkupRule we want to update
     *   }
     * })
     */
    upsert<T extends MarkupRuleUpsertArgs>(args: SelectSubset<T, MarkupRuleUpsertArgs<ExtArgs>>): Prisma__MarkupRuleClient<$Result.GetResult<Prisma.$MarkupRulePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MarkupRules that matches the filter.
     * @param {MarkupRuleFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const markupRule = await prisma.markupRule.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: MarkupRuleFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a MarkupRule.
     * @param {MarkupRuleAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const markupRule = await prisma.markupRule.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: MarkupRuleAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of MarkupRules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarkupRuleCountArgs} args - Arguments to filter MarkupRules to count.
     * @example
     * // Count the number of MarkupRules
     * const count = await prisma.markupRule.count({
     *   where: {
     *     // ... the filter for the MarkupRules we want to count
     *   }
     * })
    **/
    count<T extends MarkupRuleCountArgs>(
      args?: Subset<T, MarkupRuleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MarkupRuleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MarkupRule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarkupRuleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MarkupRuleAggregateArgs>(args: Subset<T, MarkupRuleAggregateArgs>): Prisma.PrismaPromise<GetMarkupRuleAggregateType<T>>

    /**
     * Group by MarkupRule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarkupRuleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MarkupRuleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MarkupRuleGroupByArgs['orderBy'] }
        : { orderBy?: MarkupRuleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MarkupRuleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMarkupRuleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MarkupRule model
   */
  readonly fields: MarkupRuleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MarkupRule.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MarkupRuleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    b2bAccount<T extends MarkupRule$b2bAccountArgs<ExtArgs> = {}>(args?: Subset<T, MarkupRule$b2bAccountArgs<ExtArgs>>): Prisma__B2BAccountClient<$Result.GetResult<Prisma.$B2BAccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    product<T extends MarkupRule$productArgs<ExtArgs> = {}>(args?: Subset<T, MarkupRule$productArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MarkupRule model
   */
  interface MarkupRuleFieldRefs {
    readonly id: FieldRef<"MarkupRule", 'String'>
    readonly b2bAccountId: FieldRef<"MarkupRule", 'String'>
    readonly productId: FieldRef<"MarkupRule", 'String'>
    readonly percentage: FieldRef<"MarkupRule", 'Float'>
    readonly createdAt: FieldRef<"MarkupRule", 'DateTime'>
    readonly updatedAt: FieldRef<"MarkupRule", 'DateTime'>
    readonly isActive: FieldRef<"MarkupRule", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * MarkupRule findUnique
   */
  export type MarkupRuleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarkupRule
     */
    select?: MarkupRuleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarkupRule
     */
    omit?: MarkupRuleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarkupRuleInclude<ExtArgs> | null
    /**
     * Filter, which MarkupRule to fetch.
     */
    where: MarkupRuleWhereUniqueInput
  }

  /**
   * MarkupRule findUniqueOrThrow
   */
  export type MarkupRuleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarkupRule
     */
    select?: MarkupRuleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarkupRule
     */
    omit?: MarkupRuleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarkupRuleInclude<ExtArgs> | null
    /**
     * Filter, which MarkupRule to fetch.
     */
    where: MarkupRuleWhereUniqueInput
  }

  /**
   * MarkupRule findFirst
   */
  export type MarkupRuleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarkupRule
     */
    select?: MarkupRuleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarkupRule
     */
    omit?: MarkupRuleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarkupRuleInclude<ExtArgs> | null
    /**
     * Filter, which MarkupRule to fetch.
     */
    where?: MarkupRuleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MarkupRules to fetch.
     */
    orderBy?: MarkupRuleOrderByWithRelationInput | MarkupRuleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MarkupRules.
     */
    cursor?: MarkupRuleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MarkupRules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MarkupRules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MarkupRules.
     */
    distinct?: MarkupRuleScalarFieldEnum | MarkupRuleScalarFieldEnum[]
  }

  /**
   * MarkupRule findFirstOrThrow
   */
  export type MarkupRuleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarkupRule
     */
    select?: MarkupRuleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarkupRule
     */
    omit?: MarkupRuleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarkupRuleInclude<ExtArgs> | null
    /**
     * Filter, which MarkupRule to fetch.
     */
    where?: MarkupRuleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MarkupRules to fetch.
     */
    orderBy?: MarkupRuleOrderByWithRelationInput | MarkupRuleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MarkupRules.
     */
    cursor?: MarkupRuleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MarkupRules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MarkupRules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MarkupRules.
     */
    distinct?: MarkupRuleScalarFieldEnum | MarkupRuleScalarFieldEnum[]
  }

  /**
   * MarkupRule findMany
   */
  export type MarkupRuleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarkupRule
     */
    select?: MarkupRuleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarkupRule
     */
    omit?: MarkupRuleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarkupRuleInclude<ExtArgs> | null
    /**
     * Filter, which MarkupRules to fetch.
     */
    where?: MarkupRuleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MarkupRules to fetch.
     */
    orderBy?: MarkupRuleOrderByWithRelationInput | MarkupRuleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MarkupRules.
     */
    cursor?: MarkupRuleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MarkupRules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MarkupRules.
     */
    skip?: number
    distinct?: MarkupRuleScalarFieldEnum | MarkupRuleScalarFieldEnum[]
  }

  /**
   * MarkupRule create
   */
  export type MarkupRuleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarkupRule
     */
    select?: MarkupRuleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarkupRule
     */
    omit?: MarkupRuleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarkupRuleInclude<ExtArgs> | null
    /**
     * The data needed to create a MarkupRule.
     */
    data: XOR<MarkupRuleCreateInput, MarkupRuleUncheckedCreateInput>
  }

  /**
   * MarkupRule createMany
   */
  export type MarkupRuleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MarkupRules.
     */
    data: MarkupRuleCreateManyInput | MarkupRuleCreateManyInput[]
  }

  /**
   * MarkupRule update
   */
  export type MarkupRuleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarkupRule
     */
    select?: MarkupRuleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarkupRule
     */
    omit?: MarkupRuleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarkupRuleInclude<ExtArgs> | null
    /**
     * The data needed to update a MarkupRule.
     */
    data: XOR<MarkupRuleUpdateInput, MarkupRuleUncheckedUpdateInput>
    /**
     * Choose, which MarkupRule to update.
     */
    where: MarkupRuleWhereUniqueInput
  }

  /**
   * MarkupRule updateMany
   */
  export type MarkupRuleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MarkupRules.
     */
    data: XOR<MarkupRuleUpdateManyMutationInput, MarkupRuleUncheckedUpdateManyInput>
    /**
     * Filter which MarkupRules to update
     */
    where?: MarkupRuleWhereInput
    /**
     * Limit how many MarkupRules to update.
     */
    limit?: number
  }

  /**
   * MarkupRule upsert
   */
  export type MarkupRuleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarkupRule
     */
    select?: MarkupRuleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarkupRule
     */
    omit?: MarkupRuleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarkupRuleInclude<ExtArgs> | null
    /**
     * The filter to search for the MarkupRule to update in case it exists.
     */
    where: MarkupRuleWhereUniqueInput
    /**
     * In case the MarkupRule found by the `where` argument doesn't exist, create a new MarkupRule with this data.
     */
    create: XOR<MarkupRuleCreateInput, MarkupRuleUncheckedCreateInput>
    /**
     * In case the MarkupRule was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MarkupRuleUpdateInput, MarkupRuleUncheckedUpdateInput>
  }

  /**
   * MarkupRule delete
   */
  export type MarkupRuleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarkupRule
     */
    select?: MarkupRuleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarkupRule
     */
    omit?: MarkupRuleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarkupRuleInclude<ExtArgs> | null
    /**
     * Filter which MarkupRule to delete.
     */
    where: MarkupRuleWhereUniqueInput
  }

  /**
   * MarkupRule deleteMany
   */
  export type MarkupRuleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MarkupRules to delete
     */
    where?: MarkupRuleWhereInput
    /**
     * Limit how many MarkupRules to delete.
     */
    limit?: number
  }

  /**
   * MarkupRule findRaw
   */
  export type MarkupRuleFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * MarkupRule aggregateRaw
   */
  export type MarkupRuleAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * MarkupRule.b2bAccount
   */
  export type MarkupRule$b2bAccountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the B2BAccount
     */
    select?: B2BAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the B2BAccount
     */
    omit?: B2BAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: B2BAccountInclude<ExtArgs> | null
    where?: B2BAccountWhereInput
  }

  /**
   * MarkupRule.product
   */
  export type MarkupRule$productArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    where?: ProductWhereInput
  }

  /**
   * MarkupRule without action
   */
  export type MarkupRuleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarkupRule
     */
    select?: MarkupRuleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarkupRule
     */
    omit?: MarkupRuleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MarkupRuleInclude<ExtArgs> | null
  }


  /**
   * Model Booking
   */

  export type AggregateBooking = {
    _count: BookingCountAggregateOutputType | null
    _avg: BookingAvgAggregateOutputType | null
    _sum: BookingSumAggregateOutputType | null
    _min: BookingMinAggregateOutputType | null
    _max: BookingMaxAggregateOutputType | null
  }

  export type BookingAvgAggregateOutputType = {
    totalNet: number | null
    totalMarkup: number | null
    totalGross: number | null
    passengerCount: number | null
  }

  export type BookingSumAggregateOutputType = {
    totalNet: number | null
    totalMarkup: number | null
    totalGross: number | null
    passengerCount: number | null
  }

  export type BookingMinAggregateOutputType = {
    id: string | null
    reference: string | null
    userId: string | null
    b2bAccountId: string | null
    status: $Enums.BookingStatus | null
    paymentMethod: $Enums.PaymentMethod | null
    paymentStatus: $Enums.PaymentStatus | null
    paymentIntentId: string | null
    paymentGateway: string | null
    gatewayReference: string | null
    currency: $Enums.Currency | null
    totalNet: number | null
    totalMarkup: number | null
    totalGross: number | null
    supplierRef: string | null
    voucherUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
    passengerCount: number | null
    externalBookingId: string | null
    apiCalledAt: Date | null
    syncedAt: Date | null
  }

  export type BookingMaxAggregateOutputType = {
    id: string | null
    reference: string | null
    userId: string | null
    b2bAccountId: string | null
    status: $Enums.BookingStatus | null
    paymentMethod: $Enums.PaymentMethod | null
    paymentStatus: $Enums.PaymentStatus | null
    paymentIntentId: string | null
    paymentGateway: string | null
    gatewayReference: string | null
    currency: $Enums.Currency | null
    totalNet: number | null
    totalMarkup: number | null
    totalGross: number | null
    supplierRef: string | null
    voucherUrl: string | null
    createdAt: Date | null
    updatedAt: Date | null
    passengerCount: number | null
    externalBookingId: string | null
    apiCalledAt: Date | null
    syncedAt: Date | null
  }

  export type BookingCountAggregateOutputType = {
    id: number
    reference: number
    userId: number
    b2bAccountId: number
    status: number
    paymentMethod: number
    paymentStatus: number
    paymentIntentId: number
    paymentGateway: number
    gatewayReference: number
    currency: number
    totalNet: number
    totalMarkup: number
    totalGross: number
    supplierRef: number
    voucherUrl: number
    createdAt: number
    updatedAt: number
    passengerCount: number
    leadPassenger: number
    externalBookingId: number
    apiResponse: number
    apiCalledAt: number
    syncedAt: number
    _all: number
  }


  export type BookingAvgAggregateInputType = {
    totalNet?: true
    totalMarkup?: true
    totalGross?: true
    passengerCount?: true
  }

  export type BookingSumAggregateInputType = {
    totalNet?: true
    totalMarkup?: true
    totalGross?: true
    passengerCount?: true
  }

  export type BookingMinAggregateInputType = {
    id?: true
    reference?: true
    userId?: true
    b2bAccountId?: true
    status?: true
    paymentMethod?: true
    paymentStatus?: true
    paymentIntentId?: true
    paymentGateway?: true
    gatewayReference?: true
    currency?: true
    totalNet?: true
    totalMarkup?: true
    totalGross?: true
    supplierRef?: true
    voucherUrl?: true
    createdAt?: true
    updatedAt?: true
    passengerCount?: true
    externalBookingId?: true
    apiCalledAt?: true
    syncedAt?: true
  }

  export type BookingMaxAggregateInputType = {
    id?: true
    reference?: true
    userId?: true
    b2bAccountId?: true
    status?: true
    paymentMethod?: true
    paymentStatus?: true
    paymentIntentId?: true
    paymentGateway?: true
    gatewayReference?: true
    currency?: true
    totalNet?: true
    totalMarkup?: true
    totalGross?: true
    supplierRef?: true
    voucherUrl?: true
    createdAt?: true
    updatedAt?: true
    passengerCount?: true
    externalBookingId?: true
    apiCalledAt?: true
    syncedAt?: true
  }

  export type BookingCountAggregateInputType = {
    id?: true
    reference?: true
    userId?: true
    b2bAccountId?: true
    status?: true
    paymentMethod?: true
    paymentStatus?: true
    paymentIntentId?: true
    paymentGateway?: true
    gatewayReference?: true
    currency?: true
    totalNet?: true
    totalMarkup?: true
    totalGross?: true
    supplierRef?: true
    voucherUrl?: true
    createdAt?: true
    updatedAt?: true
    passengerCount?: true
    leadPassenger?: true
    externalBookingId?: true
    apiResponse?: true
    apiCalledAt?: true
    syncedAt?: true
    _all?: true
  }

  export type BookingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Booking to aggregate.
     */
    where?: BookingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bookings to fetch.
     */
    orderBy?: BookingOrderByWithRelationInput | BookingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BookingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bookings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bookings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Bookings
    **/
    _count?: true | BookingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BookingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BookingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BookingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BookingMaxAggregateInputType
  }

  export type GetBookingAggregateType<T extends BookingAggregateArgs> = {
        [P in keyof T & keyof AggregateBooking]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBooking[P]>
      : GetScalarType<T[P], AggregateBooking[P]>
  }




  export type BookingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookingWhereInput
    orderBy?: BookingOrderByWithAggregationInput | BookingOrderByWithAggregationInput[]
    by: BookingScalarFieldEnum[] | BookingScalarFieldEnum
    having?: BookingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BookingCountAggregateInputType | true
    _avg?: BookingAvgAggregateInputType
    _sum?: BookingSumAggregateInputType
    _min?: BookingMinAggregateInputType
    _max?: BookingMaxAggregateInputType
  }

  export type BookingGroupByOutputType = {
    id: string
    reference: string
    userId: string | null
    b2bAccountId: string | null
    status: $Enums.BookingStatus
    paymentMethod: $Enums.PaymentMethod | null
    paymentStatus: $Enums.PaymentStatus
    paymentIntentId: string | null
    paymentGateway: string | null
    gatewayReference: string | null
    currency: $Enums.Currency
    totalNet: number
    totalMarkup: number
    totalGross: number
    supplierRef: string | null
    voucherUrl: string | null
    createdAt: Date
    updatedAt: Date
    passengerCount: number
    leadPassenger: JsonValue | null
    externalBookingId: string | null
    apiResponse: JsonValue | null
    apiCalledAt: Date | null
    syncedAt: Date | null
    _count: BookingCountAggregateOutputType | null
    _avg: BookingAvgAggregateOutputType | null
    _sum: BookingSumAggregateOutputType | null
    _min: BookingMinAggregateOutputType | null
    _max: BookingMaxAggregateOutputType | null
  }

  type GetBookingGroupByPayload<T extends BookingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BookingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BookingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BookingGroupByOutputType[P]>
            : GetScalarType<T[P], BookingGroupByOutputType[P]>
        }
      >
    >


  export type BookingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    reference?: boolean
    userId?: boolean
    b2bAccountId?: boolean
    status?: boolean
    paymentMethod?: boolean
    paymentStatus?: boolean
    paymentIntentId?: boolean
    paymentGateway?: boolean
    gatewayReference?: boolean
    currency?: boolean
    totalNet?: boolean
    totalMarkup?: boolean
    totalGross?: boolean
    supplierRef?: boolean
    voucherUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    passengerCount?: boolean
    leadPassenger?: boolean
    externalBookingId?: boolean
    apiResponse?: boolean
    apiCalledAt?: boolean
    syncedAt?: boolean
    user?: boolean | Booking$userArgs<ExtArgs>
    b2bAccount?: boolean | Booking$b2bAccountArgs<ExtArgs>
    items?: boolean | Booking$itemsArgs<ExtArgs>
    paymentTransactions?: boolean | Booking$paymentTransactionsArgs<ExtArgs>
    billingRecords?: boolean | Booking$billingRecordsArgs<ExtArgs>
    complaints?: boolean | Booking$complaintsArgs<ExtArgs>
    _count?: boolean | BookingCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["booking"]>



  export type BookingSelectScalar = {
    id?: boolean
    reference?: boolean
    userId?: boolean
    b2bAccountId?: boolean
    status?: boolean
    paymentMethod?: boolean
    paymentStatus?: boolean
    paymentIntentId?: boolean
    paymentGateway?: boolean
    gatewayReference?: boolean
    currency?: boolean
    totalNet?: boolean
    totalMarkup?: boolean
    totalGross?: boolean
    supplierRef?: boolean
    voucherUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    passengerCount?: boolean
    leadPassenger?: boolean
    externalBookingId?: boolean
    apiResponse?: boolean
    apiCalledAt?: boolean
    syncedAt?: boolean
  }

  export type BookingOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "reference" | "userId" | "b2bAccountId" | "status" | "paymentMethod" | "paymentStatus" | "paymentIntentId" | "paymentGateway" | "gatewayReference" | "currency" | "totalNet" | "totalMarkup" | "totalGross" | "supplierRef" | "voucherUrl" | "createdAt" | "updatedAt" | "passengerCount" | "leadPassenger" | "externalBookingId" | "apiResponse" | "apiCalledAt" | "syncedAt", ExtArgs["result"]["booking"]>
  export type BookingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Booking$userArgs<ExtArgs>
    b2bAccount?: boolean | Booking$b2bAccountArgs<ExtArgs>
    items?: boolean | Booking$itemsArgs<ExtArgs>
    paymentTransactions?: boolean | Booking$paymentTransactionsArgs<ExtArgs>
    billingRecords?: boolean | Booking$billingRecordsArgs<ExtArgs>
    complaints?: boolean | Booking$complaintsArgs<ExtArgs>
    _count?: boolean | BookingCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $BookingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Booking"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
      b2bAccount: Prisma.$B2BAccountPayload<ExtArgs> | null
      items: Prisma.$BookingItemPayload<ExtArgs>[]
      paymentTransactions: Prisma.$PaymentTransactionPayload<ExtArgs>[]
      billingRecords: Prisma.$BillingRecordPayload<ExtArgs>[]
      complaints: Prisma.$ComplaintPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      reference: string
      userId: string | null
      b2bAccountId: string | null
      status: $Enums.BookingStatus
      paymentMethod: $Enums.PaymentMethod | null
      paymentStatus: $Enums.PaymentStatus
      paymentIntentId: string | null
      paymentGateway: string | null
      gatewayReference: string | null
      currency: $Enums.Currency
      totalNet: number
      totalMarkup: number
      totalGross: number
      supplierRef: string | null
      voucherUrl: string | null
      createdAt: Date
      updatedAt: Date
      passengerCount: number
      leadPassenger: Prisma.JsonValue | null
      externalBookingId: string | null
      apiResponse: Prisma.JsonValue | null
      apiCalledAt: Date | null
      syncedAt: Date | null
    }, ExtArgs["result"]["booking"]>
    composites: {}
  }

  type BookingGetPayload<S extends boolean | null | undefined | BookingDefaultArgs> = $Result.GetResult<Prisma.$BookingPayload, S>

  type BookingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BookingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BookingCountAggregateInputType | true
    }

  export interface BookingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Booking'], meta: { name: 'Booking' } }
    /**
     * Find zero or one Booking that matches the filter.
     * @param {BookingFindUniqueArgs} args - Arguments to find a Booking
     * @example
     * // Get one Booking
     * const booking = await prisma.booking.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BookingFindUniqueArgs>(args: SelectSubset<T, BookingFindUniqueArgs<ExtArgs>>): Prisma__BookingClient<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Booking that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BookingFindUniqueOrThrowArgs} args - Arguments to find a Booking
     * @example
     * // Get one Booking
     * const booking = await prisma.booking.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BookingFindUniqueOrThrowArgs>(args: SelectSubset<T, BookingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BookingClient<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Booking that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingFindFirstArgs} args - Arguments to find a Booking
     * @example
     * // Get one Booking
     * const booking = await prisma.booking.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BookingFindFirstArgs>(args?: SelectSubset<T, BookingFindFirstArgs<ExtArgs>>): Prisma__BookingClient<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Booking that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingFindFirstOrThrowArgs} args - Arguments to find a Booking
     * @example
     * // Get one Booking
     * const booking = await prisma.booking.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BookingFindFirstOrThrowArgs>(args?: SelectSubset<T, BookingFindFirstOrThrowArgs<ExtArgs>>): Prisma__BookingClient<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Bookings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Bookings
     * const bookings = await prisma.booking.findMany()
     * 
     * // Get first 10 Bookings
     * const bookings = await prisma.booking.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bookingWithIdOnly = await prisma.booking.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BookingFindManyArgs>(args?: SelectSubset<T, BookingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Booking.
     * @param {BookingCreateArgs} args - Arguments to create a Booking.
     * @example
     * // Create one Booking
     * const Booking = await prisma.booking.create({
     *   data: {
     *     // ... data to create a Booking
     *   }
     * })
     * 
     */
    create<T extends BookingCreateArgs>(args: SelectSubset<T, BookingCreateArgs<ExtArgs>>): Prisma__BookingClient<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Bookings.
     * @param {BookingCreateManyArgs} args - Arguments to create many Bookings.
     * @example
     * // Create many Bookings
     * const booking = await prisma.booking.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BookingCreateManyArgs>(args?: SelectSubset<T, BookingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Booking.
     * @param {BookingDeleteArgs} args - Arguments to delete one Booking.
     * @example
     * // Delete one Booking
     * const Booking = await prisma.booking.delete({
     *   where: {
     *     // ... filter to delete one Booking
     *   }
     * })
     * 
     */
    delete<T extends BookingDeleteArgs>(args: SelectSubset<T, BookingDeleteArgs<ExtArgs>>): Prisma__BookingClient<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Booking.
     * @param {BookingUpdateArgs} args - Arguments to update one Booking.
     * @example
     * // Update one Booking
     * const booking = await prisma.booking.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BookingUpdateArgs>(args: SelectSubset<T, BookingUpdateArgs<ExtArgs>>): Prisma__BookingClient<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Bookings.
     * @param {BookingDeleteManyArgs} args - Arguments to filter Bookings to delete.
     * @example
     * // Delete a few Bookings
     * const { count } = await prisma.booking.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BookingDeleteManyArgs>(args?: SelectSubset<T, BookingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Bookings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Bookings
     * const booking = await prisma.booking.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BookingUpdateManyArgs>(args: SelectSubset<T, BookingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Booking.
     * @param {BookingUpsertArgs} args - Arguments to update or create a Booking.
     * @example
     * // Update or create a Booking
     * const booking = await prisma.booking.upsert({
     *   create: {
     *     // ... data to create a Booking
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Booking we want to update
     *   }
     * })
     */
    upsert<T extends BookingUpsertArgs>(args: SelectSubset<T, BookingUpsertArgs<ExtArgs>>): Prisma__BookingClient<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Bookings that matches the filter.
     * @param {BookingFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const booking = await prisma.booking.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: BookingFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Booking.
     * @param {BookingAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const booking = await prisma.booking.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: BookingAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Bookings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingCountArgs} args - Arguments to filter Bookings to count.
     * @example
     * // Count the number of Bookings
     * const count = await prisma.booking.count({
     *   where: {
     *     // ... the filter for the Bookings we want to count
     *   }
     * })
    **/
    count<T extends BookingCountArgs>(
      args?: Subset<T, BookingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BookingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Booking.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BookingAggregateArgs>(args: Subset<T, BookingAggregateArgs>): Prisma.PrismaPromise<GetBookingAggregateType<T>>

    /**
     * Group by Booking.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BookingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BookingGroupByArgs['orderBy'] }
        : { orderBy?: BookingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BookingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBookingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Booking model
   */
  readonly fields: BookingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Booking.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BookingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends Booking$userArgs<ExtArgs> = {}>(args?: Subset<T, Booking$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    b2bAccount<T extends Booking$b2bAccountArgs<ExtArgs> = {}>(args?: Subset<T, Booking$b2bAccountArgs<ExtArgs>>): Prisma__B2BAccountClient<$Result.GetResult<Prisma.$B2BAccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    items<T extends Booking$itemsArgs<ExtArgs> = {}>(args?: Subset<T, Booking$itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookingItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    paymentTransactions<T extends Booking$paymentTransactionsArgs<ExtArgs> = {}>(args?: Subset<T, Booking$paymentTransactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentTransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    billingRecords<T extends Booking$billingRecordsArgs<ExtArgs> = {}>(args?: Subset<T, Booking$billingRecordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BillingRecordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    complaints<T extends Booking$complaintsArgs<ExtArgs> = {}>(args?: Subset<T, Booking$complaintsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComplaintPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Booking model
   */
  interface BookingFieldRefs {
    readonly id: FieldRef<"Booking", 'String'>
    readonly reference: FieldRef<"Booking", 'String'>
    readonly userId: FieldRef<"Booking", 'String'>
    readonly b2bAccountId: FieldRef<"Booking", 'String'>
    readonly status: FieldRef<"Booking", 'BookingStatus'>
    readonly paymentMethod: FieldRef<"Booking", 'PaymentMethod'>
    readonly paymentStatus: FieldRef<"Booking", 'PaymentStatus'>
    readonly paymentIntentId: FieldRef<"Booking", 'String'>
    readonly paymentGateway: FieldRef<"Booking", 'String'>
    readonly gatewayReference: FieldRef<"Booking", 'String'>
    readonly currency: FieldRef<"Booking", 'Currency'>
    readonly totalNet: FieldRef<"Booking", 'Float'>
    readonly totalMarkup: FieldRef<"Booking", 'Float'>
    readonly totalGross: FieldRef<"Booking", 'Float'>
    readonly supplierRef: FieldRef<"Booking", 'String'>
    readonly voucherUrl: FieldRef<"Booking", 'String'>
    readonly createdAt: FieldRef<"Booking", 'DateTime'>
    readonly updatedAt: FieldRef<"Booking", 'DateTime'>
    readonly passengerCount: FieldRef<"Booking", 'Int'>
    readonly leadPassenger: FieldRef<"Booking", 'Json'>
    readonly externalBookingId: FieldRef<"Booking", 'String'>
    readonly apiResponse: FieldRef<"Booking", 'Json'>
    readonly apiCalledAt: FieldRef<"Booking", 'DateTime'>
    readonly syncedAt: FieldRef<"Booking", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Booking findUnique
   */
  export type BookingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Booking
     */
    omit?: BookingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingInclude<ExtArgs> | null
    /**
     * Filter, which Booking to fetch.
     */
    where: BookingWhereUniqueInput
  }

  /**
   * Booking findUniqueOrThrow
   */
  export type BookingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Booking
     */
    omit?: BookingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingInclude<ExtArgs> | null
    /**
     * Filter, which Booking to fetch.
     */
    where: BookingWhereUniqueInput
  }

  /**
   * Booking findFirst
   */
  export type BookingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Booking
     */
    omit?: BookingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingInclude<ExtArgs> | null
    /**
     * Filter, which Booking to fetch.
     */
    where?: BookingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bookings to fetch.
     */
    orderBy?: BookingOrderByWithRelationInput | BookingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Bookings.
     */
    cursor?: BookingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bookings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bookings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Bookings.
     */
    distinct?: BookingScalarFieldEnum | BookingScalarFieldEnum[]
  }

  /**
   * Booking findFirstOrThrow
   */
  export type BookingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Booking
     */
    omit?: BookingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingInclude<ExtArgs> | null
    /**
     * Filter, which Booking to fetch.
     */
    where?: BookingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bookings to fetch.
     */
    orderBy?: BookingOrderByWithRelationInput | BookingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Bookings.
     */
    cursor?: BookingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bookings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bookings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Bookings.
     */
    distinct?: BookingScalarFieldEnum | BookingScalarFieldEnum[]
  }

  /**
   * Booking findMany
   */
  export type BookingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Booking
     */
    omit?: BookingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingInclude<ExtArgs> | null
    /**
     * Filter, which Bookings to fetch.
     */
    where?: BookingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bookings to fetch.
     */
    orderBy?: BookingOrderByWithRelationInput | BookingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Bookings.
     */
    cursor?: BookingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bookings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bookings.
     */
    skip?: number
    distinct?: BookingScalarFieldEnum | BookingScalarFieldEnum[]
  }

  /**
   * Booking create
   */
  export type BookingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Booking
     */
    omit?: BookingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingInclude<ExtArgs> | null
    /**
     * The data needed to create a Booking.
     */
    data: XOR<BookingCreateInput, BookingUncheckedCreateInput>
  }

  /**
   * Booking createMany
   */
  export type BookingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Bookings.
     */
    data: BookingCreateManyInput | BookingCreateManyInput[]
  }

  /**
   * Booking update
   */
  export type BookingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Booking
     */
    omit?: BookingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingInclude<ExtArgs> | null
    /**
     * The data needed to update a Booking.
     */
    data: XOR<BookingUpdateInput, BookingUncheckedUpdateInput>
    /**
     * Choose, which Booking to update.
     */
    where: BookingWhereUniqueInput
  }

  /**
   * Booking updateMany
   */
  export type BookingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Bookings.
     */
    data: XOR<BookingUpdateManyMutationInput, BookingUncheckedUpdateManyInput>
    /**
     * Filter which Bookings to update
     */
    where?: BookingWhereInput
    /**
     * Limit how many Bookings to update.
     */
    limit?: number
  }

  /**
   * Booking upsert
   */
  export type BookingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Booking
     */
    omit?: BookingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingInclude<ExtArgs> | null
    /**
     * The filter to search for the Booking to update in case it exists.
     */
    where: BookingWhereUniqueInput
    /**
     * In case the Booking found by the `where` argument doesn't exist, create a new Booking with this data.
     */
    create: XOR<BookingCreateInput, BookingUncheckedCreateInput>
    /**
     * In case the Booking was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BookingUpdateInput, BookingUncheckedUpdateInput>
  }

  /**
   * Booking delete
   */
  export type BookingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Booking
     */
    omit?: BookingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingInclude<ExtArgs> | null
    /**
     * Filter which Booking to delete.
     */
    where: BookingWhereUniqueInput
  }

  /**
   * Booking deleteMany
   */
  export type BookingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Bookings to delete
     */
    where?: BookingWhereInput
    /**
     * Limit how many Bookings to delete.
     */
    limit?: number
  }

  /**
   * Booking findRaw
   */
  export type BookingFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Booking aggregateRaw
   */
  export type BookingAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Booking.user
   */
  export type Booking$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Booking.b2bAccount
   */
  export type Booking$b2bAccountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the B2BAccount
     */
    select?: B2BAccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the B2BAccount
     */
    omit?: B2BAccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: B2BAccountInclude<ExtArgs> | null
    where?: B2BAccountWhereInput
  }

  /**
   * Booking.items
   */
  export type Booking$itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookingItem
     */
    select?: BookingItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookingItem
     */
    omit?: BookingItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingItemInclude<ExtArgs> | null
    where?: BookingItemWhereInput
    orderBy?: BookingItemOrderByWithRelationInput | BookingItemOrderByWithRelationInput[]
    cursor?: BookingItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BookingItemScalarFieldEnum | BookingItemScalarFieldEnum[]
  }

  /**
   * Booking.paymentTransactions
   */
  export type Booking$paymentTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentTransaction
     */
    select?: PaymentTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentTransaction
     */
    omit?: PaymentTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentTransactionInclude<ExtArgs> | null
    where?: PaymentTransactionWhereInput
    orderBy?: PaymentTransactionOrderByWithRelationInput | PaymentTransactionOrderByWithRelationInput[]
    cursor?: PaymentTransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaymentTransactionScalarFieldEnum | PaymentTransactionScalarFieldEnum[]
  }

  /**
   * Booking.billingRecords
   */
  export type Booking$billingRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingRecord
     */
    select?: BillingRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BillingRecord
     */
    omit?: BillingRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingRecordInclude<ExtArgs> | null
    where?: BillingRecordWhereInput
    orderBy?: BillingRecordOrderByWithRelationInput | BillingRecordOrderByWithRelationInput[]
    cursor?: BillingRecordWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BillingRecordScalarFieldEnum | BillingRecordScalarFieldEnum[]
  }

  /**
   * Booking.complaints
   */
  export type Booking$complaintsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Complaint
     */
    select?: ComplaintSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Complaint
     */
    omit?: ComplaintOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintInclude<ExtArgs> | null
    where?: ComplaintWhereInput
    orderBy?: ComplaintOrderByWithRelationInput | ComplaintOrderByWithRelationInput[]
    cursor?: ComplaintWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ComplaintScalarFieldEnum | ComplaintScalarFieldEnum[]
  }

  /**
   * Booking without action
   */
  export type BookingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Booking
     */
    omit?: BookingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingInclude<ExtArgs> | null
  }


  /**
   * Model BookingItem
   */

  export type AggregateBookingItem = {
    _count: BookingItemCountAggregateOutputType | null
    _avg: BookingItemAvgAggregateOutputType | null
    _sum: BookingItemSumAggregateOutputType | null
    _min: BookingItemMinAggregateOutputType | null
    _max: BookingItemMaxAggregateOutputType | null
  }

  export type BookingItemAvgAggregateOutputType = {
    quantity: number | null
    unitNet: number | null
    unitGross: number | null
    subtotalNet: number | null
    subtotalGross: number | null
  }

  export type BookingItemSumAggregateOutputType = {
    quantity: number | null
    unitNet: number | null
    unitGross: number | null
    subtotalNet: number | null
    subtotalGross: number | null
  }

  export type BookingItemMinAggregateOutputType = {
    id: string | null
    bookingId: string | null
    productId: string | null
    name: string | null
    date: Date | null
    quantity: number | null
    unitNet: number | null
    unitGross: number | null
    subtotalNet: number | null
    subtotalGross: number | null
  }

  export type BookingItemMaxAggregateOutputType = {
    id: string | null
    bookingId: string | null
    productId: string | null
    name: string | null
    date: Date | null
    quantity: number | null
    unitNet: number | null
    unitGross: number | null
    subtotalNet: number | null
    subtotalGross: number | null
  }

  export type BookingItemCountAggregateOutputType = {
    id: number
    bookingId: number
    productId: number
    name: number
    date: number
    quantity: number
    unitNet: number
    unitGross: number
    subtotalNet: number
    subtotalGross: number
    _all: number
  }


  export type BookingItemAvgAggregateInputType = {
    quantity?: true
    unitNet?: true
    unitGross?: true
    subtotalNet?: true
    subtotalGross?: true
  }

  export type BookingItemSumAggregateInputType = {
    quantity?: true
    unitNet?: true
    unitGross?: true
    subtotalNet?: true
    subtotalGross?: true
  }

  export type BookingItemMinAggregateInputType = {
    id?: true
    bookingId?: true
    productId?: true
    name?: true
    date?: true
    quantity?: true
    unitNet?: true
    unitGross?: true
    subtotalNet?: true
    subtotalGross?: true
  }

  export type BookingItemMaxAggregateInputType = {
    id?: true
    bookingId?: true
    productId?: true
    name?: true
    date?: true
    quantity?: true
    unitNet?: true
    unitGross?: true
    subtotalNet?: true
    subtotalGross?: true
  }

  export type BookingItemCountAggregateInputType = {
    id?: true
    bookingId?: true
    productId?: true
    name?: true
    date?: true
    quantity?: true
    unitNet?: true
    unitGross?: true
    subtotalNet?: true
    subtotalGross?: true
    _all?: true
  }

  export type BookingItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BookingItem to aggregate.
     */
    where?: BookingItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookingItems to fetch.
     */
    orderBy?: BookingItemOrderByWithRelationInput | BookingItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BookingItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookingItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookingItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BookingItems
    **/
    _count?: true | BookingItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BookingItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BookingItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BookingItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BookingItemMaxAggregateInputType
  }

  export type GetBookingItemAggregateType<T extends BookingItemAggregateArgs> = {
        [P in keyof T & keyof AggregateBookingItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBookingItem[P]>
      : GetScalarType<T[P], AggregateBookingItem[P]>
  }




  export type BookingItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookingItemWhereInput
    orderBy?: BookingItemOrderByWithAggregationInput | BookingItemOrderByWithAggregationInput[]
    by: BookingItemScalarFieldEnum[] | BookingItemScalarFieldEnum
    having?: BookingItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BookingItemCountAggregateInputType | true
    _avg?: BookingItemAvgAggregateInputType
    _sum?: BookingItemSumAggregateInputType
    _min?: BookingItemMinAggregateInputType
    _max?: BookingItemMaxAggregateInputType
  }

  export type BookingItemGroupByOutputType = {
    id: string
    bookingId: string
    productId: string | null
    name: string
    date: Date | null
    quantity: number
    unitNet: number
    unitGross: number
    subtotalNet: number
    subtotalGross: number
    _count: BookingItemCountAggregateOutputType | null
    _avg: BookingItemAvgAggregateOutputType | null
    _sum: BookingItemSumAggregateOutputType | null
    _min: BookingItemMinAggregateOutputType | null
    _max: BookingItemMaxAggregateOutputType | null
  }

  type GetBookingItemGroupByPayload<T extends BookingItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BookingItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BookingItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BookingItemGroupByOutputType[P]>
            : GetScalarType<T[P], BookingItemGroupByOutputType[P]>
        }
      >
    >


  export type BookingItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    bookingId?: boolean
    productId?: boolean
    name?: boolean
    date?: boolean
    quantity?: boolean
    unitNet?: boolean
    unitGross?: boolean
    subtotalNet?: boolean
    subtotalGross?: boolean
    booking?: boolean | BookingDefaultArgs<ExtArgs>
    product?: boolean | BookingItem$productArgs<ExtArgs>
  }, ExtArgs["result"]["bookingItem"]>



  export type BookingItemSelectScalar = {
    id?: boolean
    bookingId?: boolean
    productId?: boolean
    name?: boolean
    date?: boolean
    quantity?: boolean
    unitNet?: boolean
    unitGross?: boolean
    subtotalNet?: boolean
    subtotalGross?: boolean
  }

  export type BookingItemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "bookingId" | "productId" | "name" | "date" | "quantity" | "unitNet" | "unitGross" | "subtotalNet" | "subtotalGross", ExtArgs["result"]["bookingItem"]>
  export type BookingItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    booking?: boolean | BookingDefaultArgs<ExtArgs>
    product?: boolean | BookingItem$productArgs<ExtArgs>
  }

  export type $BookingItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BookingItem"
    objects: {
      booking: Prisma.$BookingPayload<ExtArgs>
      product: Prisma.$ProductPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      bookingId: string
      productId: string | null
      name: string
      date: Date | null
      quantity: number
      unitNet: number
      unitGross: number
      subtotalNet: number
      subtotalGross: number
    }, ExtArgs["result"]["bookingItem"]>
    composites: {}
  }

  type BookingItemGetPayload<S extends boolean | null | undefined | BookingItemDefaultArgs> = $Result.GetResult<Prisma.$BookingItemPayload, S>

  type BookingItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BookingItemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BookingItemCountAggregateInputType | true
    }

  export interface BookingItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BookingItem'], meta: { name: 'BookingItem' } }
    /**
     * Find zero or one BookingItem that matches the filter.
     * @param {BookingItemFindUniqueArgs} args - Arguments to find a BookingItem
     * @example
     * // Get one BookingItem
     * const bookingItem = await prisma.bookingItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BookingItemFindUniqueArgs>(args: SelectSubset<T, BookingItemFindUniqueArgs<ExtArgs>>): Prisma__BookingItemClient<$Result.GetResult<Prisma.$BookingItemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one BookingItem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BookingItemFindUniqueOrThrowArgs} args - Arguments to find a BookingItem
     * @example
     * // Get one BookingItem
     * const bookingItem = await prisma.bookingItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BookingItemFindUniqueOrThrowArgs>(args: SelectSubset<T, BookingItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BookingItemClient<$Result.GetResult<Prisma.$BookingItemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BookingItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingItemFindFirstArgs} args - Arguments to find a BookingItem
     * @example
     * // Get one BookingItem
     * const bookingItem = await prisma.bookingItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BookingItemFindFirstArgs>(args?: SelectSubset<T, BookingItemFindFirstArgs<ExtArgs>>): Prisma__BookingItemClient<$Result.GetResult<Prisma.$BookingItemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BookingItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingItemFindFirstOrThrowArgs} args - Arguments to find a BookingItem
     * @example
     * // Get one BookingItem
     * const bookingItem = await prisma.bookingItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BookingItemFindFirstOrThrowArgs>(args?: SelectSubset<T, BookingItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__BookingItemClient<$Result.GetResult<Prisma.$BookingItemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more BookingItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BookingItems
     * const bookingItems = await prisma.bookingItem.findMany()
     * 
     * // Get first 10 BookingItems
     * const bookingItems = await prisma.bookingItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bookingItemWithIdOnly = await prisma.bookingItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BookingItemFindManyArgs>(args?: SelectSubset<T, BookingItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookingItemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a BookingItem.
     * @param {BookingItemCreateArgs} args - Arguments to create a BookingItem.
     * @example
     * // Create one BookingItem
     * const BookingItem = await prisma.bookingItem.create({
     *   data: {
     *     // ... data to create a BookingItem
     *   }
     * })
     * 
     */
    create<T extends BookingItemCreateArgs>(args: SelectSubset<T, BookingItemCreateArgs<ExtArgs>>): Prisma__BookingItemClient<$Result.GetResult<Prisma.$BookingItemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many BookingItems.
     * @param {BookingItemCreateManyArgs} args - Arguments to create many BookingItems.
     * @example
     * // Create many BookingItems
     * const bookingItem = await prisma.bookingItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BookingItemCreateManyArgs>(args?: SelectSubset<T, BookingItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a BookingItem.
     * @param {BookingItemDeleteArgs} args - Arguments to delete one BookingItem.
     * @example
     * // Delete one BookingItem
     * const BookingItem = await prisma.bookingItem.delete({
     *   where: {
     *     // ... filter to delete one BookingItem
     *   }
     * })
     * 
     */
    delete<T extends BookingItemDeleteArgs>(args: SelectSubset<T, BookingItemDeleteArgs<ExtArgs>>): Prisma__BookingItemClient<$Result.GetResult<Prisma.$BookingItemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one BookingItem.
     * @param {BookingItemUpdateArgs} args - Arguments to update one BookingItem.
     * @example
     * // Update one BookingItem
     * const bookingItem = await prisma.bookingItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BookingItemUpdateArgs>(args: SelectSubset<T, BookingItemUpdateArgs<ExtArgs>>): Prisma__BookingItemClient<$Result.GetResult<Prisma.$BookingItemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more BookingItems.
     * @param {BookingItemDeleteManyArgs} args - Arguments to filter BookingItems to delete.
     * @example
     * // Delete a few BookingItems
     * const { count } = await prisma.bookingItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BookingItemDeleteManyArgs>(args?: SelectSubset<T, BookingItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BookingItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BookingItems
     * const bookingItem = await prisma.bookingItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BookingItemUpdateManyArgs>(args: SelectSubset<T, BookingItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BookingItem.
     * @param {BookingItemUpsertArgs} args - Arguments to update or create a BookingItem.
     * @example
     * // Update or create a BookingItem
     * const bookingItem = await prisma.bookingItem.upsert({
     *   create: {
     *     // ... data to create a BookingItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BookingItem we want to update
     *   }
     * })
     */
    upsert<T extends BookingItemUpsertArgs>(args: SelectSubset<T, BookingItemUpsertArgs<ExtArgs>>): Prisma__BookingItemClient<$Result.GetResult<Prisma.$BookingItemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more BookingItems that matches the filter.
     * @param {BookingItemFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const bookingItem = await prisma.bookingItem.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: BookingItemFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a BookingItem.
     * @param {BookingItemAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const bookingItem = await prisma.bookingItem.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: BookingItemAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of BookingItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingItemCountArgs} args - Arguments to filter BookingItems to count.
     * @example
     * // Count the number of BookingItems
     * const count = await prisma.bookingItem.count({
     *   where: {
     *     // ... the filter for the BookingItems we want to count
     *   }
     * })
    **/
    count<T extends BookingItemCountArgs>(
      args?: Subset<T, BookingItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BookingItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BookingItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BookingItemAggregateArgs>(args: Subset<T, BookingItemAggregateArgs>): Prisma.PrismaPromise<GetBookingItemAggregateType<T>>

    /**
     * Group by BookingItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookingItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BookingItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BookingItemGroupByArgs['orderBy'] }
        : { orderBy?: BookingItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BookingItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBookingItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BookingItem model
   */
  readonly fields: BookingItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BookingItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BookingItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    booking<T extends BookingDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BookingDefaultArgs<ExtArgs>>): Prisma__BookingClient<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    product<T extends BookingItem$productArgs<ExtArgs> = {}>(args?: Subset<T, BookingItem$productArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BookingItem model
   */
  interface BookingItemFieldRefs {
    readonly id: FieldRef<"BookingItem", 'String'>
    readonly bookingId: FieldRef<"BookingItem", 'String'>
    readonly productId: FieldRef<"BookingItem", 'String'>
    readonly name: FieldRef<"BookingItem", 'String'>
    readonly date: FieldRef<"BookingItem", 'DateTime'>
    readonly quantity: FieldRef<"BookingItem", 'Int'>
    readonly unitNet: FieldRef<"BookingItem", 'Float'>
    readonly unitGross: FieldRef<"BookingItem", 'Float'>
    readonly subtotalNet: FieldRef<"BookingItem", 'Float'>
    readonly subtotalGross: FieldRef<"BookingItem", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * BookingItem findUnique
   */
  export type BookingItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookingItem
     */
    select?: BookingItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookingItem
     */
    omit?: BookingItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingItemInclude<ExtArgs> | null
    /**
     * Filter, which BookingItem to fetch.
     */
    where: BookingItemWhereUniqueInput
  }

  /**
   * BookingItem findUniqueOrThrow
   */
  export type BookingItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookingItem
     */
    select?: BookingItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookingItem
     */
    omit?: BookingItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingItemInclude<ExtArgs> | null
    /**
     * Filter, which BookingItem to fetch.
     */
    where: BookingItemWhereUniqueInput
  }

  /**
   * BookingItem findFirst
   */
  export type BookingItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookingItem
     */
    select?: BookingItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookingItem
     */
    omit?: BookingItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingItemInclude<ExtArgs> | null
    /**
     * Filter, which BookingItem to fetch.
     */
    where?: BookingItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookingItems to fetch.
     */
    orderBy?: BookingItemOrderByWithRelationInput | BookingItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BookingItems.
     */
    cursor?: BookingItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookingItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookingItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BookingItems.
     */
    distinct?: BookingItemScalarFieldEnum | BookingItemScalarFieldEnum[]
  }

  /**
   * BookingItem findFirstOrThrow
   */
  export type BookingItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookingItem
     */
    select?: BookingItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookingItem
     */
    omit?: BookingItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingItemInclude<ExtArgs> | null
    /**
     * Filter, which BookingItem to fetch.
     */
    where?: BookingItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookingItems to fetch.
     */
    orderBy?: BookingItemOrderByWithRelationInput | BookingItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BookingItems.
     */
    cursor?: BookingItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookingItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookingItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BookingItems.
     */
    distinct?: BookingItemScalarFieldEnum | BookingItemScalarFieldEnum[]
  }

  /**
   * BookingItem findMany
   */
  export type BookingItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookingItem
     */
    select?: BookingItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookingItem
     */
    omit?: BookingItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingItemInclude<ExtArgs> | null
    /**
     * Filter, which BookingItems to fetch.
     */
    where?: BookingItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BookingItems to fetch.
     */
    orderBy?: BookingItemOrderByWithRelationInput | BookingItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BookingItems.
     */
    cursor?: BookingItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BookingItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BookingItems.
     */
    skip?: number
    distinct?: BookingItemScalarFieldEnum | BookingItemScalarFieldEnum[]
  }

  /**
   * BookingItem create
   */
  export type BookingItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookingItem
     */
    select?: BookingItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookingItem
     */
    omit?: BookingItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingItemInclude<ExtArgs> | null
    /**
     * The data needed to create a BookingItem.
     */
    data: XOR<BookingItemCreateInput, BookingItemUncheckedCreateInput>
  }

  /**
   * BookingItem createMany
   */
  export type BookingItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BookingItems.
     */
    data: BookingItemCreateManyInput | BookingItemCreateManyInput[]
  }

  /**
   * BookingItem update
   */
  export type BookingItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookingItem
     */
    select?: BookingItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookingItem
     */
    omit?: BookingItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingItemInclude<ExtArgs> | null
    /**
     * The data needed to update a BookingItem.
     */
    data: XOR<BookingItemUpdateInput, BookingItemUncheckedUpdateInput>
    /**
     * Choose, which BookingItem to update.
     */
    where: BookingItemWhereUniqueInput
  }

  /**
   * BookingItem updateMany
   */
  export type BookingItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BookingItems.
     */
    data: XOR<BookingItemUpdateManyMutationInput, BookingItemUncheckedUpdateManyInput>
    /**
     * Filter which BookingItems to update
     */
    where?: BookingItemWhereInput
    /**
     * Limit how many BookingItems to update.
     */
    limit?: number
  }

  /**
   * BookingItem upsert
   */
  export type BookingItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookingItem
     */
    select?: BookingItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookingItem
     */
    omit?: BookingItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingItemInclude<ExtArgs> | null
    /**
     * The filter to search for the BookingItem to update in case it exists.
     */
    where: BookingItemWhereUniqueInput
    /**
     * In case the BookingItem found by the `where` argument doesn't exist, create a new BookingItem with this data.
     */
    create: XOR<BookingItemCreateInput, BookingItemUncheckedCreateInput>
    /**
     * In case the BookingItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BookingItemUpdateInput, BookingItemUncheckedUpdateInput>
  }

  /**
   * BookingItem delete
   */
  export type BookingItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookingItem
     */
    select?: BookingItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookingItem
     */
    omit?: BookingItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingItemInclude<ExtArgs> | null
    /**
     * Filter which BookingItem to delete.
     */
    where: BookingItemWhereUniqueInput
  }

  /**
   * BookingItem deleteMany
   */
  export type BookingItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BookingItems to delete
     */
    where?: BookingItemWhereInput
    /**
     * Limit how many BookingItems to delete.
     */
    limit?: number
  }

  /**
   * BookingItem findRaw
   */
  export type BookingItemFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * BookingItem aggregateRaw
   */
  export type BookingItemAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * BookingItem.product
   */
  export type BookingItem$productArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    where?: ProductWhereInput
  }

  /**
   * BookingItem without action
   */
  export type BookingItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BookingItem
     */
    select?: BookingItemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BookingItem
     */
    omit?: BookingItemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingItemInclude<ExtArgs> | null
  }


  /**
   * Model ExternalServiceMapping
   */

  export type AggregateExternalServiceMapping = {
    _count: ExternalServiceMappingCountAggregateOutputType | null
    _min: ExternalServiceMappingMinAggregateOutputType | null
    _max: ExternalServiceMappingMaxAggregateOutputType | null
  }

  export type ExternalServiceMappingMinAggregateOutputType = {
    id: string | null
    serviceName: string | null
    externalId: string | null
    internalId: string | null
    internalType: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ExternalServiceMappingMaxAggregateOutputType = {
    id: string | null
    serviceName: string | null
    externalId: string | null
    internalId: string | null
    internalType: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ExternalServiceMappingCountAggregateOutputType = {
    id: number
    serviceName: number
    externalId: number
    internalId: number
    internalType: number
    metadata: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ExternalServiceMappingMinAggregateInputType = {
    id?: true
    serviceName?: true
    externalId?: true
    internalId?: true
    internalType?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ExternalServiceMappingMaxAggregateInputType = {
    id?: true
    serviceName?: true
    externalId?: true
    internalId?: true
    internalType?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ExternalServiceMappingCountAggregateInputType = {
    id?: true
    serviceName?: true
    externalId?: true
    internalId?: true
    internalType?: true
    metadata?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ExternalServiceMappingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ExternalServiceMapping to aggregate.
     */
    where?: ExternalServiceMappingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExternalServiceMappings to fetch.
     */
    orderBy?: ExternalServiceMappingOrderByWithRelationInput | ExternalServiceMappingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ExternalServiceMappingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExternalServiceMappings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExternalServiceMappings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ExternalServiceMappings
    **/
    _count?: true | ExternalServiceMappingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExternalServiceMappingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExternalServiceMappingMaxAggregateInputType
  }

  export type GetExternalServiceMappingAggregateType<T extends ExternalServiceMappingAggregateArgs> = {
        [P in keyof T & keyof AggregateExternalServiceMapping]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExternalServiceMapping[P]>
      : GetScalarType<T[P], AggregateExternalServiceMapping[P]>
  }




  export type ExternalServiceMappingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExternalServiceMappingWhereInput
    orderBy?: ExternalServiceMappingOrderByWithAggregationInput | ExternalServiceMappingOrderByWithAggregationInput[]
    by: ExternalServiceMappingScalarFieldEnum[] | ExternalServiceMappingScalarFieldEnum
    having?: ExternalServiceMappingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExternalServiceMappingCountAggregateInputType | true
    _min?: ExternalServiceMappingMinAggregateInputType
    _max?: ExternalServiceMappingMaxAggregateInputType
  }

  export type ExternalServiceMappingGroupByOutputType = {
    id: string
    serviceName: string
    externalId: string
    internalId: string
    internalType: string
    metadata: JsonValue | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: ExternalServiceMappingCountAggregateOutputType | null
    _min: ExternalServiceMappingMinAggregateOutputType | null
    _max: ExternalServiceMappingMaxAggregateOutputType | null
  }

  type GetExternalServiceMappingGroupByPayload<T extends ExternalServiceMappingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ExternalServiceMappingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExternalServiceMappingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExternalServiceMappingGroupByOutputType[P]>
            : GetScalarType<T[P], ExternalServiceMappingGroupByOutputType[P]>
        }
      >
    >


  export type ExternalServiceMappingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    serviceName?: boolean
    externalId?: boolean
    internalId?: boolean
    internalType?: boolean
    metadata?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["externalServiceMapping"]>



  export type ExternalServiceMappingSelectScalar = {
    id?: boolean
    serviceName?: boolean
    externalId?: boolean
    internalId?: boolean
    internalType?: boolean
    metadata?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ExternalServiceMappingOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "serviceName" | "externalId" | "internalId" | "internalType" | "metadata" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["externalServiceMapping"]>

  export type $ExternalServiceMappingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ExternalServiceMapping"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      serviceName: string
      externalId: string
      internalId: string
      internalType: string
      metadata: Prisma.JsonValue | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["externalServiceMapping"]>
    composites: {}
  }

  type ExternalServiceMappingGetPayload<S extends boolean | null | undefined | ExternalServiceMappingDefaultArgs> = $Result.GetResult<Prisma.$ExternalServiceMappingPayload, S>

  type ExternalServiceMappingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ExternalServiceMappingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ExternalServiceMappingCountAggregateInputType | true
    }

  export interface ExternalServiceMappingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ExternalServiceMapping'], meta: { name: 'ExternalServiceMapping' } }
    /**
     * Find zero or one ExternalServiceMapping that matches the filter.
     * @param {ExternalServiceMappingFindUniqueArgs} args - Arguments to find a ExternalServiceMapping
     * @example
     * // Get one ExternalServiceMapping
     * const externalServiceMapping = await prisma.externalServiceMapping.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ExternalServiceMappingFindUniqueArgs>(args: SelectSubset<T, ExternalServiceMappingFindUniqueArgs<ExtArgs>>): Prisma__ExternalServiceMappingClient<$Result.GetResult<Prisma.$ExternalServiceMappingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ExternalServiceMapping that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ExternalServiceMappingFindUniqueOrThrowArgs} args - Arguments to find a ExternalServiceMapping
     * @example
     * // Get one ExternalServiceMapping
     * const externalServiceMapping = await prisma.externalServiceMapping.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ExternalServiceMappingFindUniqueOrThrowArgs>(args: SelectSubset<T, ExternalServiceMappingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ExternalServiceMappingClient<$Result.GetResult<Prisma.$ExternalServiceMappingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ExternalServiceMapping that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExternalServiceMappingFindFirstArgs} args - Arguments to find a ExternalServiceMapping
     * @example
     * // Get one ExternalServiceMapping
     * const externalServiceMapping = await prisma.externalServiceMapping.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ExternalServiceMappingFindFirstArgs>(args?: SelectSubset<T, ExternalServiceMappingFindFirstArgs<ExtArgs>>): Prisma__ExternalServiceMappingClient<$Result.GetResult<Prisma.$ExternalServiceMappingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ExternalServiceMapping that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExternalServiceMappingFindFirstOrThrowArgs} args - Arguments to find a ExternalServiceMapping
     * @example
     * // Get one ExternalServiceMapping
     * const externalServiceMapping = await prisma.externalServiceMapping.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ExternalServiceMappingFindFirstOrThrowArgs>(args?: SelectSubset<T, ExternalServiceMappingFindFirstOrThrowArgs<ExtArgs>>): Prisma__ExternalServiceMappingClient<$Result.GetResult<Prisma.$ExternalServiceMappingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ExternalServiceMappings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExternalServiceMappingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ExternalServiceMappings
     * const externalServiceMappings = await prisma.externalServiceMapping.findMany()
     * 
     * // Get first 10 ExternalServiceMappings
     * const externalServiceMappings = await prisma.externalServiceMapping.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const externalServiceMappingWithIdOnly = await prisma.externalServiceMapping.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ExternalServiceMappingFindManyArgs>(args?: SelectSubset<T, ExternalServiceMappingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExternalServiceMappingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ExternalServiceMapping.
     * @param {ExternalServiceMappingCreateArgs} args - Arguments to create a ExternalServiceMapping.
     * @example
     * // Create one ExternalServiceMapping
     * const ExternalServiceMapping = await prisma.externalServiceMapping.create({
     *   data: {
     *     // ... data to create a ExternalServiceMapping
     *   }
     * })
     * 
     */
    create<T extends ExternalServiceMappingCreateArgs>(args: SelectSubset<T, ExternalServiceMappingCreateArgs<ExtArgs>>): Prisma__ExternalServiceMappingClient<$Result.GetResult<Prisma.$ExternalServiceMappingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ExternalServiceMappings.
     * @param {ExternalServiceMappingCreateManyArgs} args - Arguments to create many ExternalServiceMappings.
     * @example
     * // Create many ExternalServiceMappings
     * const externalServiceMapping = await prisma.externalServiceMapping.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ExternalServiceMappingCreateManyArgs>(args?: SelectSubset<T, ExternalServiceMappingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ExternalServiceMapping.
     * @param {ExternalServiceMappingDeleteArgs} args - Arguments to delete one ExternalServiceMapping.
     * @example
     * // Delete one ExternalServiceMapping
     * const ExternalServiceMapping = await prisma.externalServiceMapping.delete({
     *   where: {
     *     // ... filter to delete one ExternalServiceMapping
     *   }
     * })
     * 
     */
    delete<T extends ExternalServiceMappingDeleteArgs>(args: SelectSubset<T, ExternalServiceMappingDeleteArgs<ExtArgs>>): Prisma__ExternalServiceMappingClient<$Result.GetResult<Prisma.$ExternalServiceMappingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ExternalServiceMapping.
     * @param {ExternalServiceMappingUpdateArgs} args - Arguments to update one ExternalServiceMapping.
     * @example
     * // Update one ExternalServiceMapping
     * const externalServiceMapping = await prisma.externalServiceMapping.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ExternalServiceMappingUpdateArgs>(args: SelectSubset<T, ExternalServiceMappingUpdateArgs<ExtArgs>>): Prisma__ExternalServiceMappingClient<$Result.GetResult<Prisma.$ExternalServiceMappingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ExternalServiceMappings.
     * @param {ExternalServiceMappingDeleteManyArgs} args - Arguments to filter ExternalServiceMappings to delete.
     * @example
     * // Delete a few ExternalServiceMappings
     * const { count } = await prisma.externalServiceMapping.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ExternalServiceMappingDeleteManyArgs>(args?: SelectSubset<T, ExternalServiceMappingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ExternalServiceMappings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExternalServiceMappingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ExternalServiceMappings
     * const externalServiceMapping = await prisma.externalServiceMapping.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ExternalServiceMappingUpdateManyArgs>(args: SelectSubset<T, ExternalServiceMappingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ExternalServiceMapping.
     * @param {ExternalServiceMappingUpsertArgs} args - Arguments to update or create a ExternalServiceMapping.
     * @example
     * // Update or create a ExternalServiceMapping
     * const externalServiceMapping = await prisma.externalServiceMapping.upsert({
     *   create: {
     *     // ... data to create a ExternalServiceMapping
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ExternalServiceMapping we want to update
     *   }
     * })
     */
    upsert<T extends ExternalServiceMappingUpsertArgs>(args: SelectSubset<T, ExternalServiceMappingUpsertArgs<ExtArgs>>): Prisma__ExternalServiceMappingClient<$Result.GetResult<Prisma.$ExternalServiceMappingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ExternalServiceMappings that matches the filter.
     * @param {ExternalServiceMappingFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const externalServiceMapping = await prisma.externalServiceMapping.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: ExternalServiceMappingFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a ExternalServiceMapping.
     * @param {ExternalServiceMappingAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const externalServiceMapping = await prisma.externalServiceMapping.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: ExternalServiceMappingAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of ExternalServiceMappings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExternalServiceMappingCountArgs} args - Arguments to filter ExternalServiceMappings to count.
     * @example
     * // Count the number of ExternalServiceMappings
     * const count = await prisma.externalServiceMapping.count({
     *   where: {
     *     // ... the filter for the ExternalServiceMappings we want to count
     *   }
     * })
    **/
    count<T extends ExternalServiceMappingCountArgs>(
      args?: Subset<T, ExternalServiceMappingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExternalServiceMappingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ExternalServiceMapping.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExternalServiceMappingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExternalServiceMappingAggregateArgs>(args: Subset<T, ExternalServiceMappingAggregateArgs>): Prisma.PrismaPromise<GetExternalServiceMappingAggregateType<T>>

    /**
     * Group by ExternalServiceMapping.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExternalServiceMappingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExternalServiceMappingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExternalServiceMappingGroupByArgs['orderBy'] }
        : { orderBy?: ExternalServiceMappingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExternalServiceMappingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExternalServiceMappingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ExternalServiceMapping model
   */
  readonly fields: ExternalServiceMappingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ExternalServiceMapping.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ExternalServiceMappingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ExternalServiceMapping model
   */
  interface ExternalServiceMappingFieldRefs {
    readonly id: FieldRef<"ExternalServiceMapping", 'String'>
    readonly serviceName: FieldRef<"ExternalServiceMapping", 'String'>
    readonly externalId: FieldRef<"ExternalServiceMapping", 'String'>
    readonly internalId: FieldRef<"ExternalServiceMapping", 'String'>
    readonly internalType: FieldRef<"ExternalServiceMapping", 'String'>
    readonly metadata: FieldRef<"ExternalServiceMapping", 'Json'>
    readonly isActive: FieldRef<"ExternalServiceMapping", 'Boolean'>
    readonly createdAt: FieldRef<"ExternalServiceMapping", 'DateTime'>
    readonly updatedAt: FieldRef<"ExternalServiceMapping", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ExternalServiceMapping findUnique
   */
  export type ExternalServiceMappingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExternalServiceMapping
     */
    select?: ExternalServiceMappingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExternalServiceMapping
     */
    omit?: ExternalServiceMappingOmit<ExtArgs> | null
    /**
     * Filter, which ExternalServiceMapping to fetch.
     */
    where: ExternalServiceMappingWhereUniqueInput
  }

  /**
   * ExternalServiceMapping findUniqueOrThrow
   */
  export type ExternalServiceMappingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExternalServiceMapping
     */
    select?: ExternalServiceMappingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExternalServiceMapping
     */
    omit?: ExternalServiceMappingOmit<ExtArgs> | null
    /**
     * Filter, which ExternalServiceMapping to fetch.
     */
    where: ExternalServiceMappingWhereUniqueInput
  }

  /**
   * ExternalServiceMapping findFirst
   */
  export type ExternalServiceMappingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExternalServiceMapping
     */
    select?: ExternalServiceMappingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExternalServiceMapping
     */
    omit?: ExternalServiceMappingOmit<ExtArgs> | null
    /**
     * Filter, which ExternalServiceMapping to fetch.
     */
    where?: ExternalServiceMappingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExternalServiceMappings to fetch.
     */
    orderBy?: ExternalServiceMappingOrderByWithRelationInput | ExternalServiceMappingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ExternalServiceMappings.
     */
    cursor?: ExternalServiceMappingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExternalServiceMappings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExternalServiceMappings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ExternalServiceMappings.
     */
    distinct?: ExternalServiceMappingScalarFieldEnum | ExternalServiceMappingScalarFieldEnum[]
  }

  /**
   * ExternalServiceMapping findFirstOrThrow
   */
  export type ExternalServiceMappingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExternalServiceMapping
     */
    select?: ExternalServiceMappingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExternalServiceMapping
     */
    omit?: ExternalServiceMappingOmit<ExtArgs> | null
    /**
     * Filter, which ExternalServiceMapping to fetch.
     */
    where?: ExternalServiceMappingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExternalServiceMappings to fetch.
     */
    orderBy?: ExternalServiceMappingOrderByWithRelationInput | ExternalServiceMappingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ExternalServiceMappings.
     */
    cursor?: ExternalServiceMappingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExternalServiceMappings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExternalServiceMappings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ExternalServiceMappings.
     */
    distinct?: ExternalServiceMappingScalarFieldEnum | ExternalServiceMappingScalarFieldEnum[]
  }

  /**
   * ExternalServiceMapping findMany
   */
  export type ExternalServiceMappingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExternalServiceMapping
     */
    select?: ExternalServiceMappingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExternalServiceMapping
     */
    omit?: ExternalServiceMappingOmit<ExtArgs> | null
    /**
     * Filter, which ExternalServiceMappings to fetch.
     */
    where?: ExternalServiceMappingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExternalServiceMappings to fetch.
     */
    orderBy?: ExternalServiceMappingOrderByWithRelationInput | ExternalServiceMappingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ExternalServiceMappings.
     */
    cursor?: ExternalServiceMappingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExternalServiceMappings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExternalServiceMappings.
     */
    skip?: number
    distinct?: ExternalServiceMappingScalarFieldEnum | ExternalServiceMappingScalarFieldEnum[]
  }

  /**
   * ExternalServiceMapping create
   */
  export type ExternalServiceMappingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExternalServiceMapping
     */
    select?: ExternalServiceMappingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExternalServiceMapping
     */
    omit?: ExternalServiceMappingOmit<ExtArgs> | null
    /**
     * The data needed to create a ExternalServiceMapping.
     */
    data: XOR<ExternalServiceMappingCreateInput, ExternalServiceMappingUncheckedCreateInput>
  }

  /**
   * ExternalServiceMapping createMany
   */
  export type ExternalServiceMappingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ExternalServiceMappings.
     */
    data: ExternalServiceMappingCreateManyInput | ExternalServiceMappingCreateManyInput[]
  }

  /**
   * ExternalServiceMapping update
   */
  export type ExternalServiceMappingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExternalServiceMapping
     */
    select?: ExternalServiceMappingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExternalServiceMapping
     */
    omit?: ExternalServiceMappingOmit<ExtArgs> | null
    /**
     * The data needed to update a ExternalServiceMapping.
     */
    data: XOR<ExternalServiceMappingUpdateInput, ExternalServiceMappingUncheckedUpdateInput>
    /**
     * Choose, which ExternalServiceMapping to update.
     */
    where: ExternalServiceMappingWhereUniqueInput
  }

  /**
   * ExternalServiceMapping updateMany
   */
  export type ExternalServiceMappingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ExternalServiceMappings.
     */
    data: XOR<ExternalServiceMappingUpdateManyMutationInput, ExternalServiceMappingUncheckedUpdateManyInput>
    /**
     * Filter which ExternalServiceMappings to update
     */
    where?: ExternalServiceMappingWhereInput
    /**
     * Limit how many ExternalServiceMappings to update.
     */
    limit?: number
  }

  /**
   * ExternalServiceMapping upsert
   */
  export type ExternalServiceMappingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExternalServiceMapping
     */
    select?: ExternalServiceMappingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExternalServiceMapping
     */
    omit?: ExternalServiceMappingOmit<ExtArgs> | null
    /**
     * The filter to search for the ExternalServiceMapping to update in case it exists.
     */
    where: ExternalServiceMappingWhereUniqueInput
    /**
     * In case the ExternalServiceMapping found by the `where` argument doesn't exist, create a new ExternalServiceMapping with this data.
     */
    create: XOR<ExternalServiceMappingCreateInput, ExternalServiceMappingUncheckedCreateInput>
    /**
     * In case the ExternalServiceMapping was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ExternalServiceMappingUpdateInput, ExternalServiceMappingUncheckedUpdateInput>
  }

  /**
   * ExternalServiceMapping delete
   */
  export type ExternalServiceMappingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExternalServiceMapping
     */
    select?: ExternalServiceMappingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExternalServiceMapping
     */
    omit?: ExternalServiceMappingOmit<ExtArgs> | null
    /**
     * Filter which ExternalServiceMapping to delete.
     */
    where: ExternalServiceMappingWhereUniqueInput
  }

  /**
   * ExternalServiceMapping deleteMany
   */
  export type ExternalServiceMappingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ExternalServiceMappings to delete
     */
    where?: ExternalServiceMappingWhereInput
    /**
     * Limit how many ExternalServiceMappings to delete.
     */
    limit?: number
  }

  /**
   * ExternalServiceMapping findRaw
   */
  export type ExternalServiceMappingFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * ExternalServiceMapping aggregateRaw
   */
  export type ExternalServiceMappingAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * ExternalServiceMapping without action
   */
  export type ExternalServiceMappingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExternalServiceMapping
     */
    select?: ExternalServiceMappingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExternalServiceMapping
     */
    omit?: ExternalServiceMappingOmit<ExtArgs> | null
  }


  /**
   * Model PaymentTransaction
   */

  export type AggregatePaymentTransaction = {
    _count: PaymentTransactionCountAggregateOutputType | null
    _avg: PaymentTransactionAvgAggregateOutputType | null
    _sum: PaymentTransactionSumAggregateOutputType | null
    _min: PaymentTransactionMinAggregateOutputType | null
    _max: PaymentTransactionMaxAggregateOutputType | null
  }

  export type PaymentTransactionAvgAggregateOutputType = {
    amount: number | null
  }

  export type PaymentTransactionSumAggregateOutputType = {
    amount: number | null
  }

  export type PaymentTransactionMinAggregateOutputType = {
    id: string | null
    bookingId: string | null
    paymentIntentId: string | null
    amount: number | null
    currency: $Enums.Currency | null
    status: $Enums.PaymentStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PaymentTransactionMaxAggregateOutputType = {
    id: string | null
    bookingId: string | null
    paymentIntentId: string | null
    amount: number | null
    currency: $Enums.Currency | null
    status: $Enums.PaymentStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PaymentTransactionCountAggregateOutputType = {
    id: number
    bookingId: number
    paymentIntentId: number
    amount: number
    currency: number
    status: number
    gatewayResponse: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PaymentTransactionAvgAggregateInputType = {
    amount?: true
  }

  export type PaymentTransactionSumAggregateInputType = {
    amount?: true
  }

  export type PaymentTransactionMinAggregateInputType = {
    id?: true
    bookingId?: true
    paymentIntentId?: true
    amount?: true
    currency?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PaymentTransactionMaxAggregateInputType = {
    id?: true
    bookingId?: true
    paymentIntentId?: true
    amount?: true
    currency?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PaymentTransactionCountAggregateInputType = {
    id?: true
    bookingId?: true
    paymentIntentId?: true
    amount?: true
    currency?: true
    status?: true
    gatewayResponse?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PaymentTransactionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PaymentTransaction to aggregate.
     */
    where?: PaymentTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentTransactions to fetch.
     */
    orderBy?: PaymentTransactionOrderByWithRelationInput | PaymentTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PaymentTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PaymentTransactions
    **/
    _count?: true | PaymentTransactionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PaymentTransactionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PaymentTransactionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PaymentTransactionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PaymentTransactionMaxAggregateInputType
  }

  export type GetPaymentTransactionAggregateType<T extends PaymentTransactionAggregateArgs> = {
        [P in keyof T & keyof AggregatePaymentTransaction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePaymentTransaction[P]>
      : GetScalarType<T[P], AggregatePaymentTransaction[P]>
  }




  export type PaymentTransactionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentTransactionWhereInput
    orderBy?: PaymentTransactionOrderByWithAggregationInput | PaymentTransactionOrderByWithAggregationInput[]
    by: PaymentTransactionScalarFieldEnum[] | PaymentTransactionScalarFieldEnum
    having?: PaymentTransactionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PaymentTransactionCountAggregateInputType | true
    _avg?: PaymentTransactionAvgAggregateInputType
    _sum?: PaymentTransactionSumAggregateInputType
    _min?: PaymentTransactionMinAggregateInputType
    _max?: PaymentTransactionMaxAggregateInputType
  }

  export type PaymentTransactionGroupByOutputType = {
    id: string
    bookingId: string
    paymentIntentId: string
    amount: number
    currency: $Enums.Currency
    status: $Enums.PaymentStatus
    gatewayResponse: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: PaymentTransactionCountAggregateOutputType | null
    _avg: PaymentTransactionAvgAggregateOutputType | null
    _sum: PaymentTransactionSumAggregateOutputType | null
    _min: PaymentTransactionMinAggregateOutputType | null
    _max: PaymentTransactionMaxAggregateOutputType | null
  }

  type GetPaymentTransactionGroupByPayload<T extends PaymentTransactionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PaymentTransactionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PaymentTransactionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PaymentTransactionGroupByOutputType[P]>
            : GetScalarType<T[P], PaymentTransactionGroupByOutputType[P]>
        }
      >
    >


  export type PaymentTransactionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    bookingId?: boolean
    paymentIntentId?: boolean
    amount?: boolean
    currency?: boolean
    status?: boolean
    gatewayResponse?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    booking?: boolean | BookingDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["paymentTransaction"]>



  export type PaymentTransactionSelectScalar = {
    id?: boolean
    bookingId?: boolean
    paymentIntentId?: boolean
    amount?: boolean
    currency?: boolean
    status?: boolean
    gatewayResponse?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PaymentTransactionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "bookingId" | "paymentIntentId" | "amount" | "currency" | "status" | "gatewayResponse" | "createdAt" | "updatedAt", ExtArgs["result"]["paymentTransaction"]>
  export type PaymentTransactionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    booking?: boolean | BookingDefaultArgs<ExtArgs>
  }

  export type $PaymentTransactionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PaymentTransaction"
    objects: {
      booking: Prisma.$BookingPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      bookingId: string
      paymentIntentId: string
      amount: number
      currency: $Enums.Currency
      status: $Enums.PaymentStatus
      gatewayResponse: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["paymentTransaction"]>
    composites: {}
  }

  type PaymentTransactionGetPayload<S extends boolean | null | undefined | PaymentTransactionDefaultArgs> = $Result.GetResult<Prisma.$PaymentTransactionPayload, S>

  type PaymentTransactionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PaymentTransactionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PaymentTransactionCountAggregateInputType | true
    }

  export interface PaymentTransactionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PaymentTransaction'], meta: { name: 'PaymentTransaction' } }
    /**
     * Find zero or one PaymentTransaction that matches the filter.
     * @param {PaymentTransactionFindUniqueArgs} args - Arguments to find a PaymentTransaction
     * @example
     * // Get one PaymentTransaction
     * const paymentTransaction = await prisma.paymentTransaction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PaymentTransactionFindUniqueArgs>(args: SelectSubset<T, PaymentTransactionFindUniqueArgs<ExtArgs>>): Prisma__PaymentTransactionClient<$Result.GetResult<Prisma.$PaymentTransactionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PaymentTransaction that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PaymentTransactionFindUniqueOrThrowArgs} args - Arguments to find a PaymentTransaction
     * @example
     * // Get one PaymentTransaction
     * const paymentTransaction = await prisma.paymentTransaction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PaymentTransactionFindUniqueOrThrowArgs>(args: SelectSubset<T, PaymentTransactionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PaymentTransactionClient<$Result.GetResult<Prisma.$PaymentTransactionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PaymentTransaction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentTransactionFindFirstArgs} args - Arguments to find a PaymentTransaction
     * @example
     * // Get one PaymentTransaction
     * const paymentTransaction = await prisma.paymentTransaction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PaymentTransactionFindFirstArgs>(args?: SelectSubset<T, PaymentTransactionFindFirstArgs<ExtArgs>>): Prisma__PaymentTransactionClient<$Result.GetResult<Prisma.$PaymentTransactionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PaymentTransaction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentTransactionFindFirstOrThrowArgs} args - Arguments to find a PaymentTransaction
     * @example
     * // Get one PaymentTransaction
     * const paymentTransaction = await prisma.paymentTransaction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PaymentTransactionFindFirstOrThrowArgs>(args?: SelectSubset<T, PaymentTransactionFindFirstOrThrowArgs<ExtArgs>>): Prisma__PaymentTransactionClient<$Result.GetResult<Prisma.$PaymentTransactionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PaymentTransactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentTransactionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PaymentTransactions
     * const paymentTransactions = await prisma.paymentTransaction.findMany()
     * 
     * // Get first 10 PaymentTransactions
     * const paymentTransactions = await prisma.paymentTransaction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const paymentTransactionWithIdOnly = await prisma.paymentTransaction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PaymentTransactionFindManyArgs>(args?: SelectSubset<T, PaymentTransactionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentTransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PaymentTransaction.
     * @param {PaymentTransactionCreateArgs} args - Arguments to create a PaymentTransaction.
     * @example
     * // Create one PaymentTransaction
     * const PaymentTransaction = await prisma.paymentTransaction.create({
     *   data: {
     *     // ... data to create a PaymentTransaction
     *   }
     * })
     * 
     */
    create<T extends PaymentTransactionCreateArgs>(args: SelectSubset<T, PaymentTransactionCreateArgs<ExtArgs>>): Prisma__PaymentTransactionClient<$Result.GetResult<Prisma.$PaymentTransactionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PaymentTransactions.
     * @param {PaymentTransactionCreateManyArgs} args - Arguments to create many PaymentTransactions.
     * @example
     * // Create many PaymentTransactions
     * const paymentTransaction = await prisma.paymentTransaction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PaymentTransactionCreateManyArgs>(args?: SelectSubset<T, PaymentTransactionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PaymentTransaction.
     * @param {PaymentTransactionDeleteArgs} args - Arguments to delete one PaymentTransaction.
     * @example
     * // Delete one PaymentTransaction
     * const PaymentTransaction = await prisma.paymentTransaction.delete({
     *   where: {
     *     // ... filter to delete one PaymentTransaction
     *   }
     * })
     * 
     */
    delete<T extends PaymentTransactionDeleteArgs>(args: SelectSubset<T, PaymentTransactionDeleteArgs<ExtArgs>>): Prisma__PaymentTransactionClient<$Result.GetResult<Prisma.$PaymentTransactionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PaymentTransaction.
     * @param {PaymentTransactionUpdateArgs} args - Arguments to update one PaymentTransaction.
     * @example
     * // Update one PaymentTransaction
     * const paymentTransaction = await prisma.paymentTransaction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PaymentTransactionUpdateArgs>(args: SelectSubset<T, PaymentTransactionUpdateArgs<ExtArgs>>): Prisma__PaymentTransactionClient<$Result.GetResult<Prisma.$PaymentTransactionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PaymentTransactions.
     * @param {PaymentTransactionDeleteManyArgs} args - Arguments to filter PaymentTransactions to delete.
     * @example
     * // Delete a few PaymentTransactions
     * const { count } = await prisma.paymentTransaction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PaymentTransactionDeleteManyArgs>(args?: SelectSubset<T, PaymentTransactionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PaymentTransactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentTransactionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PaymentTransactions
     * const paymentTransaction = await prisma.paymentTransaction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PaymentTransactionUpdateManyArgs>(args: SelectSubset<T, PaymentTransactionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PaymentTransaction.
     * @param {PaymentTransactionUpsertArgs} args - Arguments to update or create a PaymentTransaction.
     * @example
     * // Update or create a PaymentTransaction
     * const paymentTransaction = await prisma.paymentTransaction.upsert({
     *   create: {
     *     // ... data to create a PaymentTransaction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PaymentTransaction we want to update
     *   }
     * })
     */
    upsert<T extends PaymentTransactionUpsertArgs>(args: SelectSubset<T, PaymentTransactionUpsertArgs<ExtArgs>>): Prisma__PaymentTransactionClient<$Result.GetResult<Prisma.$PaymentTransactionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PaymentTransactions that matches the filter.
     * @param {PaymentTransactionFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const paymentTransaction = await prisma.paymentTransaction.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: PaymentTransactionFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a PaymentTransaction.
     * @param {PaymentTransactionAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const paymentTransaction = await prisma.paymentTransaction.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: PaymentTransactionAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of PaymentTransactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentTransactionCountArgs} args - Arguments to filter PaymentTransactions to count.
     * @example
     * // Count the number of PaymentTransactions
     * const count = await prisma.paymentTransaction.count({
     *   where: {
     *     // ... the filter for the PaymentTransactions we want to count
     *   }
     * })
    **/
    count<T extends PaymentTransactionCountArgs>(
      args?: Subset<T, PaymentTransactionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PaymentTransactionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PaymentTransaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentTransactionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PaymentTransactionAggregateArgs>(args: Subset<T, PaymentTransactionAggregateArgs>): Prisma.PrismaPromise<GetPaymentTransactionAggregateType<T>>

    /**
     * Group by PaymentTransaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentTransactionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PaymentTransactionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PaymentTransactionGroupByArgs['orderBy'] }
        : { orderBy?: PaymentTransactionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PaymentTransactionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaymentTransactionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PaymentTransaction model
   */
  readonly fields: PaymentTransactionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PaymentTransaction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PaymentTransactionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    booking<T extends BookingDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BookingDefaultArgs<ExtArgs>>): Prisma__BookingClient<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PaymentTransaction model
   */
  interface PaymentTransactionFieldRefs {
    readonly id: FieldRef<"PaymentTransaction", 'String'>
    readonly bookingId: FieldRef<"PaymentTransaction", 'String'>
    readonly paymentIntentId: FieldRef<"PaymentTransaction", 'String'>
    readonly amount: FieldRef<"PaymentTransaction", 'Float'>
    readonly currency: FieldRef<"PaymentTransaction", 'Currency'>
    readonly status: FieldRef<"PaymentTransaction", 'PaymentStatus'>
    readonly gatewayResponse: FieldRef<"PaymentTransaction", 'Json'>
    readonly createdAt: FieldRef<"PaymentTransaction", 'DateTime'>
    readonly updatedAt: FieldRef<"PaymentTransaction", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PaymentTransaction findUnique
   */
  export type PaymentTransactionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentTransaction
     */
    select?: PaymentTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentTransaction
     */
    omit?: PaymentTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentTransactionInclude<ExtArgs> | null
    /**
     * Filter, which PaymentTransaction to fetch.
     */
    where: PaymentTransactionWhereUniqueInput
  }

  /**
   * PaymentTransaction findUniqueOrThrow
   */
  export type PaymentTransactionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentTransaction
     */
    select?: PaymentTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentTransaction
     */
    omit?: PaymentTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentTransactionInclude<ExtArgs> | null
    /**
     * Filter, which PaymentTransaction to fetch.
     */
    where: PaymentTransactionWhereUniqueInput
  }

  /**
   * PaymentTransaction findFirst
   */
  export type PaymentTransactionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentTransaction
     */
    select?: PaymentTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentTransaction
     */
    omit?: PaymentTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentTransactionInclude<ExtArgs> | null
    /**
     * Filter, which PaymentTransaction to fetch.
     */
    where?: PaymentTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentTransactions to fetch.
     */
    orderBy?: PaymentTransactionOrderByWithRelationInput | PaymentTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PaymentTransactions.
     */
    cursor?: PaymentTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PaymentTransactions.
     */
    distinct?: PaymentTransactionScalarFieldEnum | PaymentTransactionScalarFieldEnum[]
  }

  /**
   * PaymentTransaction findFirstOrThrow
   */
  export type PaymentTransactionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentTransaction
     */
    select?: PaymentTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentTransaction
     */
    omit?: PaymentTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentTransactionInclude<ExtArgs> | null
    /**
     * Filter, which PaymentTransaction to fetch.
     */
    where?: PaymentTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentTransactions to fetch.
     */
    orderBy?: PaymentTransactionOrderByWithRelationInput | PaymentTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PaymentTransactions.
     */
    cursor?: PaymentTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PaymentTransactions.
     */
    distinct?: PaymentTransactionScalarFieldEnum | PaymentTransactionScalarFieldEnum[]
  }

  /**
   * PaymentTransaction findMany
   */
  export type PaymentTransactionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentTransaction
     */
    select?: PaymentTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentTransaction
     */
    omit?: PaymentTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentTransactionInclude<ExtArgs> | null
    /**
     * Filter, which PaymentTransactions to fetch.
     */
    where?: PaymentTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentTransactions to fetch.
     */
    orderBy?: PaymentTransactionOrderByWithRelationInput | PaymentTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PaymentTransactions.
     */
    cursor?: PaymentTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentTransactions.
     */
    skip?: number
    distinct?: PaymentTransactionScalarFieldEnum | PaymentTransactionScalarFieldEnum[]
  }

  /**
   * PaymentTransaction create
   */
  export type PaymentTransactionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentTransaction
     */
    select?: PaymentTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentTransaction
     */
    omit?: PaymentTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentTransactionInclude<ExtArgs> | null
    /**
     * The data needed to create a PaymentTransaction.
     */
    data: XOR<PaymentTransactionCreateInput, PaymentTransactionUncheckedCreateInput>
  }

  /**
   * PaymentTransaction createMany
   */
  export type PaymentTransactionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PaymentTransactions.
     */
    data: PaymentTransactionCreateManyInput | PaymentTransactionCreateManyInput[]
  }

  /**
   * PaymentTransaction update
   */
  export type PaymentTransactionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentTransaction
     */
    select?: PaymentTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentTransaction
     */
    omit?: PaymentTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentTransactionInclude<ExtArgs> | null
    /**
     * The data needed to update a PaymentTransaction.
     */
    data: XOR<PaymentTransactionUpdateInput, PaymentTransactionUncheckedUpdateInput>
    /**
     * Choose, which PaymentTransaction to update.
     */
    where: PaymentTransactionWhereUniqueInput
  }

  /**
   * PaymentTransaction updateMany
   */
  export type PaymentTransactionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PaymentTransactions.
     */
    data: XOR<PaymentTransactionUpdateManyMutationInput, PaymentTransactionUncheckedUpdateManyInput>
    /**
     * Filter which PaymentTransactions to update
     */
    where?: PaymentTransactionWhereInput
    /**
     * Limit how many PaymentTransactions to update.
     */
    limit?: number
  }

  /**
   * PaymentTransaction upsert
   */
  export type PaymentTransactionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentTransaction
     */
    select?: PaymentTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentTransaction
     */
    omit?: PaymentTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentTransactionInclude<ExtArgs> | null
    /**
     * The filter to search for the PaymentTransaction to update in case it exists.
     */
    where: PaymentTransactionWhereUniqueInput
    /**
     * In case the PaymentTransaction found by the `where` argument doesn't exist, create a new PaymentTransaction with this data.
     */
    create: XOR<PaymentTransactionCreateInput, PaymentTransactionUncheckedCreateInput>
    /**
     * In case the PaymentTransaction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PaymentTransactionUpdateInput, PaymentTransactionUncheckedUpdateInput>
  }

  /**
   * PaymentTransaction delete
   */
  export type PaymentTransactionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentTransaction
     */
    select?: PaymentTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentTransaction
     */
    omit?: PaymentTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentTransactionInclude<ExtArgs> | null
    /**
     * Filter which PaymentTransaction to delete.
     */
    where: PaymentTransactionWhereUniqueInput
  }

  /**
   * PaymentTransaction deleteMany
   */
  export type PaymentTransactionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PaymentTransactions to delete
     */
    where?: PaymentTransactionWhereInput
    /**
     * Limit how many PaymentTransactions to delete.
     */
    limit?: number
  }

  /**
   * PaymentTransaction findRaw
   */
  export type PaymentTransactionFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * PaymentTransaction aggregateRaw
   */
  export type PaymentTransactionAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * PaymentTransaction without action
   */
  export type PaymentTransactionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentTransaction
     */
    select?: PaymentTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PaymentTransaction
     */
    omit?: PaymentTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentTransactionInclude<ExtArgs> | null
  }


  /**
   * Model BillingRecord
   */

  export type AggregateBillingRecord = {
    _count: BillingRecordCountAggregateOutputType | null
    _avg: BillingRecordAvgAggregateOutputType | null
    _sum: BillingRecordSumAggregateOutputType | null
    _min: BillingRecordMinAggregateOutputType | null
    _max: BillingRecordMaxAggregateOutputType | null
  }

  export type BillingRecordAvgAggregateOutputType = {
    duration: number | null
    price: number | null
  }

  export type BillingRecordSumAggregateOutputType = {
    duration: number | null
    price: number | null
  }

  export type BillingRecordMinAggregateOutputType = {
    id: string | null
    userId: string | null
    bookingId: string | null
    planName: string | null
    duration: number | null
    price: number | null
    paymentSessionId: string | null
    purchasedAt: Date | null
  }

  export type BillingRecordMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    bookingId: string | null
    planName: string | null
    duration: number | null
    price: number | null
    paymentSessionId: string | null
    purchasedAt: Date | null
  }

  export type BillingRecordCountAggregateOutputType = {
    id: number
    userId: number
    bookingId: number
    planName: number
    duration: number
    price: number
    paymentSessionId: number
    purchasedAt: number
    _all: number
  }


  export type BillingRecordAvgAggregateInputType = {
    duration?: true
    price?: true
  }

  export type BillingRecordSumAggregateInputType = {
    duration?: true
    price?: true
  }

  export type BillingRecordMinAggregateInputType = {
    id?: true
    userId?: true
    bookingId?: true
    planName?: true
    duration?: true
    price?: true
    paymentSessionId?: true
    purchasedAt?: true
  }

  export type BillingRecordMaxAggregateInputType = {
    id?: true
    userId?: true
    bookingId?: true
    planName?: true
    duration?: true
    price?: true
    paymentSessionId?: true
    purchasedAt?: true
  }

  export type BillingRecordCountAggregateInputType = {
    id?: true
    userId?: true
    bookingId?: true
    planName?: true
    duration?: true
    price?: true
    paymentSessionId?: true
    purchasedAt?: true
    _all?: true
  }

  export type BillingRecordAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BillingRecord to aggregate.
     */
    where?: BillingRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BillingRecords to fetch.
     */
    orderBy?: BillingRecordOrderByWithRelationInput | BillingRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BillingRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BillingRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BillingRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BillingRecords
    **/
    _count?: true | BillingRecordCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BillingRecordAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BillingRecordSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BillingRecordMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BillingRecordMaxAggregateInputType
  }

  export type GetBillingRecordAggregateType<T extends BillingRecordAggregateArgs> = {
        [P in keyof T & keyof AggregateBillingRecord]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBillingRecord[P]>
      : GetScalarType<T[P], AggregateBillingRecord[P]>
  }




  export type BillingRecordGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BillingRecordWhereInput
    orderBy?: BillingRecordOrderByWithAggregationInput | BillingRecordOrderByWithAggregationInput[]
    by: BillingRecordScalarFieldEnum[] | BillingRecordScalarFieldEnum
    having?: BillingRecordScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BillingRecordCountAggregateInputType | true
    _avg?: BillingRecordAvgAggregateInputType
    _sum?: BillingRecordSumAggregateInputType
    _min?: BillingRecordMinAggregateInputType
    _max?: BillingRecordMaxAggregateInputType
  }

  export type BillingRecordGroupByOutputType = {
    id: string
    userId: string
    bookingId: string
    planName: string | null
    duration: number | null
    price: number
    paymentSessionId: string | null
    purchasedAt: Date
    _count: BillingRecordCountAggregateOutputType | null
    _avg: BillingRecordAvgAggregateOutputType | null
    _sum: BillingRecordSumAggregateOutputType | null
    _min: BillingRecordMinAggregateOutputType | null
    _max: BillingRecordMaxAggregateOutputType | null
  }

  type GetBillingRecordGroupByPayload<T extends BillingRecordGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BillingRecordGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BillingRecordGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BillingRecordGroupByOutputType[P]>
            : GetScalarType<T[P], BillingRecordGroupByOutputType[P]>
        }
      >
    >


  export type BillingRecordSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    bookingId?: boolean
    planName?: boolean
    duration?: boolean
    price?: boolean
    paymentSessionId?: boolean
    purchasedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    booking?: boolean | BookingDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["billingRecord"]>



  export type BillingRecordSelectScalar = {
    id?: boolean
    userId?: boolean
    bookingId?: boolean
    planName?: boolean
    duration?: boolean
    price?: boolean
    paymentSessionId?: boolean
    purchasedAt?: boolean
  }

  export type BillingRecordOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "bookingId" | "planName" | "duration" | "price" | "paymentSessionId" | "purchasedAt", ExtArgs["result"]["billingRecord"]>
  export type BillingRecordInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    booking?: boolean | BookingDefaultArgs<ExtArgs>
  }

  export type $BillingRecordPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BillingRecord"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      booking: Prisma.$BookingPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      bookingId: string
      planName: string | null
      duration: number | null
      price: number
      paymentSessionId: string | null
      purchasedAt: Date
    }, ExtArgs["result"]["billingRecord"]>
    composites: {}
  }

  type BillingRecordGetPayload<S extends boolean | null | undefined | BillingRecordDefaultArgs> = $Result.GetResult<Prisma.$BillingRecordPayload, S>

  type BillingRecordCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BillingRecordFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BillingRecordCountAggregateInputType | true
    }

  export interface BillingRecordDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BillingRecord'], meta: { name: 'BillingRecord' } }
    /**
     * Find zero or one BillingRecord that matches the filter.
     * @param {BillingRecordFindUniqueArgs} args - Arguments to find a BillingRecord
     * @example
     * // Get one BillingRecord
     * const billingRecord = await prisma.billingRecord.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BillingRecordFindUniqueArgs>(args: SelectSubset<T, BillingRecordFindUniqueArgs<ExtArgs>>): Prisma__BillingRecordClient<$Result.GetResult<Prisma.$BillingRecordPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one BillingRecord that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BillingRecordFindUniqueOrThrowArgs} args - Arguments to find a BillingRecord
     * @example
     * // Get one BillingRecord
     * const billingRecord = await prisma.billingRecord.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BillingRecordFindUniqueOrThrowArgs>(args: SelectSubset<T, BillingRecordFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BillingRecordClient<$Result.GetResult<Prisma.$BillingRecordPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BillingRecord that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillingRecordFindFirstArgs} args - Arguments to find a BillingRecord
     * @example
     * // Get one BillingRecord
     * const billingRecord = await prisma.billingRecord.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BillingRecordFindFirstArgs>(args?: SelectSubset<T, BillingRecordFindFirstArgs<ExtArgs>>): Prisma__BillingRecordClient<$Result.GetResult<Prisma.$BillingRecordPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BillingRecord that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillingRecordFindFirstOrThrowArgs} args - Arguments to find a BillingRecord
     * @example
     * // Get one BillingRecord
     * const billingRecord = await prisma.billingRecord.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BillingRecordFindFirstOrThrowArgs>(args?: SelectSubset<T, BillingRecordFindFirstOrThrowArgs<ExtArgs>>): Prisma__BillingRecordClient<$Result.GetResult<Prisma.$BillingRecordPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more BillingRecords that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillingRecordFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BillingRecords
     * const billingRecords = await prisma.billingRecord.findMany()
     * 
     * // Get first 10 BillingRecords
     * const billingRecords = await prisma.billingRecord.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const billingRecordWithIdOnly = await prisma.billingRecord.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BillingRecordFindManyArgs>(args?: SelectSubset<T, BillingRecordFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BillingRecordPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a BillingRecord.
     * @param {BillingRecordCreateArgs} args - Arguments to create a BillingRecord.
     * @example
     * // Create one BillingRecord
     * const BillingRecord = await prisma.billingRecord.create({
     *   data: {
     *     // ... data to create a BillingRecord
     *   }
     * })
     * 
     */
    create<T extends BillingRecordCreateArgs>(args: SelectSubset<T, BillingRecordCreateArgs<ExtArgs>>): Prisma__BillingRecordClient<$Result.GetResult<Prisma.$BillingRecordPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many BillingRecords.
     * @param {BillingRecordCreateManyArgs} args - Arguments to create many BillingRecords.
     * @example
     * // Create many BillingRecords
     * const billingRecord = await prisma.billingRecord.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BillingRecordCreateManyArgs>(args?: SelectSubset<T, BillingRecordCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a BillingRecord.
     * @param {BillingRecordDeleteArgs} args - Arguments to delete one BillingRecord.
     * @example
     * // Delete one BillingRecord
     * const BillingRecord = await prisma.billingRecord.delete({
     *   where: {
     *     // ... filter to delete one BillingRecord
     *   }
     * })
     * 
     */
    delete<T extends BillingRecordDeleteArgs>(args: SelectSubset<T, BillingRecordDeleteArgs<ExtArgs>>): Prisma__BillingRecordClient<$Result.GetResult<Prisma.$BillingRecordPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one BillingRecord.
     * @param {BillingRecordUpdateArgs} args - Arguments to update one BillingRecord.
     * @example
     * // Update one BillingRecord
     * const billingRecord = await prisma.billingRecord.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BillingRecordUpdateArgs>(args: SelectSubset<T, BillingRecordUpdateArgs<ExtArgs>>): Prisma__BillingRecordClient<$Result.GetResult<Prisma.$BillingRecordPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more BillingRecords.
     * @param {BillingRecordDeleteManyArgs} args - Arguments to filter BillingRecords to delete.
     * @example
     * // Delete a few BillingRecords
     * const { count } = await prisma.billingRecord.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BillingRecordDeleteManyArgs>(args?: SelectSubset<T, BillingRecordDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BillingRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillingRecordUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BillingRecords
     * const billingRecord = await prisma.billingRecord.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BillingRecordUpdateManyArgs>(args: SelectSubset<T, BillingRecordUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BillingRecord.
     * @param {BillingRecordUpsertArgs} args - Arguments to update or create a BillingRecord.
     * @example
     * // Update or create a BillingRecord
     * const billingRecord = await prisma.billingRecord.upsert({
     *   create: {
     *     // ... data to create a BillingRecord
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BillingRecord we want to update
     *   }
     * })
     */
    upsert<T extends BillingRecordUpsertArgs>(args: SelectSubset<T, BillingRecordUpsertArgs<ExtArgs>>): Prisma__BillingRecordClient<$Result.GetResult<Prisma.$BillingRecordPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more BillingRecords that matches the filter.
     * @param {BillingRecordFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const billingRecord = await prisma.billingRecord.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: BillingRecordFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a BillingRecord.
     * @param {BillingRecordAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const billingRecord = await prisma.billingRecord.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: BillingRecordAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of BillingRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillingRecordCountArgs} args - Arguments to filter BillingRecords to count.
     * @example
     * // Count the number of BillingRecords
     * const count = await prisma.billingRecord.count({
     *   where: {
     *     // ... the filter for the BillingRecords we want to count
     *   }
     * })
    **/
    count<T extends BillingRecordCountArgs>(
      args?: Subset<T, BillingRecordCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BillingRecordCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BillingRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillingRecordAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BillingRecordAggregateArgs>(args: Subset<T, BillingRecordAggregateArgs>): Prisma.PrismaPromise<GetBillingRecordAggregateType<T>>

    /**
     * Group by BillingRecord.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillingRecordGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BillingRecordGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BillingRecordGroupByArgs['orderBy'] }
        : { orderBy?: BillingRecordGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BillingRecordGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBillingRecordGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BillingRecord model
   */
  readonly fields: BillingRecordFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BillingRecord.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BillingRecordClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    booking<T extends BookingDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BookingDefaultArgs<ExtArgs>>): Prisma__BookingClient<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BillingRecord model
   */
  interface BillingRecordFieldRefs {
    readonly id: FieldRef<"BillingRecord", 'String'>
    readonly userId: FieldRef<"BillingRecord", 'String'>
    readonly bookingId: FieldRef<"BillingRecord", 'String'>
    readonly planName: FieldRef<"BillingRecord", 'String'>
    readonly duration: FieldRef<"BillingRecord", 'Int'>
    readonly price: FieldRef<"BillingRecord", 'Float'>
    readonly paymentSessionId: FieldRef<"BillingRecord", 'String'>
    readonly purchasedAt: FieldRef<"BillingRecord", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * BillingRecord findUnique
   */
  export type BillingRecordFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingRecord
     */
    select?: BillingRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BillingRecord
     */
    omit?: BillingRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingRecordInclude<ExtArgs> | null
    /**
     * Filter, which BillingRecord to fetch.
     */
    where: BillingRecordWhereUniqueInput
  }

  /**
   * BillingRecord findUniqueOrThrow
   */
  export type BillingRecordFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingRecord
     */
    select?: BillingRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BillingRecord
     */
    omit?: BillingRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingRecordInclude<ExtArgs> | null
    /**
     * Filter, which BillingRecord to fetch.
     */
    where: BillingRecordWhereUniqueInput
  }

  /**
   * BillingRecord findFirst
   */
  export type BillingRecordFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingRecord
     */
    select?: BillingRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BillingRecord
     */
    omit?: BillingRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingRecordInclude<ExtArgs> | null
    /**
     * Filter, which BillingRecord to fetch.
     */
    where?: BillingRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BillingRecords to fetch.
     */
    orderBy?: BillingRecordOrderByWithRelationInput | BillingRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BillingRecords.
     */
    cursor?: BillingRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BillingRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BillingRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BillingRecords.
     */
    distinct?: BillingRecordScalarFieldEnum | BillingRecordScalarFieldEnum[]
  }

  /**
   * BillingRecord findFirstOrThrow
   */
  export type BillingRecordFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingRecord
     */
    select?: BillingRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BillingRecord
     */
    omit?: BillingRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingRecordInclude<ExtArgs> | null
    /**
     * Filter, which BillingRecord to fetch.
     */
    where?: BillingRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BillingRecords to fetch.
     */
    orderBy?: BillingRecordOrderByWithRelationInput | BillingRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BillingRecords.
     */
    cursor?: BillingRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BillingRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BillingRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BillingRecords.
     */
    distinct?: BillingRecordScalarFieldEnum | BillingRecordScalarFieldEnum[]
  }

  /**
   * BillingRecord findMany
   */
  export type BillingRecordFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingRecord
     */
    select?: BillingRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BillingRecord
     */
    omit?: BillingRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingRecordInclude<ExtArgs> | null
    /**
     * Filter, which BillingRecords to fetch.
     */
    where?: BillingRecordWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BillingRecords to fetch.
     */
    orderBy?: BillingRecordOrderByWithRelationInput | BillingRecordOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BillingRecords.
     */
    cursor?: BillingRecordWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BillingRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BillingRecords.
     */
    skip?: number
    distinct?: BillingRecordScalarFieldEnum | BillingRecordScalarFieldEnum[]
  }

  /**
   * BillingRecord create
   */
  export type BillingRecordCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingRecord
     */
    select?: BillingRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BillingRecord
     */
    omit?: BillingRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingRecordInclude<ExtArgs> | null
    /**
     * The data needed to create a BillingRecord.
     */
    data: XOR<BillingRecordCreateInput, BillingRecordUncheckedCreateInput>
  }

  /**
   * BillingRecord createMany
   */
  export type BillingRecordCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BillingRecords.
     */
    data: BillingRecordCreateManyInput | BillingRecordCreateManyInput[]
  }

  /**
   * BillingRecord update
   */
  export type BillingRecordUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingRecord
     */
    select?: BillingRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BillingRecord
     */
    omit?: BillingRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingRecordInclude<ExtArgs> | null
    /**
     * The data needed to update a BillingRecord.
     */
    data: XOR<BillingRecordUpdateInput, BillingRecordUncheckedUpdateInput>
    /**
     * Choose, which BillingRecord to update.
     */
    where: BillingRecordWhereUniqueInput
  }

  /**
   * BillingRecord updateMany
   */
  export type BillingRecordUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BillingRecords.
     */
    data: XOR<BillingRecordUpdateManyMutationInput, BillingRecordUncheckedUpdateManyInput>
    /**
     * Filter which BillingRecords to update
     */
    where?: BillingRecordWhereInput
    /**
     * Limit how many BillingRecords to update.
     */
    limit?: number
  }

  /**
   * BillingRecord upsert
   */
  export type BillingRecordUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingRecord
     */
    select?: BillingRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BillingRecord
     */
    omit?: BillingRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingRecordInclude<ExtArgs> | null
    /**
     * The filter to search for the BillingRecord to update in case it exists.
     */
    where: BillingRecordWhereUniqueInput
    /**
     * In case the BillingRecord found by the `where` argument doesn't exist, create a new BillingRecord with this data.
     */
    create: XOR<BillingRecordCreateInput, BillingRecordUncheckedCreateInput>
    /**
     * In case the BillingRecord was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BillingRecordUpdateInput, BillingRecordUncheckedUpdateInput>
  }

  /**
   * BillingRecord delete
   */
  export type BillingRecordDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingRecord
     */
    select?: BillingRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BillingRecord
     */
    omit?: BillingRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingRecordInclude<ExtArgs> | null
    /**
     * Filter which BillingRecord to delete.
     */
    where: BillingRecordWhereUniqueInput
  }

  /**
   * BillingRecord deleteMany
   */
  export type BillingRecordDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BillingRecords to delete
     */
    where?: BillingRecordWhereInput
    /**
     * Limit how many BillingRecords to delete.
     */
    limit?: number
  }

  /**
   * BillingRecord findRaw
   */
  export type BillingRecordFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * BillingRecord aggregateRaw
   */
  export type BillingRecordAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * BillingRecord without action
   */
  export type BillingRecordDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BillingRecord
     */
    select?: BillingRecordSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BillingRecord
     */
    omit?: BillingRecordOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillingRecordInclude<ExtArgs> | null
  }


  /**
   * Model Settings
   */

  export type AggregateSettings = {
    _count: SettingsCountAggregateOutputType | null
    _min: SettingsMinAggregateOutputType | null
    _max: SettingsMaxAggregateOutputType | null
  }

  export type SettingsMinAggregateOutputType = {
    id: string | null
    type: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SettingsMaxAggregateOutputType = {
    id: string | null
    type: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SettingsCountAggregateOutputType = {
    id: number
    type: number
    value: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SettingsMinAggregateInputType = {
    id?: true
    type?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SettingsMaxAggregateInputType = {
    id?: true
    type?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SettingsCountAggregateInputType = {
    id?: true
    type?: true
    value?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SettingsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Settings to aggregate.
     */
    where?: SettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Settings to fetch.
     */
    orderBy?: SettingsOrderByWithRelationInput | SettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Settings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Settings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Settings
    **/
    _count?: true | SettingsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SettingsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SettingsMaxAggregateInputType
  }

  export type GetSettingsAggregateType<T extends SettingsAggregateArgs> = {
        [P in keyof T & keyof AggregateSettings]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSettings[P]>
      : GetScalarType<T[P], AggregateSettings[P]>
  }




  export type SettingsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SettingsWhereInput
    orderBy?: SettingsOrderByWithAggregationInput | SettingsOrderByWithAggregationInput[]
    by: SettingsScalarFieldEnum[] | SettingsScalarFieldEnum
    having?: SettingsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SettingsCountAggregateInputType | true
    _min?: SettingsMinAggregateInputType
    _max?: SettingsMaxAggregateInputType
  }

  export type SettingsGroupByOutputType = {
    id: string
    type: string
    value: JsonValue
    createdAt: Date
    updatedAt: Date
    _count: SettingsCountAggregateOutputType | null
    _min: SettingsMinAggregateOutputType | null
    _max: SettingsMaxAggregateOutputType | null
  }

  type GetSettingsGroupByPayload<T extends SettingsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SettingsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SettingsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SettingsGroupByOutputType[P]>
            : GetScalarType<T[P], SettingsGroupByOutputType[P]>
        }
      >
    >


  export type SettingsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    value?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["settings"]>



  export type SettingsSelectScalar = {
    id?: boolean
    type?: boolean
    value?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SettingsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "type" | "value" | "createdAt" | "updatedAt", ExtArgs["result"]["settings"]>

  export type $SettingsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Settings"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      type: string
      value: Prisma.JsonValue
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["settings"]>
    composites: {}
  }

  type SettingsGetPayload<S extends boolean | null | undefined | SettingsDefaultArgs> = $Result.GetResult<Prisma.$SettingsPayload, S>

  type SettingsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SettingsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SettingsCountAggregateInputType | true
    }

  export interface SettingsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Settings'], meta: { name: 'Settings' } }
    /**
     * Find zero or one Settings that matches the filter.
     * @param {SettingsFindUniqueArgs} args - Arguments to find a Settings
     * @example
     * // Get one Settings
     * const settings = await prisma.settings.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SettingsFindUniqueArgs>(args: SelectSubset<T, SettingsFindUniqueArgs<ExtArgs>>): Prisma__SettingsClient<$Result.GetResult<Prisma.$SettingsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Settings that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SettingsFindUniqueOrThrowArgs} args - Arguments to find a Settings
     * @example
     * // Get one Settings
     * const settings = await prisma.settings.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SettingsFindUniqueOrThrowArgs>(args: SelectSubset<T, SettingsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SettingsClient<$Result.GetResult<Prisma.$SettingsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Settings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingsFindFirstArgs} args - Arguments to find a Settings
     * @example
     * // Get one Settings
     * const settings = await prisma.settings.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SettingsFindFirstArgs>(args?: SelectSubset<T, SettingsFindFirstArgs<ExtArgs>>): Prisma__SettingsClient<$Result.GetResult<Prisma.$SettingsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Settings that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingsFindFirstOrThrowArgs} args - Arguments to find a Settings
     * @example
     * // Get one Settings
     * const settings = await prisma.settings.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SettingsFindFirstOrThrowArgs>(args?: SelectSubset<T, SettingsFindFirstOrThrowArgs<ExtArgs>>): Prisma__SettingsClient<$Result.GetResult<Prisma.$SettingsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Settings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Settings
     * const settings = await prisma.settings.findMany()
     * 
     * // Get first 10 Settings
     * const settings = await prisma.settings.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const settingsWithIdOnly = await prisma.settings.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SettingsFindManyArgs>(args?: SelectSubset<T, SettingsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SettingsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Settings.
     * @param {SettingsCreateArgs} args - Arguments to create a Settings.
     * @example
     * // Create one Settings
     * const Settings = await prisma.settings.create({
     *   data: {
     *     // ... data to create a Settings
     *   }
     * })
     * 
     */
    create<T extends SettingsCreateArgs>(args: SelectSubset<T, SettingsCreateArgs<ExtArgs>>): Prisma__SettingsClient<$Result.GetResult<Prisma.$SettingsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Settings.
     * @param {SettingsCreateManyArgs} args - Arguments to create many Settings.
     * @example
     * // Create many Settings
     * const settings = await prisma.settings.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SettingsCreateManyArgs>(args?: SelectSubset<T, SettingsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Settings.
     * @param {SettingsDeleteArgs} args - Arguments to delete one Settings.
     * @example
     * // Delete one Settings
     * const Settings = await prisma.settings.delete({
     *   where: {
     *     // ... filter to delete one Settings
     *   }
     * })
     * 
     */
    delete<T extends SettingsDeleteArgs>(args: SelectSubset<T, SettingsDeleteArgs<ExtArgs>>): Prisma__SettingsClient<$Result.GetResult<Prisma.$SettingsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Settings.
     * @param {SettingsUpdateArgs} args - Arguments to update one Settings.
     * @example
     * // Update one Settings
     * const settings = await prisma.settings.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SettingsUpdateArgs>(args: SelectSubset<T, SettingsUpdateArgs<ExtArgs>>): Prisma__SettingsClient<$Result.GetResult<Prisma.$SettingsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Settings.
     * @param {SettingsDeleteManyArgs} args - Arguments to filter Settings to delete.
     * @example
     * // Delete a few Settings
     * const { count } = await prisma.settings.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SettingsDeleteManyArgs>(args?: SelectSubset<T, SettingsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Settings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Settings
     * const settings = await prisma.settings.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SettingsUpdateManyArgs>(args: SelectSubset<T, SettingsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Settings.
     * @param {SettingsUpsertArgs} args - Arguments to update or create a Settings.
     * @example
     * // Update or create a Settings
     * const settings = await prisma.settings.upsert({
     *   create: {
     *     // ... data to create a Settings
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Settings we want to update
     *   }
     * })
     */
    upsert<T extends SettingsUpsertArgs>(args: SelectSubset<T, SettingsUpsertArgs<ExtArgs>>): Prisma__SettingsClient<$Result.GetResult<Prisma.$SettingsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Settings that matches the filter.
     * @param {SettingsFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const settings = await prisma.settings.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: SettingsFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Settings.
     * @param {SettingsAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const settings = await prisma.settings.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: SettingsAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Settings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingsCountArgs} args - Arguments to filter Settings to count.
     * @example
     * // Count the number of Settings
     * const count = await prisma.settings.count({
     *   where: {
     *     // ... the filter for the Settings we want to count
     *   }
     * })
    **/
    count<T extends SettingsCountArgs>(
      args?: Subset<T, SettingsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SettingsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Settings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SettingsAggregateArgs>(args: Subset<T, SettingsAggregateArgs>): Prisma.PrismaPromise<GetSettingsAggregateType<T>>

    /**
     * Group by Settings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SettingsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SettingsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SettingsGroupByArgs['orderBy'] }
        : { orderBy?: SettingsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SettingsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSettingsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Settings model
   */
  readonly fields: SettingsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Settings.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SettingsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Settings model
   */
  interface SettingsFieldRefs {
    readonly id: FieldRef<"Settings", 'String'>
    readonly type: FieldRef<"Settings", 'String'>
    readonly value: FieldRef<"Settings", 'Json'>
    readonly createdAt: FieldRef<"Settings", 'DateTime'>
    readonly updatedAt: FieldRef<"Settings", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Settings findUnique
   */
  export type SettingsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Settings
     */
    select?: SettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Settings
     */
    omit?: SettingsOmit<ExtArgs> | null
    /**
     * Filter, which Settings to fetch.
     */
    where: SettingsWhereUniqueInput
  }

  /**
   * Settings findUniqueOrThrow
   */
  export type SettingsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Settings
     */
    select?: SettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Settings
     */
    omit?: SettingsOmit<ExtArgs> | null
    /**
     * Filter, which Settings to fetch.
     */
    where: SettingsWhereUniqueInput
  }

  /**
   * Settings findFirst
   */
  export type SettingsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Settings
     */
    select?: SettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Settings
     */
    omit?: SettingsOmit<ExtArgs> | null
    /**
     * Filter, which Settings to fetch.
     */
    where?: SettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Settings to fetch.
     */
    orderBy?: SettingsOrderByWithRelationInput | SettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Settings.
     */
    cursor?: SettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Settings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Settings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Settings.
     */
    distinct?: SettingsScalarFieldEnum | SettingsScalarFieldEnum[]
  }

  /**
   * Settings findFirstOrThrow
   */
  export type SettingsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Settings
     */
    select?: SettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Settings
     */
    omit?: SettingsOmit<ExtArgs> | null
    /**
     * Filter, which Settings to fetch.
     */
    where?: SettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Settings to fetch.
     */
    orderBy?: SettingsOrderByWithRelationInput | SettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Settings.
     */
    cursor?: SettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Settings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Settings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Settings.
     */
    distinct?: SettingsScalarFieldEnum | SettingsScalarFieldEnum[]
  }

  /**
   * Settings findMany
   */
  export type SettingsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Settings
     */
    select?: SettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Settings
     */
    omit?: SettingsOmit<ExtArgs> | null
    /**
     * Filter, which Settings to fetch.
     */
    where?: SettingsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Settings to fetch.
     */
    orderBy?: SettingsOrderByWithRelationInput | SettingsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Settings.
     */
    cursor?: SettingsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Settings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Settings.
     */
    skip?: number
    distinct?: SettingsScalarFieldEnum | SettingsScalarFieldEnum[]
  }

  /**
   * Settings create
   */
  export type SettingsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Settings
     */
    select?: SettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Settings
     */
    omit?: SettingsOmit<ExtArgs> | null
    /**
     * The data needed to create a Settings.
     */
    data: XOR<SettingsCreateInput, SettingsUncheckedCreateInput>
  }

  /**
   * Settings createMany
   */
  export type SettingsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Settings.
     */
    data: SettingsCreateManyInput | SettingsCreateManyInput[]
  }

  /**
   * Settings update
   */
  export type SettingsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Settings
     */
    select?: SettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Settings
     */
    omit?: SettingsOmit<ExtArgs> | null
    /**
     * The data needed to update a Settings.
     */
    data: XOR<SettingsUpdateInput, SettingsUncheckedUpdateInput>
    /**
     * Choose, which Settings to update.
     */
    where: SettingsWhereUniqueInput
  }

  /**
   * Settings updateMany
   */
  export type SettingsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Settings.
     */
    data: XOR<SettingsUpdateManyMutationInput, SettingsUncheckedUpdateManyInput>
    /**
     * Filter which Settings to update
     */
    where?: SettingsWhereInput
    /**
     * Limit how many Settings to update.
     */
    limit?: number
  }

  /**
   * Settings upsert
   */
  export type SettingsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Settings
     */
    select?: SettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Settings
     */
    omit?: SettingsOmit<ExtArgs> | null
    /**
     * The filter to search for the Settings to update in case it exists.
     */
    where: SettingsWhereUniqueInput
    /**
     * In case the Settings found by the `where` argument doesn't exist, create a new Settings with this data.
     */
    create: XOR<SettingsCreateInput, SettingsUncheckedCreateInput>
    /**
     * In case the Settings was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SettingsUpdateInput, SettingsUncheckedUpdateInput>
  }

  /**
   * Settings delete
   */
  export type SettingsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Settings
     */
    select?: SettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Settings
     */
    omit?: SettingsOmit<ExtArgs> | null
    /**
     * Filter which Settings to delete.
     */
    where: SettingsWhereUniqueInput
  }

  /**
   * Settings deleteMany
   */
  export type SettingsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Settings to delete
     */
    where?: SettingsWhereInput
    /**
     * Limit how many Settings to delete.
     */
    limit?: number
  }

  /**
   * Settings findRaw
   */
  export type SettingsFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Settings aggregateRaw
   */
  export type SettingsAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Settings without action
   */
  export type SettingsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Settings
     */
    select?: SettingsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Settings
     */
    omit?: SettingsOmit<ExtArgs> | null
  }


  /**
   * Model ApprovedTour
   */

  export type AggregateApprovedTour = {
    _count: ApprovedTourCountAggregateOutputType | null
    _min: ApprovedTourMinAggregateOutputType | null
    _max: ApprovedTourMaxAggregateOutputType | null
  }

  export type ApprovedTourMinAggregateOutputType = {
    id: string | null
    tourId: string | null
    createdAt: Date | null
  }

  export type ApprovedTourMaxAggregateOutputType = {
    id: string | null
    tourId: string | null
    createdAt: Date | null
  }

  export type ApprovedTourCountAggregateOutputType = {
    id: number
    tourId: number
    createdAt: number
    _all: number
  }


  export type ApprovedTourMinAggregateInputType = {
    id?: true
    tourId?: true
    createdAt?: true
  }

  export type ApprovedTourMaxAggregateInputType = {
    id?: true
    tourId?: true
    createdAt?: true
  }

  export type ApprovedTourCountAggregateInputType = {
    id?: true
    tourId?: true
    createdAt?: true
    _all?: true
  }

  export type ApprovedTourAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ApprovedTour to aggregate.
     */
    where?: ApprovedTourWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApprovedTours to fetch.
     */
    orderBy?: ApprovedTourOrderByWithRelationInput | ApprovedTourOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ApprovedTourWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApprovedTours from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApprovedTours.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ApprovedTours
    **/
    _count?: true | ApprovedTourCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ApprovedTourMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ApprovedTourMaxAggregateInputType
  }

  export type GetApprovedTourAggregateType<T extends ApprovedTourAggregateArgs> = {
        [P in keyof T & keyof AggregateApprovedTour]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateApprovedTour[P]>
      : GetScalarType<T[P], AggregateApprovedTour[P]>
  }




  export type ApprovedTourGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApprovedTourWhereInput
    orderBy?: ApprovedTourOrderByWithAggregationInput | ApprovedTourOrderByWithAggregationInput[]
    by: ApprovedTourScalarFieldEnum[] | ApprovedTourScalarFieldEnum
    having?: ApprovedTourScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ApprovedTourCountAggregateInputType | true
    _min?: ApprovedTourMinAggregateInputType
    _max?: ApprovedTourMaxAggregateInputType
  }

  export type ApprovedTourGroupByOutputType = {
    id: string
    tourId: string
    createdAt: Date
    _count: ApprovedTourCountAggregateOutputType | null
    _min: ApprovedTourMinAggregateOutputType | null
    _max: ApprovedTourMaxAggregateOutputType | null
  }

  type GetApprovedTourGroupByPayload<T extends ApprovedTourGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ApprovedTourGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ApprovedTourGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ApprovedTourGroupByOutputType[P]>
            : GetScalarType<T[P], ApprovedTourGroupByOutputType[P]>
        }
      >
    >


  export type ApprovedTourSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tourId?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["approvedTour"]>



  export type ApprovedTourSelectScalar = {
    id?: boolean
    tourId?: boolean
    createdAt?: boolean
  }

  export type ApprovedTourOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "tourId" | "createdAt", ExtArgs["result"]["approvedTour"]>

  export type $ApprovedTourPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ApprovedTour"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tourId: string
      createdAt: Date
    }, ExtArgs["result"]["approvedTour"]>
    composites: {}
  }

  type ApprovedTourGetPayload<S extends boolean | null | undefined | ApprovedTourDefaultArgs> = $Result.GetResult<Prisma.$ApprovedTourPayload, S>

  type ApprovedTourCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ApprovedTourFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ApprovedTourCountAggregateInputType | true
    }

  export interface ApprovedTourDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ApprovedTour'], meta: { name: 'ApprovedTour' } }
    /**
     * Find zero or one ApprovedTour that matches the filter.
     * @param {ApprovedTourFindUniqueArgs} args - Arguments to find a ApprovedTour
     * @example
     * // Get one ApprovedTour
     * const approvedTour = await prisma.approvedTour.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ApprovedTourFindUniqueArgs>(args: SelectSubset<T, ApprovedTourFindUniqueArgs<ExtArgs>>): Prisma__ApprovedTourClient<$Result.GetResult<Prisma.$ApprovedTourPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ApprovedTour that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ApprovedTourFindUniqueOrThrowArgs} args - Arguments to find a ApprovedTour
     * @example
     * // Get one ApprovedTour
     * const approvedTour = await prisma.approvedTour.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ApprovedTourFindUniqueOrThrowArgs>(args: SelectSubset<T, ApprovedTourFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ApprovedTourClient<$Result.GetResult<Prisma.$ApprovedTourPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ApprovedTour that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApprovedTourFindFirstArgs} args - Arguments to find a ApprovedTour
     * @example
     * // Get one ApprovedTour
     * const approvedTour = await prisma.approvedTour.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ApprovedTourFindFirstArgs>(args?: SelectSubset<T, ApprovedTourFindFirstArgs<ExtArgs>>): Prisma__ApprovedTourClient<$Result.GetResult<Prisma.$ApprovedTourPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ApprovedTour that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApprovedTourFindFirstOrThrowArgs} args - Arguments to find a ApprovedTour
     * @example
     * // Get one ApprovedTour
     * const approvedTour = await prisma.approvedTour.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ApprovedTourFindFirstOrThrowArgs>(args?: SelectSubset<T, ApprovedTourFindFirstOrThrowArgs<ExtArgs>>): Prisma__ApprovedTourClient<$Result.GetResult<Prisma.$ApprovedTourPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ApprovedTours that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApprovedTourFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ApprovedTours
     * const approvedTours = await prisma.approvedTour.findMany()
     * 
     * // Get first 10 ApprovedTours
     * const approvedTours = await prisma.approvedTour.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const approvedTourWithIdOnly = await prisma.approvedTour.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ApprovedTourFindManyArgs>(args?: SelectSubset<T, ApprovedTourFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApprovedTourPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ApprovedTour.
     * @param {ApprovedTourCreateArgs} args - Arguments to create a ApprovedTour.
     * @example
     * // Create one ApprovedTour
     * const ApprovedTour = await prisma.approvedTour.create({
     *   data: {
     *     // ... data to create a ApprovedTour
     *   }
     * })
     * 
     */
    create<T extends ApprovedTourCreateArgs>(args: SelectSubset<T, ApprovedTourCreateArgs<ExtArgs>>): Prisma__ApprovedTourClient<$Result.GetResult<Prisma.$ApprovedTourPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ApprovedTours.
     * @param {ApprovedTourCreateManyArgs} args - Arguments to create many ApprovedTours.
     * @example
     * // Create many ApprovedTours
     * const approvedTour = await prisma.approvedTour.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ApprovedTourCreateManyArgs>(args?: SelectSubset<T, ApprovedTourCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ApprovedTour.
     * @param {ApprovedTourDeleteArgs} args - Arguments to delete one ApprovedTour.
     * @example
     * // Delete one ApprovedTour
     * const ApprovedTour = await prisma.approvedTour.delete({
     *   where: {
     *     // ... filter to delete one ApprovedTour
     *   }
     * })
     * 
     */
    delete<T extends ApprovedTourDeleteArgs>(args: SelectSubset<T, ApprovedTourDeleteArgs<ExtArgs>>): Prisma__ApprovedTourClient<$Result.GetResult<Prisma.$ApprovedTourPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ApprovedTour.
     * @param {ApprovedTourUpdateArgs} args - Arguments to update one ApprovedTour.
     * @example
     * // Update one ApprovedTour
     * const approvedTour = await prisma.approvedTour.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ApprovedTourUpdateArgs>(args: SelectSubset<T, ApprovedTourUpdateArgs<ExtArgs>>): Prisma__ApprovedTourClient<$Result.GetResult<Prisma.$ApprovedTourPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ApprovedTours.
     * @param {ApprovedTourDeleteManyArgs} args - Arguments to filter ApprovedTours to delete.
     * @example
     * // Delete a few ApprovedTours
     * const { count } = await prisma.approvedTour.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ApprovedTourDeleteManyArgs>(args?: SelectSubset<T, ApprovedTourDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ApprovedTours.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApprovedTourUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ApprovedTours
     * const approvedTour = await prisma.approvedTour.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ApprovedTourUpdateManyArgs>(args: SelectSubset<T, ApprovedTourUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ApprovedTour.
     * @param {ApprovedTourUpsertArgs} args - Arguments to update or create a ApprovedTour.
     * @example
     * // Update or create a ApprovedTour
     * const approvedTour = await prisma.approvedTour.upsert({
     *   create: {
     *     // ... data to create a ApprovedTour
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ApprovedTour we want to update
     *   }
     * })
     */
    upsert<T extends ApprovedTourUpsertArgs>(args: SelectSubset<T, ApprovedTourUpsertArgs<ExtArgs>>): Prisma__ApprovedTourClient<$Result.GetResult<Prisma.$ApprovedTourPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ApprovedTours that matches the filter.
     * @param {ApprovedTourFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const approvedTour = await prisma.approvedTour.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: ApprovedTourFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a ApprovedTour.
     * @param {ApprovedTourAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const approvedTour = await prisma.approvedTour.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: ApprovedTourAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of ApprovedTours.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApprovedTourCountArgs} args - Arguments to filter ApprovedTours to count.
     * @example
     * // Count the number of ApprovedTours
     * const count = await prisma.approvedTour.count({
     *   where: {
     *     // ... the filter for the ApprovedTours we want to count
     *   }
     * })
    **/
    count<T extends ApprovedTourCountArgs>(
      args?: Subset<T, ApprovedTourCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ApprovedTourCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ApprovedTour.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApprovedTourAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ApprovedTourAggregateArgs>(args: Subset<T, ApprovedTourAggregateArgs>): Prisma.PrismaPromise<GetApprovedTourAggregateType<T>>

    /**
     * Group by ApprovedTour.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApprovedTourGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ApprovedTourGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ApprovedTourGroupByArgs['orderBy'] }
        : { orderBy?: ApprovedTourGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ApprovedTourGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetApprovedTourGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ApprovedTour model
   */
  readonly fields: ApprovedTourFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ApprovedTour.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ApprovedTourClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ApprovedTour model
   */
  interface ApprovedTourFieldRefs {
    readonly id: FieldRef<"ApprovedTour", 'String'>
    readonly tourId: FieldRef<"ApprovedTour", 'String'>
    readonly createdAt: FieldRef<"ApprovedTour", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ApprovedTour findUnique
   */
  export type ApprovedTourFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApprovedTour
     */
    select?: ApprovedTourSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApprovedTour
     */
    omit?: ApprovedTourOmit<ExtArgs> | null
    /**
     * Filter, which ApprovedTour to fetch.
     */
    where: ApprovedTourWhereUniqueInput
  }

  /**
   * ApprovedTour findUniqueOrThrow
   */
  export type ApprovedTourFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApprovedTour
     */
    select?: ApprovedTourSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApprovedTour
     */
    omit?: ApprovedTourOmit<ExtArgs> | null
    /**
     * Filter, which ApprovedTour to fetch.
     */
    where: ApprovedTourWhereUniqueInput
  }

  /**
   * ApprovedTour findFirst
   */
  export type ApprovedTourFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApprovedTour
     */
    select?: ApprovedTourSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApprovedTour
     */
    omit?: ApprovedTourOmit<ExtArgs> | null
    /**
     * Filter, which ApprovedTour to fetch.
     */
    where?: ApprovedTourWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApprovedTours to fetch.
     */
    orderBy?: ApprovedTourOrderByWithRelationInput | ApprovedTourOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ApprovedTours.
     */
    cursor?: ApprovedTourWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApprovedTours from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApprovedTours.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ApprovedTours.
     */
    distinct?: ApprovedTourScalarFieldEnum | ApprovedTourScalarFieldEnum[]
  }

  /**
   * ApprovedTour findFirstOrThrow
   */
  export type ApprovedTourFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApprovedTour
     */
    select?: ApprovedTourSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApprovedTour
     */
    omit?: ApprovedTourOmit<ExtArgs> | null
    /**
     * Filter, which ApprovedTour to fetch.
     */
    where?: ApprovedTourWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApprovedTours to fetch.
     */
    orderBy?: ApprovedTourOrderByWithRelationInput | ApprovedTourOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ApprovedTours.
     */
    cursor?: ApprovedTourWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApprovedTours from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApprovedTours.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ApprovedTours.
     */
    distinct?: ApprovedTourScalarFieldEnum | ApprovedTourScalarFieldEnum[]
  }

  /**
   * ApprovedTour findMany
   */
  export type ApprovedTourFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApprovedTour
     */
    select?: ApprovedTourSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApprovedTour
     */
    omit?: ApprovedTourOmit<ExtArgs> | null
    /**
     * Filter, which ApprovedTours to fetch.
     */
    where?: ApprovedTourWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApprovedTours to fetch.
     */
    orderBy?: ApprovedTourOrderByWithRelationInput | ApprovedTourOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ApprovedTours.
     */
    cursor?: ApprovedTourWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApprovedTours from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApprovedTours.
     */
    skip?: number
    distinct?: ApprovedTourScalarFieldEnum | ApprovedTourScalarFieldEnum[]
  }

  /**
   * ApprovedTour create
   */
  export type ApprovedTourCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApprovedTour
     */
    select?: ApprovedTourSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApprovedTour
     */
    omit?: ApprovedTourOmit<ExtArgs> | null
    /**
     * The data needed to create a ApprovedTour.
     */
    data: XOR<ApprovedTourCreateInput, ApprovedTourUncheckedCreateInput>
  }

  /**
   * ApprovedTour createMany
   */
  export type ApprovedTourCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ApprovedTours.
     */
    data: ApprovedTourCreateManyInput | ApprovedTourCreateManyInput[]
  }

  /**
   * ApprovedTour update
   */
  export type ApprovedTourUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApprovedTour
     */
    select?: ApprovedTourSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApprovedTour
     */
    omit?: ApprovedTourOmit<ExtArgs> | null
    /**
     * The data needed to update a ApprovedTour.
     */
    data: XOR<ApprovedTourUpdateInput, ApprovedTourUncheckedUpdateInput>
    /**
     * Choose, which ApprovedTour to update.
     */
    where: ApprovedTourWhereUniqueInput
  }

  /**
   * ApprovedTour updateMany
   */
  export type ApprovedTourUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ApprovedTours.
     */
    data: XOR<ApprovedTourUpdateManyMutationInput, ApprovedTourUncheckedUpdateManyInput>
    /**
     * Filter which ApprovedTours to update
     */
    where?: ApprovedTourWhereInput
    /**
     * Limit how many ApprovedTours to update.
     */
    limit?: number
  }

  /**
   * ApprovedTour upsert
   */
  export type ApprovedTourUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApprovedTour
     */
    select?: ApprovedTourSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApprovedTour
     */
    omit?: ApprovedTourOmit<ExtArgs> | null
    /**
     * The filter to search for the ApprovedTour to update in case it exists.
     */
    where: ApprovedTourWhereUniqueInput
    /**
     * In case the ApprovedTour found by the `where` argument doesn't exist, create a new ApprovedTour with this data.
     */
    create: XOR<ApprovedTourCreateInput, ApprovedTourUncheckedCreateInput>
    /**
     * In case the ApprovedTour was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ApprovedTourUpdateInput, ApprovedTourUncheckedUpdateInput>
  }

  /**
   * ApprovedTour delete
   */
  export type ApprovedTourDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApprovedTour
     */
    select?: ApprovedTourSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApprovedTour
     */
    omit?: ApprovedTourOmit<ExtArgs> | null
    /**
     * Filter which ApprovedTour to delete.
     */
    where: ApprovedTourWhereUniqueInput
  }

  /**
   * ApprovedTour deleteMany
   */
  export type ApprovedTourDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ApprovedTours to delete
     */
    where?: ApprovedTourWhereInput
    /**
     * Limit how many ApprovedTours to delete.
     */
    limit?: number
  }

  /**
   * ApprovedTour findRaw
   */
  export type ApprovedTourFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * ApprovedTour aggregateRaw
   */
  export type ApprovedTourAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * ApprovedTour without action
   */
  export type ApprovedTourDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApprovedTour
     */
    select?: ApprovedTourSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ApprovedTour
     */
    omit?: ApprovedTourOmit<ExtArgs> | null
  }


  /**
   * Model Complaint
   */

  export type AggregateComplaint = {
    _count: ComplaintCountAggregateOutputType | null
    _avg: ComplaintAvgAggregateOutputType | null
    _sum: ComplaintSumAggregateOutputType | null
    _min: ComplaintMinAggregateOutputType | null
    _max: ComplaintMaxAggregateOutputType | null
  }

  export type ComplaintAvgAggregateOutputType = {
    refundAmount: number | null
    rating: number | null
  }

  export type ComplaintSumAggregateOutputType = {
    refundAmount: number | null
    rating: number | null
  }

  export type ComplaintMinAggregateOutputType = {
    id: string | null
    userId: string | null
    subject: string | null
    category: $Enums.ComplaintCategory | null
    priority: $Enums.ComplaintPriority | null
    status: $Enums.ComplaintStatus | null
    bookingId: string | null
    tourId: string | null
    tourName: string | null
    description: string | null
    expectedOutcome: string | null
    refundAmount: number | null
    contactEmail: string | null
    contactPhone: string | null
    preferredContactMethod: string | null
    adminResponse: string | null
    resolvedAt: Date | null
    assignedTo: string | null
    rating: number | null
    ratingComment: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ComplaintMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    subject: string | null
    category: $Enums.ComplaintCategory | null
    priority: $Enums.ComplaintPriority | null
    status: $Enums.ComplaintStatus | null
    bookingId: string | null
    tourId: string | null
    tourName: string | null
    description: string | null
    expectedOutcome: string | null
    refundAmount: number | null
    contactEmail: string | null
    contactPhone: string | null
    preferredContactMethod: string | null
    adminResponse: string | null
    resolvedAt: Date | null
    assignedTo: string | null
    rating: number | null
    ratingComment: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ComplaintCountAggregateOutputType = {
    id: number
    userId: number
    subject: number
    category: number
    priority: number
    status: number
    bookingId: number
    tourId: number
    tourName: number
    description: number
    expectedOutcome: number
    refundAmount: number
    contactEmail: number
    contactPhone: number
    preferredContactMethod: number
    attachments: number
    adminResponse: number
    resolvedAt: number
    assignedTo: number
    rating: number
    ratingComment: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ComplaintAvgAggregateInputType = {
    refundAmount?: true
    rating?: true
  }

  export type ComplaintSumAggregateInputType = {
    refundAmount?: true
    rating?: true
  }

  export type ComplaintMinAggregateInputType = {
    id?: true
    userId?: true
    subject?: true
    category?: true
    priority?: true
    status?: true
    bookingId?: true
    tourId?: true
    tourName?: true
    description?: true
    expectedOutcome?: true
    refundAmount?: true
    contactEmail?: true
    contactPhone?: true
    preferredContactMethod?: true
    adminResponse?: true
    resolvedAt?: true
    assignedTo?: true
    rating?: true
    ratingComment?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ComplaintMaxAggregateInputType = {
    id?: true
    userId?: true
    subject?: true
    category?: true
    priority?: true
    status?: true
    bookingId?: true
    tourId?: true
    tourName?: true
    description?: true
    expectedOutcome?: true
    refundAmount?: true
    contactEmail?: true
    contactPhone?: true
    preferredContactMethod?: true
    adminResponse?: true
    resolvedAt?: true
    assignedTo?: true
    rating?: true
    ratingComment?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ComplaintCountAggregateInputType = {
    id?: true
    userId?: true
    subject?: true
    category?: true
    priority?: true
    status?: true
    bookingId?: true
    tourId?: true
    tourName?: true
    description?: true
    expectedOutcome?: true
    refundAmount?: true
    contactEmail?: true
    contactPhone?: true
    preferredContactMethod?: true
    attachments?: true
    adminResponse?: true
    resolvedAt?: true
    assignedTo?: true
    rating?: true
    ratingComment?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ComplaintAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Complaint to aggregate.
     */
    where?: ComplaintWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Complaints to fetch.
     */
    orderBy?: ComplaintOrderByWithRelationInput | ComplaintOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ComplaintWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Complaints from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Complaints.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Complaints
    **/
    _count?: true | ComplaintCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ComplaintAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ComplaintSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ComplaintMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ComplaintMaxAggregateInputType
  }

  export type GetComplaintAggregateType<T extends ComplaintAggregateArgs> = {
        [P in keyof T & keyof AggregateComplaint]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComplaint[P]>
      : GetScalarType<T[P], AggregateComplaint[P]>
  }




  export type ComplaintGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ComplaintWhereInput
    orderBy?: ComplaintOrderByWithAggregationInput | ComplaintOrderByWithAggregationInput[]
    by: ComplaintScalarFieldEnum[] | ComplaintScalarFieldEnum
    having?: ComplaintScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ComplaintCountAggregateInputType | true
    _avg?: ComplaintAvgAggregateInputType
    _sum?: ComplaintSumAggregateInputType
    _min?: ComplaintMinAggregateInputType
    _max?: ComplaintMaxAggregateInputType
  }

  export type ComplaintGroupByOutputType = {
    id: string
    userId: string
    subject: string
    category: $Enums.ComplaintCategory
    priority: $Enums.ComplaintPriority
    status: $Enums.ComplaintStatus
    bookingId: string | null
    tourId: string | null
    tourName: string | null
    description: string
    expectedOutcome: string | null
    refundAmount: number | null
    contactEmail: string
    contactPhone: string
    preferredContactMethod: string | null
    attachments: JsonValue | null
    adminResponse: string | null
    resolvedAt: Date | null
    assignedTo: string | null
    rating: number | null
    ratingComment: string | null
    createdAt: Date
    updatedAt: Date
    _count: ComplaintCountAggregateOutputType | null
    _avg: ComplaintAvgAggregateOutputType | null
    _sum: ComplaintSumAggregateOutputType | null
    _min: ComplaintMinAggregateOutputType | null
    _max: ComplaintMaxAggregateOutputType | null
  }

  type GetComplaintGroupByPayload<T extends ComplaintGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ComplaintGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ComplaintGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ComplaintGroupByOutputType[P]>
            : GetScalarType<T[P], ComplaintGroupByOutputType[P]>
        }
      >
    >


  export type ComplaintSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    subject?: boolean
    category?: boolean
    priority?: boolean
    status?: boolean
    bookingId?: boolean
    tourId?: boolean
    tourName?: boolean
    description?: boolean
    expectedOutcome?: boolean
    refundAmount?: boolean
    contactEmail?: boolean
    contactPhone?: boolean
    preferredContactMethod?: boolean
    attachments?: boolean
    adminResponse?: boolean
    resolvedAt?: boolean
    assignedTo?: boolean
    rating?: boolean
    ratingComment?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    booking?: boolean | Complaint$bookingArgs<ExtArgs>
    messages?: boolean | Complaint$messagesArgs<ExtArgs>
    _count?: boolean | ComplaintCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["complaint"]>



  export type ComplaintSelectScalar = {
    id?: boolean
    userId?: boolean
    subject?: boolean
    category?: boolean
    priority?: boolean
    status?: boolean
    bookingId?: boolean
    tourId?: boolean
    tourName?: boolean
    description?: boolean
    expectedOutcome?: boolean
    refundAmount?: boolean
    contactEmail?: boolean
    contactPhone?: boolean
    preferredContactMethod?: boolean
    attachments?: boolean
    adminResponse?: boolean
    resolvedAt?: boolean
    assignedTo?: boolean
    rating?: boolean
    ratingComment?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ComplaintOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "subject" | "category" | "priority" | "status" | "bookingId" | "tourId" | "tourName" | "description" | "expectedOutcome" | "refundAmount" | "contactEmail" | "contactPhone" | "preferredContactMethod" | "attachments" | "adminResponse" | "resolvedAt" | "assignedTo" | "rating" | "ratingComment" | "createdAt" | "updatedAt", ExtArgs["result"]["complaint"]>
  export type ComplaintInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    booking?: boolean | Complaint$bookingArgs<ExtArgs>
    messages?: boolean | Complaint$messagesArgs<ExtArgs>
    _count?: boolean | ComplaintCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ComplaintPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Complaint"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      booking: Prisma.$BookingPayload<ExtArgs> | null
      messages: Prisma.$ComplaintMessagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      subject: string
      category: $Enums.ComplaintCategory
      priority: $Enums.ComplaintPriority
      status: $Enums.ComplaintStatus
      bookingId: string | null
      tourId: string | null
      tourName: string | null
      description: string
      expectedOutcome: string | null
      refundAmount: number | null
      contactEmail: string
      contactPhone: string
      preferredContactMethod: string | null
      attachments: Prisma.JsonValue | null
      adminResponse: string | null
      resolvedAt: Date | null
      assignedTo: string | null
      rating: number | null
      ratingComment: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["complaint"]>
    composites: {}
  }

  type ComplaintGetPayload<S extends boolean | null | undefined | ComplaintDefaultArgs> = $Result.GetResult<Prisma.$ComplaintPayload, S>

  type ComplaintCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ComplaintFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ComplaintCountAggregateInputType | true
    }

  export interface ComplaintDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Complaint'], meta: { name: 'Complaint' } }
    /**
     * Find zero or one Complaint that matches the filter.
     * @param {ComplaintFindUniqueArgs} args - Arguments to find a Complaint
     * @example
     * // Get one Complaint
     * const complaint = await prisma.complaint.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ComplaintFindUniqueArgs>(args: SelectSubset<T, ComplaintFindUniqueArgs<ExtArgs>>): Prisma__ComplaintClient<$Result.GetResult<Prisma.$ComplaintPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Complaint that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ComplaintFindUniqueOrThrowArgs} args - Arguments to find a Complaint
     * @example
     * // Get one Complaint
     * const complaint = await prisma.complaint.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ComplaintFindUniqueOrThrowArgs>(args: SelectSubset<T, ComplaintFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ComplaintClient<$Result.GetResult<Prisma.$ComplaintPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Complaint that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComplaintFindFirstArgs} args - Arguments to find a Complaint
     * @example
     * // Get one Complaint
     * const complaint = await prisma.complaint.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ComplaintFindFirstArgs>(args?: SelectSubset<T, ComplaintFindFirstArgs<ExtArgs>>): Prisma__ComplaintClient<$Result.GetResult<Prisma.$ComplaintPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Complaint that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComplaintFindFirstOrThrowArgs} args - Arguments to find a Complaint
     * @example
     * // Get one Complaint
     * const complaint = await prisma.complaint.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ComplaintFindFirstOrThrowArgs>(args?: SelectSubset<T, ComplaintFindFirstOrThrowArgs<ExtArgs>>): Prisma__ComplaintClient<$Result.GetResult<Prisma.$ComplaintPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Complaints that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComplaintFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Complaints
     * const complaints = await prisma.complaint.findMany()
     * 
     * // Get first 10 Complaints
     * const complaints = await prisma.complaint.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const complaintWithIdOnly = await prisma.complaint.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ComplaintFindManyArgs>(args?: SelectSubset<T, ComplaintFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComplaintPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Complaint.
     * @param {ComplaintCreateArgs} args - Arguments to create a Complaint.
     * @example
     * // Create one Complaint
     * const Complaint = await prisma.complaint.create({
     *   data: {
     *     // ... data to create a Complaint
     *   }
     * })
     * 
     */
    create<T extends ComplaintCreateArgs>(args: SelectSubset<T, ComplaintCreateArgs<ExtArgs>>): Prisma__ComplaintClient<$Result.GetResult<Prisma.$ComplaintPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Complaints.
     * @param {ComplaintCreateManyArgs} args - Arguments to create many Complaints.
     * @example
     * // Create many Complaints
     * const complaint = await prisma.complaint.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ComplaintCreateManyArgs>(args?: SelectSubset<T, ComplaintCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Complaint.
     * @param {ComplaintDeleteArgs} args - Arguments to delete one Complaint.
     * @example
     * // Delete one Complaint
     * const Complaint = await prisma.complaint.delete({
     *   where: {
     *     // ... filter to delete one Complaint
     *   }
     * })
     * 
     */
    delete<T extends ComplaintDeleteArgs>(args: SelectSubset<T, ComplaintDeleteArgs<ExtArgs>>): Prisma__ComplaintClient<$Result.GetResult<Prisma.$ComplaintPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Complaint.
     * @param {ComplaintUpdateArgs} args - Arguments to update one Complaint.
     * @example
     * // Update one Complaint
     * const complaint = await prisma.complaint.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ComplaintUpdateArgs>(args: SelectSubset<T, ComplaintUpdateArgs<ExtArgs>>): Prisma__ComplaintClient<$Result.GetResult<Prisma.$ComplaintPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Complaints.
     * @param {ComplaintDeleteManyArgs} args - Arguments to filter Complaints to delete.
     * @example
     * // Delete a few Complaints
     * const { count } = await prisma.complaint.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ComplaintDeleteManyArgs>(args?: SelectSubset<T, ComplaintDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Complaints.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComplaintUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Complaints
     * const complaint = await prisma.complaint.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ComplaintUpdateManyArgs>(args: SelectSubset<T, ComplaintUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Complaint.
     * @param {ComplaintUpsertArgs} args - Arguments to update or create a Complaint.
     * @example
     * // Update or create a Complaint
     * const complaint = await prisma.complaint.upsert({
     *   create: {
     *     // ... data to create a Complaint
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Complaint we want to update
     *   }
     * })
     */
    upsert<T extends ComplaintUpsertArgs>(args: SelectSubset<T, ComplaintUpsertArgs<ExtArgs>>): Prisma__ComplaintClient<$Result.GetResult<Prisma.$ComplaintPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Complaints that matches the filter.
     * @param {ComplaintFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const complaint = await prisma.complaint.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: ComplaintFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Complaint.
     * @param {ComplaintAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const complaint = await prisma.complaint.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: ComplaintAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Complaints.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComplaintCountArgs} args - Arguments to filter Complaints to count.
     * @example
     * // Count the number of Complaints
     * const count = await prisma.complaint.count({
     *   where: {
     *     // ... the filter for the Complaints we want to count
     *   }
     * })
    **/
    count<T extends ComplaintCountArgs>(
      args?: Subset<T, ComplaintCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ComplaintCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Complaint.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComplaintAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ComplaintAggregateArgs>(args: Subset<T, ComplaintAggregateArgs>): Prisma.PrismaPromise<GetComplaintAggregateType<T>>

    /**
     * Group by Complaint.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComplaintGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ComplaintGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ComplaintGroupByArgs['orderBy'] }
        : { orderBy?: ComplaintGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ComplaintGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetComplaintGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Complaint model
   */
  readonly fields: ComplaintFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Complaint.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ComplaintClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    booking<T extends Complaint$bookingArgs<ExtArgs> = {}>(args?: Subset<T, Complaint$bookingArgs<ExtArgs>>): Prisma__BookingClient<$Result.GetResult<Prisma.$BookingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    messages<T extends Complaint$messagesArgs<ExtArgs> = {}>(args?: Subset<T, Complaint$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComplaintMessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Complaint model
   */
  interface ComplaintFieldRefs {
    readonly id: FieldRef<"Complaint", 'String'>
    readonly userId: FieldRef<"Complaint", 'String'>
    readonly subject: FieldRef<"Complaint", 'String'>
    readonly category: FieldRef<"Complaint", 'ComplaintCategory'>
    readonly priority: FieldRef<"Complaint", 'ComplaintPriority'>
    readonly status: FieldRef<"Complaint", 'ComplaintStatus'>
    readonly bookingId: FieldRef<"Complaint", 'String'>
    readonly tourId: FieldRef<"Complaint", 'String'>
    readonly tourName: FieldRef<"Complaint", 'String'>
    readonly description: FieldRef<"Complaint", 'String'>
    readonly expectedOutcome: FieldRef<"Complaint", 'String'>
    readonly refundAmount: FieldRef<"Complaint", 'Float'>
    readonly contactEmail: FieldRef<"Complaint", 'String'>
    readonly contactPhone: FieldRef<"Complaint", 'String'>
    readonly preferredContactMethod: FieldRef<"Complaint", 'String'>
    readonly attachments: FieldRef<"Complaint", 'Json'>
    readonly adminResponse: FieldRef<"Complaint", 'String'>
    readonly resolvedAt: FieldRef<"Complaint", 'DateTime'>
    readonly assignedTo: FieldRef<"Complaint", 'String'>
    readonly rating: FieldRef<"Complaint", 'Int'>
    readonly ratingComment: FieldRef<"Complaint", 'String'>
    readonly createdAt: FieldRef<"Complaint", 'DateTime'>
    readonly updatedAt: FieldRef<"Complaint", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Complaint findUnique
   */
  export type ComplaintFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Complaint
     */
    select?: ComplaintSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Complaint
     */
    omit?: ComplaintOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintInclude<ExtArgs> | null
    /**
     * Filter, which Complaint to fetch.
     */
    where: ComplaintWhereUniqueInput
  }

  /**
   * Complaint findUniqueOrThrow
   */
  export type ComplaintFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Complaint
     */
    select?: ComplaintSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Complaint
     */
    omit?: ComplaintOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintInclude<ExtArgs> | null
    /**
     * Filter, which Complaint to fetch.
     */
    where: ComplaintWhereUniqueInput
  }

  /**
   * Complaint findFirst
   */
  export type ComplaintFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Complaint
     */
    select?: ComplaintSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Complaint
     */
    omit?: ComplaintOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintInclude<ExtArgs> | null
    /**
     * Filter, which Complaint to fetch.
     */
    where?: ComplaintWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Complaints to fetch.
     */
    orderBy?: ComplaintOrderByWithRelationInput | ComplaintOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Complaints.
     */
    cursor?: ComplaintWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Complaints from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Complaints.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Complaints.
     */
    distinct?: ComplaintScalarFieldEnum | ComplaintScalarFieldEnum[]
  }

  /**
   * Complaint findFirstOrThrow
   */
  export type ComplaintFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Complaint
     */
    select?: ComplaintSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Complaint
     */
    omit?: ComplaintOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintInclude<ExtArgs> | null
    /**
     * Filter, which Complaint to fetch.
     */
    where?: ComplaintWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Complaints to fetch.
     */
    orderBy?: ComplaintOrderByWithRelationInput | ComplaintOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Complaints.
     */
    cursor?: ComplaintWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Complaints from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Complaints.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Complaints.
     */
    distinct?: ComplaintScalarFieldEnum | ComplaintScalarFieldEnum[]
  }

  /**
   * Complaint findMany
   */
  export type ComplaintFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Complaint
     */
    select?: ComplaintSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Complaint
     */
    omit?: ComplaintOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintInclude<ExtArgs> | null
    /**
     * Filter, which Complaints to fetch.
     */
    where?: ComplaintWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Complaints to fetch.
     */
    orderBy?: ComplaintOrderByWithRelationInput | ComplaintOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Complaints.
     */
    cursor?: ComplaintWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Complaints from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Complaints.
     */
    skip?: number
    distinct?: ComplaintScalarFieldEnum | ComplaintScalarFieldEnum[]
  }

  /**
   * Complaint create
   */
  export type ComplaintCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Complaint
     */
    select?: ComplaintSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Complaint
     */
    omit?: ComplaintOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintInclude<ExtArgs> | null
    /**
     * The data needed to create a Complaint.
     */
    data: XOR<ComplaintCreateInput, ComplaintUncheckedCreateInput>
  }

  /**
   * Complaint createMany
   */
  export type ComplaintCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Complaints.
     */
    data: ComplaintCreateManyInput | ComplaintCreateManyInput[]
  }

  /**
   * Complaint update
   */
  export type ComplaintUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Complaint
     */
    select?: ComplaintSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Complaint
     */
    omit?: ComplaintOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintInclude<ExtArgs> | null
    /**
     * The data needed to update a Complaint.
     */
    data: XOR<ComplaintUpdateInput, ComplaintUncheckedUpdateInput>
    /**
     * Choose, which Complaint to update.
     */
    where: ComplaintWhereUniqueInput
  }

  /**
   * Complaint updateMany
   */
  export type ComplaintUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Complaints.
     */
    data: XOR<ComplaintUpdateManyMutationInput, ComplaintUncheckedUpdateManyInput>
    /**
     * Filter which Complaints to update
     */
    where?: ComplaintWhereInput
    /**
     * Limit how many Complaints to update.
     */
    limit?: number
  }

  /**
   * Complaint upsert
   */
  export type ComplaintUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Complaint
     */
    select?: ComplaintSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Complaint
     */
    omit?: ComplaintOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintInclude<ExtArgs> | null
    /**
     * The filter to search for the Complaint to update in case it exists.
     */
    where: ComplaintWhereUniqueInput
    /**
     * In case the Complaint found by the `where` argument doesn't exist, create a new Complaint with this data.
     */
    create: XOR<ComplaintCreateInput, ComplaintUncheckedCreateInput>
    /**
     * In case the Complaint was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ComplaintUpdateInput, ComplaintUncheckedUpdateInput>
  }

  /**
   * Complaint delete
   */
  export type ComplaintDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Complaint
     */
    select?: ComplaintSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Complaint
     */
    omit?: ComplaintOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintInclude<ExtArgs> | null
    /**
     * Filter which Complaint to delete.
     */
    where: ComplaintWhereUniqueInput
  }

  /**
   * Complaint deleteMany
   */
  export type ComplaintDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Complaints to delete
     */
    where?: ComplaintWhereInput
    /**
     * Limit how many Complaints to delete.
     */
    limit?: number
  }

  /**
   * Complaint findRaw
   */
  export type ComplaintFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Complaint aggregateRaw
   */
  export type ComplaintAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Complaint.booking
   */
  export type Complaint$bookingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Booking
     */
    select?: BookingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Booking
     */
    omit?: BookingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookingInclude<ExtArgs> | null
    where?: BookingWhereInput
  }

  /**
   * Complaint.messages
   */
  export type Complaint$messagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComplaintMessage
     */
    select?: ComplaintMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ComplaintMessage
     */
    omit?: ComplaintMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintMessageInclude<ExtArgs> | null
    where?: ComplaintMessageWhereInput
    orderBy?: ComplaintMessageOrderByWithRelationInput | ComplaintMessageOrderByWithRelationInput[]
    cursor?: ComplaintMessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ComplaintMessageScalarFieldEnum | ComplaintMessageScalarFieldEnum[]
  }

  /**
   * Complaint without action
   */
  export type ComplaintDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Complaint
     */
    select?: ComplaintSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Complaint
     */
    omit?: ComplaintOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintInclude<ExtArgs> | null
  }


  /**
   * Model ComplaintMessage
   */

  export type AggregateComplaintMessage = {
    _count: ComplaintMessageCountAggregateOutputType | null
    _min: ComplaintMessageMinAggregateOutputType | null
    _max: ComplaintMessageMaxAggregateOutputType | null
  }

  export type ComplaintMessageMinAggregateOutputType = {
    id: string | null
    complaintId: string | null
    senderType: string | null
    senderId: string | null
    message: string | null
    isRead: boolean | null
    createdAt: Date | null
  }

  export type ComplaintMessageMaxAggregateOutputType = {
    id: string | null
    complaintId: string | null
    senderType: string | null
    senderId: string | null
    message: string | null
    isRead: boolean | null
    createdAt: Date | null
  }

  export type ComplaintMessageCountAggregateOutputType = {
    id: number
    complaintId: number
    senderType: number
    senderId: number
    message: number
    attachments: number
    isRead: number
    createdAt: number
    _all: number
  }


  export type ComplaintMessageMinAggregateInputType = {
    id?: true
    complaintId?: true
    senderType?: true
    senderId?: true
    message?: true
    isRead?: true
    createdAt?: true
  }

  export type ComplaintMessageMaxAggregateInputType = {
    id?: true
    complaintId?: true
    senderType?: true
    senderId?: true
    message?: true
    isRead?: true
    createdAt?: true
  }

  export type ComplaintMessageCountAggregateInputType = {
    id?: true
    complaintId?: true
    senderType?: true
    senderId?: true
    message?: true
    attachments?: true
    isRead?: true
    createdAt?: true
    _all?: true
  }

  export type ComplaintMessageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ComplaintMessage to aggregate.
     */
    where?: ComplaintMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ComplaintMessages to fetch.
     */
    orderBy?: ComplaintMessageOrderByWithRelationInput | ComplaintMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ComplaintMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ComplaintMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ComplaintMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ComplaintMessages
    **/
    _count?: true | ComplaintMessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ComplaintMessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ComplaintMessageMaxAggregateInputType
  }

  export type GetComplaintMessageAggregateType<T extends ComplaintMessageAggregateArgs> = {
        [P in keyof T & keyof AggregateComplaintMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComplaintMessage[P]>
      : GetScalarType<T[P], AggregateComplaintMessage[P]>
  }




  export type ComplaintMessageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ComplaintMessageWhereInput
    orderBy?: ComplaintMessageOrderByWithAggregationInput | ComplaintMessageOrderByWithAggregationInput[]
    by: ComplaintMessageScalarFieldEnum[] | ComplaintMessageScalarFieldEnum
    having?: ComplaintMessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ComplaintMessageCountAggregateInputType | true
    _min?: ComplaintMessageMinAggregateInputType
    _max?: ComplaintMessageMaxAggregateInputType
  }

  export type ComplaintMessageGroupByOutputType = {
    id: string
    complaintId: string
    senderType: string
    senderId: string
    message: string
    attachments: JsonValue | null
    isRead: boolean
    createdAt: Date
    _count: ComplaintMessageCountAggregateOutputType | null
    _min: ComplaintMessageMinAggregateOutputType | null
    _max: ComplaintMessageMaxAggregateOutputType | null
  }

  type GetComplaintMessageGroupByPayload<T extends ComplaintMessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ComplaintMessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ComplaintMessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ComplaintMessageGroupByOutputType[P]>
            : GetScalarType<T[P], ComplaintMessageGroupByOutputType[P]>
        }
      >
    >


  export type ComplaintMessageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    complaintId?: boolean
    senderType?: boolean
    senderId?: boolean
    message?: boolean
    attachments?: boolean
    isRead?: boolean
    createdAt?: boolean
    complaint?: boolean | ComplaintDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["complaintMessage"]>



  export type ComplaintMessageSelectScalar = {
    id?: boolean
    complaintId?: boolean
    senderType?: boolean
    senderId?: boolean
    message?: boolean
    attachments?: boolean
    isRead?: boolean
    createdAt?: boolean
  }

  export type ComplaintMessageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "complaintId" | "senderType" | "senderId" | "message" | "attachments" | "isRead" | "createdAt", ExtArgs["result"]["complaintMessage"]>
  export type ComplaintMessageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    complaint?: boolean | ComplaintDefaultArgs<ExtArgs>
  }

  export type $ComplaintMessagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ComplaintMessage"
    objects: {
      complaint: Prisma.$ComplaintPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      complaintId: string
      senderType: string
      senderId: string
      message: string
      attachments: Prisma.JsonValue | null
      isRead: boolean
      createdAt: Date
    }, ExtArgs["result"]["complaintMessage"]>
    composites: {}
  }

  type ComplaintMessageGetPayload<S extends boolean | null | undefined | ComplaintMessageDefaultArgs> = $Result.GetResult<Prisma.$ComplaintMessagePayload, S>

  type ComplaintMessageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ComplaintMessageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ComplaintMessageCountAggregateInputType | true
    }

  export interface ComplaintMessageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ComplaintMessage'], meta: { name: 'ComplaintMessage' } }
    /**
     * Find zero or one ComplaintMessage that matches the filter.
     * @param {ComplaintMessageFindUniqueArgs} args - Arguments to find a ComplaintMessage
     * @example
     * // Get one ComplaintMessage
     * const complaintMessage = await prisma.complaintMessage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ComplaintMessageFindUniqueArgs>(args: SelectSubset<T, ComplaintMessageFindUniqueArgs<ExtArgs>>): Prisma__ComplaintMessageClient<$Result.GetResult<Prisma.$ComplaintMessagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ComplaintMessage that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ComplaintMessageFindUniqueOrThrowArgs} args - Arguments to find a ComplaintMessage
     * @example
     * // Get one ComplaintMessage
     * const complaintMessage = await prisma.complaintMessage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ComplaintMessageFindUniqueOrThrowArgs>(args: SelectSubset<T, ComplaintMessageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ComplaintMessageClient<$Result.GetResult<Prisma.$ComplaintMessagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ComplaintMessage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComplaintMessageFindFirstArgs} args - Arguments to find a ComplaintMessage
     * @example
     * // Get one ComplaintMessage
     * const complaintMessage = await prisma.complaintMessage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ComplaintMessageFindFirstArgs>(args?: SelectSubset<T, ComplaintMessageFindFirstArgs<ExtArgs>>): Prisma__ComplaintMessageClient<$Result.GetResult<Prisma.$ComplaintMessagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ComplaintMessage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComplaintMessageFindFirstOrThrowArgs} args - Arguments to find a ComplaintMessage
     * @example
     * // Get one ComplaintMessage
     * const complaintMessage = await prisma.complaintMessage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ComplaintMessageFindFirstOrThrowArgs>(args?: SelectSubset<T, ComplaintMessageFindFirstOrThrowArgs<ExtArgs>>): Prisma__ComplaintMessageClient<$Result.GetResult<Prisma.$ComplaintMessagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ComplaintMessages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComplaintMessageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ComplaintMessages
     * const complaintMessages = await prisma.complaintMessage.findMany()
     * 
     * // Get first 10 ComplaintMessages
     * const complaintMessages = await prisma.complaintMessage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const complaintMessageWithIdOnly = await prisma.complaintMessage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ComplaintMessageFindManyArgs>(args?: SelectSubset<T, ComplaintMessageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ComplaintMessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ComplaintMessage.
     * @param {ComplaintMessageCreateArgs} args - Arguments to create a ComplaintMessage.
     * @example
     * // Create one ComplaintMessage
     * const ComplaintMessage = await prisma.complaintMessage.create({
     *   data: {
     *     // ... data to create a ComplaintMessage
     *   }
     * })
     * 
     */
    create<T extends ComplaintMessageCreateArgs>(args: SelectSubset<T, ComplaintMessageCreateArgs<ExtArgs>>): Prisma__ComplaintMessageClient<$Result.GetResult<Prisma.$ComplaintMessagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ComplaintMessages.
     * @param {ComplaintMessageCreateManyArgs} args - Arguments to create many ComplaintMessages.
     * @example
     * // Create many ComplaintMessages
     * const complaintMessage = await prisma.complaintMessage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ComplaintMessageCreateManyArgs>(args?: SelectSubset<T, ComplaintMessageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ComplaintMessage.
     * @param {ComplaintMessageDeleteArgs} args - Arguments to delete one ComplaintMessage.
     * @example
     * // Delete one ComplaintMessage
     * const ComplaintMessage = await prisma.complaintMessage.delete({
     *   where: {
     *     // ... filter to delete one ComplaintMessage
     *   }
     * })
     * 
     */
    delete<T extends ComplaintMessageDeleteArgs>(args: SelectSubset<T, ComplaintMessageDeleteArgs<ExtArgs>>): Prisma__ComplaintMessageClient<$Result.GetResult<Prisma.$ComplaintMessagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ComplaintMessage.
     * @param {ComplaintMessageUpdateArgs} args - Arguments to update one ComplaintMessage.
     * @example
     * // Update one ComplaintMessage
     * const complaintMessage = await prisma.complaintMessage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ComplaintMessageUpdateArgs>(args: SelectSubset<T, ComplaintMessageUpdateArgs<ExtArgs>>): Prisma__ComplaintMessageClient<$Result.GetResult<Prisma.$ComplaintMessagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ComplaintMessages.
     * @param {ComplaintMessageDeleteManyArgs} args - Arguments to filter ComplaintMessages to delete.
     * @example
     * // Delete a few ComplaintMessages
     * const { count } = await prisma.complaintMessage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ComplaintMessageDeleteManyArgs>(args?: SelectSubset<T, ComplaintMessageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ComplaintMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComplaintMessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ComplaintMessages
     * const complaintMessage = await prisma.complaintMessage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ComplaintMessageUpdateManyArgs>(args: SelectSubset<T, ComplaintMessageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ComplaintMessage.
     * @param {ComplaintMessageUpsertArgs} args - Arguments to update or create a ComplaintMessage.
     * @example
     * // Update or create a ComplaintMessage
     * const complaintMessage = await prisma.complaintMessage.upsert({
     *   create: {
     *     // ... data to create a ComplaintMessage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ComplaintMessage we want to update
     *   }
     * })
     */
    upsert<T extends ComplaintMessageUpsertArgs>(args: SelectSubset<T, ComplaintMessageUpsertArgs<ExtArgs>>): Prisma__ComplaintMessageClient<$Result.GetResult<Prisma.$ComplaintMessagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ComplaintMessages that matches the filter.
     * @param {ComplaintMessageFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const complaintMessage = await prisma.complaintMessage.findRaw({
     *   filter: { age: { $gt: 25 } }
     * })
     */
    findRaw(args?: ComplaintMessageFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a ComplaintMessage.
     * @param {ComplaintMessageAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const complaintMessage = await prisma.complaintMessage.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: ComplaintMessageAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of ComplaintMessages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComplaintMessageCountArgs} args - Arguments to filter ComplaintMessages to count.
     * @example
     * // Count the number of ComplaintMessages
     * const count = await prisma.complaintMessage.count({
     *   where: {
     *     // ... the filter for the ComplaintMessages we want to count
     *   }
     * })
    **/
    count<T extends ComplaintMessageCountArgs>(
      args?: Subset<T, ComplaintMessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ComplaintMessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ComplaintMessage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComplaintMessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ComplaintMessageAggregateArgs>(args: Subset<T, ComplaintMessageAggregateArgs>): Prisma.PrismaPromise<GetComplaintMessageAggregateType<T>>

    /**
     * Group by ComplaintMessage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ComplaintMessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ComplaintMessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ComplaintMessageGroupByArgs['orderBy'] }
        : { orderBy?: ComplaintMessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ComplaintMessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetComplaintMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ComplaintMessage model
   */
  readonly fields: ComplaintMessageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ComplaintMessage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ComplaintMessageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    complaint<T extends ComplaintDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ComplaintDefaultArgs<ExtArgs>>): Prisma__ComplaintClient<$Result.GetResult<Prisma.$ComplaintPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ComplaintMessage model
   */
  interface ComplaintMessageFieldRefs {
    readonly id: FieldRef<"ComplaintMessage", 'String'>
    readonly complaintId: FieldRef<"ComplaintMessage", 'String'>
    readonly senderType: FieldRef<"ComplaintMessage", 'String'>
    readonly senderId: FieldRef<"ComplaintMessage", 'String'>
    readonly message: FieldRef<"ComplaintMessage", 'String'>
    readonly attachments: FieldRef<"ComplaintMessage", 'Json'>
    readonly isRead: FieldRef<"ComplaintMessage", 'Boolean'>
    readonly createdAt: FieldRef<"ComplaintMessage", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ComplaintMessage findUnique
   */
  export type ComplaintMessageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComplaintMessage
     */
    select?: ComplaintMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ComplaintMessage
     */
    omit?: ComplaintMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintMessageInclude<ExtArgs> | null
    /**
     * Filter, which ComplaintMessage to fetch.
     */
    where: ComplaintMessageWhereUniqueInput
  }

  /**
   * ComplaintMessage findUniqueOrThrow
   */
  export type ComplaintMessageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComplaintMessage
     */
    select?: ComplaintMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ComplaintMessage
     */
    omit?: ComplaintMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintMessageInclude<ExtArgs> | null
    /**
     * Filter, which ComplaintMessage to fetch.
     */
    where: ComplaintMessageWhereUniqueInput
  }

  /**
   * ComplaintMessage findFirst
   */
  export type ComplaintMessageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComplaintMessage
     */
    select?: ComplaintMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ComplaintMessage
     */
    omit?: ComplaintMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintMessageInclude<ExtArgs> | null
    /**
     * Filter, which ComplaintMessage to fetch.
     */
    where?: ComplaintMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ComplaintMessages to fetch.
     */
    orderBy?: ComplaintMessageOrderByWithRelationInput | ComplaintMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ComplaintMessages.
     */
    cursor?: ComplaintMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ComplaintMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ComplaintMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ComplaintMessages.
     */
    distinct?: ComplaintMessageScalarFieldEnum | ComplaintMessageScalarFieldEnum[]
  }

  /**
   * ComplaintMessage findFirstOrThrow
   */
  export type ComplaintMessageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComplaintMessage
     */
    select?: ComplaintMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ComplaintMessage
     */
    omit?: ComplaintMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintMessageInclude<ExtArgs> | null
    /**
     * Filter, which ComplaintMessage to fetch.
     */
    where?: ComplaintMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ComplaintMessages to fetch.
     */
    orderBy?: ComplaintMessageOrderByWithRelationInput | ComplaintMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ComplaintMessages.
     */
    cursor?: ComplaintMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ComplaintMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ComplaintMessages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ComplaintMessages.
     */
    distinct?: ComplaintMessageScalarFieldEnum | ComplaintMessageScalarFieldEnum[]
  }

  /**
   * ComplaintMessage findMany
   */
  export type ComplaintMessageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComplaintMessage
     */
    select?: ComplaintMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ComplaintMessage
     */
    omit?: ComplaintMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintMessageInclude<ExtArgs> | null
    /**
     * Filter, which ComplaintMessages to fetch.
     */
    where?: ComplaintMessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ComplaintMessages to fetch.
     */
    orderBy?: ComplaintMessageOrderByWithRelationInput | ComplaintMessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ComplaintMessages.
     */
    cursor?: ComplaintMessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ComplaintMessages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ComplaintMessages.
     */
    skip?: number
    distinct?: ComplaintMessageScalarFieldEnum | ComplaintMessageScalarFieldEnum[]
  }

  /**
   * ComplaintMessage create
   */
  export type ComplaintMessageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComplaintMessage
     */
    select?: ComplaintMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ComplaintMessage
     */
    omit?: ComplaintMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintMessageInclude<ExtArgs> | null
    /**
     * The data needed to create a ComplaintMessage.
     */
    data: XOR<ComplaintMessageCreateInput, ComplaintMessageUncheckedCreateInput>
  }

  /**
   * ComplaintMessage createMany
   */
  export type ComplaintMessageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ComplaintMessages.
     */
    data: ComplaintMessageCreateManyInput | ComplaintMessageCreateManyInput[]
  }

  /**
   * ComplaintMessage update
   */
  export type ComplaintMessageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComplaintMessage
     */
    select?: ComplaintMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ComplaintMessage
     */
    omit?: ComplaintMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintMessageInclude<ExtArgs> | null
    /**
     * The data needed to update a ComplaintMessage.
     */
    data: XOR<ComplaintMessageUpdateInput, ComplaintMessageUncheckedUpdateInput>
    /**
     * Choose, which ComplaintMessage to update.
     */
    where: ComplaintMessageWhereUniqueInput
  }

  /**
   * ComplaintMessage updateMany
   */
  export type ComplaintMessageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ComplaintMessages.
     */
    data: XOR<ComplaintMessageUpdateManyMutationInput, ComplaintMessageUncheckedUpdateManyInput>
    /**
     * Filter which ComplaintMessages to update
     */
    where?: ComplaintMessageWhereInput
    /**
     * Limit how many ComplaintMessages to update.
     */
    limit?: number
  }

  /**
   * ComplaintMessage upsert
   */
  export type ComplaintMessageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComplaintMessage
     */
    select?: ComplaintMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ComplaintMessage
     */
    omit?: ComplaintMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintMessageInclude<ExtArgs> | null
    /**
     * The filter to search for the ComplaintMessage to update in case it exists.
     */
    where: ComplaintMessageWhereUniqueInput
    /**
     * In case the ComplaintMessage found by the `where` argument doesn't exist, create a new ComplaintMessage with this data.
     */
    create: XOR<ComplaintMessageCreateInput, ComplaintMessageUncheckedCreateInput>
    /**
     * In case the ComplaintMessage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ComplaintMessageUpdateInput, ComplaintMessageUncheckedUpdateInput>
  }

  /**
   * ComplaintMessage delete
   */
  export type ComplaintMessageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComplaintMessage
     */
    select?: ComplaintMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ComplaintMessage
     */
    omit?: ComplaintMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintMessageInclude<ExtArgs> | null
    /**
     * Filter which ComplaintMessage to delete.
     */
    where: ComplaintMessageWhereUniqueInput
  }

  /**
   * ComplaintMessage deleteMany
   */
  export type ComplaintMessageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ComplaintMessages to delete
     */
    where?: ComplaintMessageWhereInput
    /**
     * Limit how many ComplaintMessages to delete.
     */
    limit?: number
  }

  /**
   * ComplaintMessage findRaw
   */
  export type ComplaintMessageFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * ComplaintMessage aggregateRaw
   */
  export type ComplaintMessageAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * ComplaintMessage without action
   */
  export type ComplaintMessageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ComplaintMessage
     */
    select?: ComplaintMessageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ComplaintMessage
     */
    omit?: ComplaintMessageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ComplaintMessageInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const UserScalarFieldEnum: {
    id: 'id',
    firstName: 'firstName',
    lastName: 'lastName',
    email: 'email',
    phoneNumber: 'phoneNumber',
    dateOfBirth: 'dateOfBirth',
    nationality: 'nationality',
    password: 'password',
    role: 'role',
    preferredLanguage: 'preferredLanguage',
    companyName: 'companyName',
    businessLicense: 'businessLicense',
    markupType: 'markupType',
    markupValue: 'markupValue',
    isActive: 'isActive',
    emailVerified: 'emailVerified',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    metadata: 'metadata',
    accountManagerId: 'accountManagerId'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const CategoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    slug: 'slug',
    icon: 'icon',
    status: 'status',
    displayOrder: 'displayOrder',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const ProductScalarFieldEnum: {
    id: 'id',
    name: 'name',
    slug: 'slug',
    type: 'type',
    shortDesc: 'shortDesc',
    longDesc: 'longDesc',
    baseCurrency: 'baseCurrency',
    basePrice: 'basePrice',
    isActive: 'isActive',
    categoryId: 'categoryId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdById: 'createdById',
    externalIds: 'externalIds'
  };

  export type ProductScalarFieldEnum = (typeof ProductScalarFieldEnum)[keyof typeof ProductScalarFieldEnum]


  export const ProductImageScalarFieldEnum: {
    id: 'id',
    url: 'url',
    alt: 'alt',
    productId: 'productId'
  };

  export type ProductImageScalarFieldEnum = (typeof ProductImageScalarFieldEnum)[keyof typeof ProductImageScalarFieldEnum]


  export const B2BAccountScalarFieldEnum: {
    id: 'id',
    name: 'name',
    code: 'code',
    userId: 'userId',
    defaultMarkup: 'defaultMarkup',
    currency: 'currency',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type B2BAccountScalarFieldEnum = (typeof B2BAccountScalarFieldEnum)[keyof typeof B2BAccountScalarFieldEnum]


  export const MarkupRuleScalarFieldEnum: {
    id: 'id',
    b2bAccountId: 'b2bAccountId',
    productId: 'productId',
    percentage: 'percentage',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    isActive: 'isActive'
  };

  export type MarkupRuleScalarFieldEnum = (typeof MarkupRuleScalarFieldEnum)[keyof typeof MarkupRuleScalarFieldEnum]


  export const BookingScalarFieldEnum: {
    id: 'id',
    reference: 'reference',
    userId: 'userId',
    b2bAccountId: 'b2bAccountId',
    status: 'status',
    paymentMethod: 'paymentMethod',
    paymentStatus: 'paymentStatus',
    paymentIntentId: 'paymentIntentId',
    paymentGateway: 'paymentGateway',
    gatewayReference: 'gatewayReference',
    currency: 'currency',
    totalNet: 'totalNet',
    totalMarkup: 'totalMarkup',
    totalGross: 'totalGross',
    supplierRef: 'supplierRef',
    voucherUrl: 'voucherUrl',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    passengerCount: 'passengerCount',
    leadPassenger: 'leadPassenger',
    externalBookingId: 'externalBookingId',
    apiResponse: 'apiResponse',
    apiCalledAt: 'apiCalledAt',
    syncedAt: 'syncedAt'
  };

  export type BookingScalarFieldEnum = (typeof BookingScalarFieldEnum)[keyof typeof BookingScalarFieldEnum]


  export const BookingItemScalarFieldEnum: {
    id: 'id',
    bookingId: 'bookingId',
    productId: 'productId',
    name: 'name',
    date: 'date',
    quantity: 'quantity',
    unitNet: 'unitNet',
    unitGross: 'unitGross',
    subtotalNet: 'subtotalNet',
    subtotalGross: 'subtotalGross'
  };

  export type BookingItemScalarFieldEnum = (typeof BookingItemScalarFieldEnum)[keyof typeof BookingItemScalarFieldEnum]


  export const ExternalServiceMappingScalarFieldEnum: {
    id: 'id',
    serviceName: 'serviceName',
    externalId: 'externalId',
    internalId: 'internalId',
    internalType: 'internalType',
    metadata: 'metadata',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ExternalServiceMappingScalarFieldEnum = (typeof ExternalServiceMappingScalarFieldEnum)[keyof typeof ExternalServiceMappingScalarFieldEnum]


  export const PaymentTransactionScalarFieldEnum: {
    id: 'id',
    bookingId: 'bookingId',
    paymentIntentId: 'paymentIntentId',
    amount: 'amount',
    currency: 'currency',
    status: 'status',
    gatewayResponse: 'gatewayResponse',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PaymentTransactionScalarFieldEnum = (typeof PaymentTransactionScalarFieldEnum)[keyof typeof PaymentTransactionScalarFieldEnum]


  export const BillingRecordScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    bookingId: 'bookingId',
    planName: 'planName',
    duration: 'duration',
    price: 'price',
    paymentSessionId: 'paymentSessionId',
    purchasedAt: 'purchasedAt'
  };

  export type BillingRecordScalarFieldEnum = (typeof BillingRecordScalarFieldEnum)[keyof typeof BillingRecordScalarFieldEnum]


  export const SettingsScalarFieldEnum: {
    id: 'id',
    type: 'type',
    value: 'value',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SettingsScalarFieldEnum = (typeof SettingsScalarFieldEnum)[keyof typeof SettingsScalarFieldEnum]


  export const ApprovedTourScalarFieldEnum: {
    id: 'id',
    tourId: 'tourId',
    createdAt: 'createdAt'
  };

  export type ApprovedTourScalarFieldEnum = (typeof ApprovedTourScalarFieldEnum)[keyof typeof ApprovedTourScalarFieldEnum]


  export const ComplaintScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    subject: 'subject',
    category: 'category',
    priority: 'priority',
    status: 'status',
    bookingId: 'bookingId',
    tourId: 'tourId',
    tourName: 'tourName',
    description: 'description',
    expectedOutcome: 'expectedOutcome',
    refundAmount: 'refundAmount',
    contactEmail: 'contactEmail',
    contactPhone: 'contactPhone',
    preferredContactMethod: 'preferredContactMethod',
    attachments: 'attachments',
    adminResponse: 'adminResponse',
    resolvedAt: 'resolvedAt',
    assignedTo: 'assignedTo',
    rating: 'rating',
    ratingComment: 'ratingComment',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ComplaintScalarFieldEnum = (typeof ComplaintScalarFieldEnum)[keyof typeof ComplaintScalarFieldEnum]


  export const ComplaintMessageScalarFieldEnum: {
    id: 'id',
    complaintId: 'complaintId',
    senderType: 'senderType',
    senderId: 'senderId',
    message: 'message',
    attachments: 'attachments',
    isRead: 'isRead',
    createdAt: 'createdAt'
  };

  export type ComplaintMessageScalarFieldEnum = (typeof ComplaintMessageScalarFieldEnum)[keyof typeof ComplaintMessageScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'CategoryStatus'
   */
  export type EnumCategoryStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CategoryStatus'>
    


  /**
   * Reference to a field of type 'CategoryStatus[]'
   */
  export type ListEnumCategoryStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CategoryStatus[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'ProductType'
   */
  export type EnumProductTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProductType'>
    


  /**
   * Reference to a field of type 'ProductType[]'
   */
  export type ListEnumProductTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProductType[]'>
    


  /**
   * Reference to a field of type 'Currency'
   */
  export type EnumCurrencyFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Currency'>
    


  /**
   * Reference to a field of type 'Currency[]'
   */
  export type ListEnumCurrencyFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Currency[]'>
    


  /**
   * Reference to a field of type 'BookingStatus'
   */
  export type EnumBookingStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BookingStatus'>
    


  /**
   * Reference to a field of type 'BookingStatus[]'
   */
  export type ListEnumBookingStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BookingStatus[]'>
    


  /**
   * Reference to a field of type 'PaymentMethod'
   */
  export type EnumPaymentMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentMethod'>
    


  /**
   * Reference to a field of type 'PaymentMethod[]'
   */
  export type ListEnumPaymentMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentMethod[]'>
    


  /**
   * Reference to a field of type 'PaymentStatus'
   */
  export type EnumPaymentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentStatus'>
    


  /**
   * Reference to a field of type 'PaymentStatus[]'
   */
  export type ListEnumPaymentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentStatus[]'>
    


  /**
   * Reference to a field of type 'ComplaintCategory'
   */
  export type EnumComplaintCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ComplaintCategory'>
    


  /**
   * Reference to a field of type 'ComplaintCategory[]'
   */
  export type ListEnumComplaintCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ComplaintCategory[]'>
    


  /**
   * Reference to a field of type 'ComplaintPriority'
   */
  export type EnumComplaintPriorityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ComplaintPriority'>
    


  /**
   * Reference to a field of type 'ComplaintPriority[]'
   */
  export type ListEnumComplaintPriorityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ComplaintPriority[]'>
    


  /**
   * Reference to a field of type 'ComplaintStatus'
   */
  export type EnumComplaintStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ComplaintStatus'>
    


  /**
   * Reference to a field of type 'ComplaintStatus[]'
   */
  export type ListEnumComplaintStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ComplaintStatus[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    phoneNumber?: StringFilter<"User"> | string
    dateOfBirth?: DateTimeNullableFilter<"User"> | Date | string | null
    nationality?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    preferredLanguage?: StringFilter<"User"> | string
    companyName?: StringNullableFilter<"User"> | string | null
    businessLicense?: StringNullableFilter<"User"> | string | null
    markupType?: StringNullableFilter<"User"> | string | null
    markupValue?: FloatNullableFilter<"User"> | number | null
    isActive?: BoolFilter<"User"> | boolean
    emailVerified?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    metadata?: JsonNullableFilter<"User">
    accountManagerId?: StringNullableFilter<"User"> | string | null
    bookings?: BookingListRelationFilter
    createdProducts?: ProductListRelationFilter
    b2bAccounts?: B2BAccountListRelationFilter
    managedUsers?: UserListRelationFilter
    accountManager?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    billingRecords?: BillingRecordListRelationFilter
    complaints?: ComplaintListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    dateOfBirth?: SortOrder
    nationality?: SortOrder
    password?: SortOrder
    role?: SortOrder
    preferredLanguage?: SortOrder
    companyName?: SortOrder
    businessLicense?: SortOrder
    markupType?: SortOrder
    markupValue?: SortOrder
    isActive?: SortOrder
    emailVerified?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    metadata?: SortOrder
    accountManagerId?: SortOrder
    bookings?: BookingOrderByRelationAggregateInput
    createdProducts?: ProductOrderByRelationAggregateInput
    b2bAccounts?: B2BAccountOrderByRelationAggregateInput
    managedUsers?: UserOrderByRelationAggregateInput
    accountManager?: UserOrderByWithRelationInput
    billingRecords?: BillingRecordOrderByRelationAggregateInput
    complaints?: ComplaintOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    phoneNumber?: StringFilter<"User"> | string
    dateOfBirth?: DateTimeNullableFilter<"User"> | Date | string | null
    nationality?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    preferredLanguage?: StringFilter<"User"> | string
    companyName?: StringNullableFilter<"User"> | string | null
    businessLicense?: StringNullableFilter<"User"> | string | null
    markupType?: StringNullableFilter<"User"> | string | null
    markupValue?: FloatNullableFilter<"User"> | number | null
    isActive?: BoolFilter<"User"> | boolean
    emailVerified?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    metadata?: JsonNullableFilter<"User">
    accountManagerId?: StringNullableFilter<"User"> | string | null
    bookings?: BookingListRelationFilter
    createdProducts?: ProductListRelationFilter
    b2bAccounts?: B2BAccountListRelationFilter
    managedUsers?: UserListRelationFilter
    accountManager?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    billingRecords?: BillingRecordListRelationFilter
    complaints?: ComplaintListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    dateOfBirth?: SortOrder
    nationality?: SortOrder
    password?: SortOrder
    role?: SortOrder
    preferredLanguage?: SortOrder
    companyName?: SortOrder
    businessLicense?: SortOrder
    markupType?: SortOrder
    markupValue?: SortOrder
    isActive?: SortOrder
    emailVerified?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    metadata?: SortOrder
    accountManagerId?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    firstName?: StringWithAggregatesFilter<"User"> | string
    lastName?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    phoneNumber?: StringWithAggregatesFilter<"User"> | string
    dateOfBirth?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    nationality?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    role?: EnumRoleWithAggregatesFilter<"User"> | $Enums.Role
    preferredLanguage?: StringWithAggregatesFilter<"User"> | string
    companyName?: StringNullableWithAggregatesFilter<"User"> | string | null
    businessLicense?: StringNullableWithAggregatesFilter<"User"> | string | null
    markupType?: StringNullableWithAggregatesFilter<"User"> | string | null
    markupValue?: FloatNullableWithAggregatesFilter<"User"> | number | null
    isActive?: BoolWithAggregatesFilter<"User"> | boolean
    emailVerified?: BoolWithAggregatesFilter<"User"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    metadata?: JsonNullableWithAggregatesFilter<"User">
    accountManagerId?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type CategoryWhereInput = {
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    id?: StringFilter<"Category"> | string
    name?: StringFilter<"Category"> | string
    description?: StringFilter<"Category"> | string
    slug?: StringFilter<"Category"> | string
    icon?: StringNullableFilter<"Category"> | string | null
    status?: EnumCategoryStatusFilter<"Category"> | $Enums.CategoryStatus
    displayOrder?: IntFilter<"Category"> | number
    createdAt?: DateTimeFilter<"Category"> | Date | string
    updatedAt?: DateTimeFilter<"Category"> | Date | string
    products?: ProductListRelationFilter
  }

  export type CategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    slug?: SortOrder
    icon?: SortOrder
    status?: SortOrder
    displayOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    products?: ProductOrderByRelationAggregateInput
  }

  export type CategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    slug?: string
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    name?: StringFilter<"Category"> | string
    description?: StringFilter<"Category"> | string
    icon?: StringNullableFilter<"Category"> | string | null
    status?: EnumCategoryStatusFilter<"Category"> | $Enums.CategoryStatus
    displayOrder?: IntFilter<"Category"> | number
    createdAt?: DateTimeFilter<"Category"> | Date | string
    updatedAt?: DateTimeFilter<"Category"> | Date | string
    products?: ProductListRelationFilter
  }, "id" | "slug">

  export type CategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    slug?: SortOrder
    icon?: SortOrder
    status?: SortOrder
    displayOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CategoryCountOrderByAggregateInput
    _avg?: CategoryAvgOrderByAggregateInput
    _max?: CategoryMaxOrderByAggregateInput
    _min?: CategoryMinOrderByAggregateInput
    _sum?: CategorySumOrderByAggregateInput
  }

  export type CategoryScalarWhereWithAggregatesInput = {
    AND?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    OR?: CategoryScalarWhereWithAggregatesInput[]
    NOT?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Category"> | string
    name?: StringWithAggregatesFilter<"Category"> | string
    description?: StringWithAggregatesFilter<"Category"> | string
    slug?: StringWithAggregatesFilter<"Category"> | string
    icon?: StringNullableWithAggregatesFilter<"Category"> | string | null
    status?: EnumCategoryStatusWithAggregatesFilter<"Category"> | $Enums.CategoryStatus
    displayOrder?: IntWithAggregatesFilter<"Category"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Category"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Category"> | Date | string
  }

  export type ProductWhereInput = {
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    id?: StringFilter<"Product"> | string
    name?: StringFilter<"Product"> | string
    slug?: StringFilter<"Product"> | string
    type?: EnumProductTypeFilter<"Product"> | $Enums.ProductType
    shortDesc?: StringNullableFilter<"Product"> | string | null
    longDesc?: StringNullableFilter<"Product"> | string | null
    baseCurrency?: EnumCurrencyFilter<"Product"> | $Enums.Currency
    basePrice?: FloatFilter<"Product"> | number
    isActive?: BoolFilter<"Product"> | boolean
    categoryId?: StringFilter<"Product"> | string
    createdAt?: DateTimeFilter<"Product"> | Date | string
    updatedAt?: DateTimeFilter<"Product"> | Date | string
    createdById?: StringNullableFilter<"Product"> | string | null
    externalIds?: JsonNullableFilter<"Product">
    images?: ProductImageListRelationFilter
    category?: XOR<CategoryScalarRelationFilter, CategoryWhereInput>
    createdBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    markupRules?: MarkupRuleListRelationFilter
    bookingItems?: BookingItemListRelationFilter
  }

  export type ProductOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    type?: SortOrder
    shortDesc?: SortOrder
    longDesc?: SortOrder
    baseCurrency?: SortOrder
    basePrice?: SortOrder
    isActive?: SortOrder
    categoryId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    externalIds?: SortOrder
    images?: ProductImageOrderByRelationAggregateInput
    category?: CategoryOrderByWithRelationInput
    createdBy?: UserOrderByWithRelationInput
    markupRules?: MarkupRuleOrderByRelationAggregateInput
    bookingItems?: BookingItemOrderByRelationAggregateInput
  }

  export type ProductWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    slug?: string
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    name?: StringFilter<"Product"> | string
    type?: EnumProductTypeFilter<"Product"> | $Enums.ProductType
    shortDesc?: StringNullableFilter<"Product"> | string | null
    longDesc?: StringNullableFilter<"Product"> | string | null
    baseCurrency?: EnumCurrencyFilter<"Product"> | $Enums.Currency
    basePrice?: FloatFilter<"Product"> | number
    isActive?: BoolFilter<"Product"> | boolean
    categoryId?: StringFilter<"Product"> | string
    createdAt?: DateTimeFilter<"Product"> | Date | string
    updatedAt?: DateTimeFilter<"Product"> | Date | string
    createdById?: StringNullableFilter<"Product"> | string | null
    externalIds?: JsonNullableFilter<"Product">
    images?: ProductImageListRelationFilter
    category?: XOR<CategoryScalarRelationFilter, CategoryWhereInput>
    createdBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    markupRules?: MarkupRuleListRelationFilter
    bookingItems?: BookingItemListRelationFilter
  }, "id" | "slug">

  export type ProductOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    type?: SortOrder
    shortDesc?: SortOrder
    longDesc?: SortOrder
    baseCurrency?: SortOrder
    basePrice?: SortOrder
    isActive?: SortOrder
    categoryId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    externalIds?: SortOrder
    _count?: ProductCountOrderByAggregateInput
    _avg?: ProductAvgOrderByAggregateInput
    _max?: ProductMaxOrderByAggregateInput
    _min?: ProductMinOrderByAggregateInput
    _sum?: ProductSumOrderByAggregateInput
  }

  export type ProductScalarWhereWithAggregatesInput = {
    AND?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    OR?: ProductScalarWhereWithAggregatesInput[]
    NOT?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Product"> | string
    name?: StringWithAggregatesFilter<"Product"> | string
    slug?: StringWithAggregatesFilter<"Product"> | string
    type?: EnumProductTypeWithAggregatesFilter<"Product"> | $Enums.ProductType
    shortDesc?: StringNullableWithAggregatesFilter<"Product"> | string | null
    longDesc?: StringNullableWithAggregatesFilter<"Product"> | string | null
    baseCurrency?: EnumCurrencyWithAggregatesFilter<"Product"> | $Enums.Currency
    basePrice?: FloatWithAggregatesFilter<"Product"> | number
    isActive?: BoolWithAggregatesFilter<"Product"> | boolean
    categoryId?: StringWithAggregatesFilter<"Product"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Product"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Product"> | Date | string
    createdById?: StringNullableWithAggregatesFilter<"Product"> | string | null
    externalIds?: JsonNullableWithAggregatesFilter<"Product">
  }

  export type ProductImageWhereInput = {
    AND?: ProductImageWhereInput | ProductImageWhereInput[]
    OR?: ProductImageWhereInput[]
    NOT?: ProductImageWhereInput | ProductImageWhereInput[]
    id?: StringFilter<"ProductImage"> | string
    url?: StringFilter<"ProductImage"> | string
    alt?: StringNullableFilter<"ProductImage"> | string | null
    productId?: StringFilter<"ProductImage"> | string
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
  }

  export type ProductImageOrderByWithRelationInput = {
    id?: SortOrder
    url?: SortOrder
    alt?: SortOrder
    productId?: SortOrder
    product?: ProductOrderByWithRelationInput
  }

  export type ProductImageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProductImageWhereInput | ProductImageWhereInput[]
    OR?: ProductImageWhereInput[]
    NOT?: ProductImageWhereInput | ProductImageWhereInput[]
    url?: StringFilter<"ProductImage"> | string
    alt?: StringNullableFilter<"ProductImage"> | string | null
    productId?: StringFilter<"ProductImage"> | string
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
  }, "id">

  export type ProductImageOrderByWithAggregationInput = {
    id?: SortOrder
    url?: SortOrder
    alt?: SortOrder
    productId?: SortOrder
    _count?: ProductImageCountOrderByAggregateInput
    _max?: ProductImageMaxOrderByAggregateInput
    _min?: ProductImageMinOrderByAggregateInput
  }

  export type ProductImageScalarWhereWithAggregatesInput = {
    AND?: ProductImageScalarWhereWithAggregatesInput | ProductImageScalarWhereWithAggregatesInput[]
    OR?: ProductImageScalarWhereWithAggregatesInput[]
    NOT?: ProductImageScalarWhereWithAggregatesInput | ProductImageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ProductImage"> | string
    url?: StringWithAggregatesFilter<"ProductImage"> | string
    alt?: StringNullableWithAggregatesFilter<"ProductImage"> | string | null
    productId?: StringWithAggregatesFilter<"ProductImage"> | string
  }

  export type B2BAccountWhereInput = {
    AND?: B2BAccountWhereInput | B2BAccountWhereInput[]
    OR?: B2BAccountWhereInput[]
    NOT?: B2BAccountWhereInput | B2BAccountWhereInput[]
    id?: StringFilter<"B2BAccount"> | string
    name?: StringFilter<"B2BAccount"> | string
    code?: StringFilter<"B2BAccount"> | string
    userId?: StringNullableFilter<"B2BAccount"> | string | null
    defaultMarkup?: FloatFilter<"B2BAccount"> | number
    currency?: EnumCurrencyFilter<"B2BAccount"> | $Enums.Currency
    isActive?: BoolFilter<"B2BAccount"> | boolean
    createdAt?: DateTimeFilter<"B2BAccount"> | Date | string
    updatedAt?: DateTimeFilter<"B2BAccount"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    markupRules?: MarkupRuleListRelationFilter
    bookings?: BookingListRelationFilter
  }

  export type B2BAccountOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    userId?: SortOrder
    defaultMarkup?: SortOrder
    currency?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    markupRules?: MarkupRuleOrderByRelationAggregateInput
    bookings?: BookingOrderByRelationAggregateInput
  }

  export type B2BAccountWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    code?: string
    AND?: B2BAccountWhereInput | B2BAccountWhereInput[]
    OR?: B2BAccountWhereInput[]
    NOT?: B2BAccountWhereInput | B2BAccountWhereInput[]
    name?: StringFilter<"B2BAccount"> | string
    userId?: StringNullableFilter<"B2BAccount"> | string | null
    defaultMarkup?: FloatFilter<"B2BAccount"> | number
    currency?: EnumCurrencyFilter<"B2BAccount"> | $Enums.Currency
    isActive?: BoolFilter<"B2BAccount"> | boolean
    createdAt?: DateTimeFilter<"B2BAccount"> | Date | string
    updatedAt?: DateTimeFilter<"B2BAccount"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    markupRules?: MarkupRuleListRelationFilter
    bookings?: BookingListRelationFilter
  }, "id" | "code">

  export type B2BAccountOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    userId?: SortOrder
    defaultMarkup?: SortOrder
    currency?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: B2BAccountCountOrderByAggregateInput
    _avg?: B2BAccountAvgOrderByAggregateInput
    _max?: B2BAccountMaxOrderByAggregateInput
    _min?: B2BAccountMinOrderByAggregateInput
    _sum?: B2BAccountSumOrderByAggregateInput
  }

  export type B2BAccountScalarWhereWithAggregatesInput = {
    AND?: B2BAccountScalarWhereWithAggregatesInput | B2BAccountScalarWhereWithAggregatesInput[]
    OR?: B2BAccountScalarWhereWithAggregatesInput[]
    NOT?: B2BAccountScalarWhereWithAggregatesInput | B2BAccountScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"B2BAccount"> | string
    name?: StringWithAggregatesFilter<"B2BAccount"> | string
    code?: StringWithAggregatesFilter<"B2BAccount"> | string
    userId?: StringNullableWithAggregatesFilter<"B2BAccount"> | string | null
    defaultMarkup?: FloatWithAggregatesFilter<"B2BAccount"> | number
    currency?: EnumCurrencyWithAggregatesFilter<"B2BAccount"> | $Enums.Currency
    isActive?: BoolWithAggregatesFilter<"B2BAccount"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"B2BAccount"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"B2BAccount"> | Date | string
  }

  export type MarkupRuleWhereInput = {
    AND?: MarkupRuleWhereInput | MarkupRuleWhereInput[]
    OR?: MarkupRuleWhereInput[]
    NOT?: MarkupRuleWhereInput | MarkupRuleWhereInput[]
    id?: StringFilter<"MarkupRule"> | string
    b2bAccountId?: StringNullableFilter<"MarkupRule"> | string | null
    productId?: StringNullableFilter<"MarkupRule"> | string | null
    percentage?: FloatFilter<"MarkupRule"> | number
    createdAt?: DateTimeFilter<"MarkupRule"> | Date | string
    updatedAt?: DateTimeFilter<"MarkupRule"> | Date | string
    isActive?: BoolFilter<"MarkupRule"> | boolean
    b2bAccount?: XOR<B2BAccountNullableScalarRelationFilter, B2BAccountWhereInput> | null
    product?: XOR<ProductNullableScalarRelationFilter, ProductWhereInput> | null
  }

  export type MarkupRuleOrderByWithRelationInput = {
    id?: SortOrder
    b2bAccountId?: SortOrder
    productId?: SortOrder
    percentage?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isActive?: SortOrder
    b2bAccount?: B2BAccountOrderByWithRelationInput
    product?: ProductOrderByWithRelationInput
  }

  export type MarkupRuleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MarkupRuleWhereInput | MarkupRuleWhereInput[]
    OR?: MarkupRuleWhereInput[]
    NOT?: MarkupRuleWhereInput | MarkupRuleWhereInput[]
    b2bAccountId?: StringNullableFilter<"MarkupRule"> | string | null
    productId?: StringNullableFilter<"MarkupRule"> | string | null
    percentage?: FloatFilter<"MarkupRule"> | number
    createdAt?: DateTimeFilter<"MarkupRule"> | Date | string
    updatedAt?: DateTimeFilter<"MarkupRule"> | Date | string
    isActive?: BoolFilter<"MarkupRule"> | boolean
    b2bAccount?: XOR<B2BAccountNullableScalarRelationFilter, B2BAccountWhereInput> | null
    product?: XOR<ProductNullableScalarRelationFilter, ProductWhereInput> | null
  }, "id">

  export type MarkupRuleOrderByWithAggregationInput = {
    id?: SortOrder
    b2bAccountId?: SortOrder
    productId?: SortOrder
    percentage?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isActive?: SortOrder
    _count?: MarkupRuleCountOrderByAggregateInput
    _avg?: MarkupRuleAvgOrderByAggregateInput
    _max?: MarkupRuleMaxOrderByAggregateInput
    _min?: MarkupRuleMinOrderByAggregateInput
    _sum?: MarkupRuleSumOrderByAggregateInput
  }

  export type MarkupRuleScalarWhereWithAggregatesInput = {
    AND?: MarkupRuleScalarWhereWithAggregatesInput | MarkupRuleScalarWhereWithAggregatesInput[]
    OR?: MarkupRuleScalarWhereWithAggregatesInput[]
    NOT?: MarkupRuleScalarWhereWithAggregatesInput | MarkupRuleScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MarkupRule"> | string
    b2bAccountId?: StringNullableWithAggregatesFilter<"MarkupRule"> | string | null
    productId?: StringNullableWithAggregatesFilter<"MarkupRule"> | string | null
    percentage?: FloatWithAggregatesFilter<"MarkupRule"> | number
    createdAt?: DateTimeWithAggregatesFilter<"MarkupRule"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MarkupRule"> | Date | string
    isActive?: BoolWithAggregatesFilter<"MarkupRule"> | boolean
  }

  export type BookingWhereInput = {
    AND?: BookingWhereInput | BookingWhereInput[]
    OR?: BookingWhereInput[]
    NOT?: BookingWhereInput | BookingWhereInput[]
    id?: StringFilter<"Booking"> | string
    reference?: StringFilter<"Booking"> | string
    userId?: StringNullableFilter<"Booking"> | string | null
    b2bAccountId?: StringNullableFilter<"Booking"> | string | null
    status?: EnumBookingStatusFilter<"Booking"> | $Enums.BookingStatus
    paymentMethod?: EnumPaymentMethodNullableFilter<"Booking"> | $Enums.PaymentMethod | null
    paymentStatus?: EnumPaymentStatusFilter<"Booking"> | $Enums.PaymentStatus
    paymentIntentId?: StringNullableFilter<"Booking"> | string | null
    paymentGateway?: StringNullableFilter<"Booking"> | string | null
    gatewayReference?: StringNullableFilter<"Booking"> | string | null
    currency?: EnumCurrencyFilter<"Booking"> | $Enums.Currency
    totalNet?: FloatFilter<"Booking"> | number
    totalMarkup?: FloatFilter<"Booking"> | number
    totalGross?: FloatFilter<"Booking"> | number
    supplierRef?: StringNullableFilter<"Booking"> | string | null
    voucherUrl?: StringNullableFilter<"Booking"> | string | null
    createdAt?: DateTimeFilter<"Booking"> | Date | string
    updatedAt?: DateTimeFilter<"Booking"> | Date | string
    passengerCount?: IntFilter<"Booking"> | number
    leadPassenger?: JsonNullableFilter<"Booking">
    externalBookingId?: StringNullableFilter<"Booking"> | string | null
    apiResponse?: JsonNullableFilter<"Booking">
    apiCalledAt?: DateTimeNullableFilter<"Booking"> | Date | string | null
    syncedAt?: DateTimeNullableFilter<"Booking"> | Date | string | null
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    b2bAccount?: XOR<B2BAccountNullableScalarRelationFilter, B2BAccountWhereInput> | null
    items?: BookingItemListRelationFilter
    paymentTransactions?: PaymentTransactionListRelationFilter
    billingRecords?: BillingRecordListRelationFilter
    complaints?: ComplaintListRelationFilter
  }

  export type BookingOrderByWithRelationInput = {
    id?: SortOrder
    reference?: SortOrder
    userId?: SortOrder
    b2bAccountId?: SortOrder
    status?: SortOrder
    paymentMethod?: SortOrder
    paymentStatus?: SortOrder
    paymentIntentId?: SortOrder
    paymentGateway?: SortOrder
    gatewayReference?: SortOrder
    currency?: SortOrder
    totalNet?: SortOrder
    totalMarkup?: SortOrder
    totalGross?: SortOrder
    supplierRef?: SortOrder
    voucherUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    passengerCount?: SortOrder
    leadPassenger?: SortOrder
    externalBookingId?: SortOrder
    apiResponse?: SortOrder
    apiCalledAt?: SortOrder
    syncedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    b2bAccount?: B2BAccountOrderByWithRelationInput
    items?: BookingItemOrderByRelationAggregateInput
    paymentTransactions?: PaymentTransactionOrderByRelationAggregateInput
    billingRecords?: BillingRecordOrderByRelationAggregateInput
    complaints?: ComplaintOrderByRelationAggregateInput
  }

  export type BookingWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    reference?: string
    AND?: BookingWhereInput | BookingWhereInput[]
    OR?: BookingWhereInput[]
    NOT?: BookingWhereInput | BookingWhereInput[]
    userId?: StringNullableFilter<"Booking"> | string | null
    b2bAccountId?: StringNullableFilter<"Booking"> | string | null
    status?: EnumBookingStatusFilter<"Booking"> | $Enums.BookingStatus
    paymentMethod?: EnumPaymentMethodNullableFilter<"Booking"> | $Enums.PaymentMethod | null
    paymentStatus?: EnumPaymentStatusFilter<"Booking"> | $Enums.PaymentStatus
    paymentIntentId?: StringNullableFilter<"Booking"> | string | null
    paymentGateway?: StringNullableFilter<"Booking"> | string | null
    gatewayReference?: StringNullableFilter<"Booking"> | string | null
    currency?: EnumCurrencyFilter<"Booking"> | $Enums.Currency
    totalNet?: FloatFilter<"Booking"> | number
    totalMarkup?: FloatFilter<"Booking"> | number
    totalGross?: FloatFilter<"Booking"> | number
    supplierRef?: StringNullableFilter<"Booking"> | string | null
    voucherUrl?: StringNullableFilter<"Booking"> | string | null
    createdAt?: DateTimeFilter<"Booking"> | Date | string
    updatedAt?: DateTimeFilter<"Booking"> | Date | string
    passengerCount?: IntFilter<"Booking"> | number
    leadPassenger?: JsonNullableFilter<"Booking">
    externalBookingId?: StringNullableFilter<"Booking"> | string | null
    apiResponse?: JsonNullableFilter<"Booking">
    apiCalledAt?: DateTimeNullableFilter<"Booking"> | Date | string | null
    syncedAt?: DateTimeNullableFilter<"Booking"> | Date | string | null
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    b2bAccount?: XOR<B2BAccountNullableScalarRelationFilter, B2BAccountWhereInput> | null
    items?: BookingItemListRelationFilter
    paymentTransactions?: PaymentTransactionListRelationFilter
    billingRecords?: BillingRecordListRelationFilter
    complaints?: ComplaintListRelationFilter
  }, "id" | "reference">

  export type BookingOrderByWithAggregationInput = {
    id?: SortOrder
    reference?: SortOrder
    userId?: SortOrder
    b2bAccountId?: SortOrder
    status?: SortOrder
    paymentMethod?: SortOrder
    paymentStatus?: SortOrder
    paymentIntentId?: SortOrder
    paymentGateway?: SortOrder
    gatewayReference?: SortOrder
    currency?: SortOrder
    totalNet?: SortOrder
    totalMarkup?: SortOrder
    totalGross?: SortOrder
    supplierRef?: SortOrder
    voucherUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    passengerCount?: SortOrder
    leadPassenger?: SortOrder
    externalBookingId?: SortOrder
    apiResponse?: SortOrder
    apiCalledAt?: SortOrder
    syncedAt?: SortOrder
    _count?: BookingCountOrderByAggregateInput
    _avg?: BookingAvgOrderByAggregateInput
    _max?: BookingMaxOrderByAggregateInput
    _min?: BookingMinOrderByAggregateInput
    _sum?: BookingSumOrderByAggregateInput
  }

  export type BookingScalarWhereWithAggregatesInput = {
    AND?: BookingScalarWhereWithAggregatesInput | BookingScalarWhereWithAggregatesInput[]
    OR?: BookingScalarWhereWithAggregatesInput[]
    NOT?: BookingScalarWhereWithAggregatesInput | BookingScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Booking"> | string
    reference?: StringWithAggregatesFilter<"Booking"> | string
    userId?: StringNullableWithAggregatesFilter<"Booking"> | string | null
    b2bAccountId?: StringNullableWithAggregatesFilter<"Booking"> | string | null
    status?: EnumBookingStatusWithAggregatesFilter<"Booking"> | $Enums.BookingStatus
    paymentMethod?: EnumPaymentMethodNullableWithAggregatesFilter<"Booking"> | $Enums.PaymentMethod | null
    paymentStatus?: EnumPaymentStatusWithAggregatesFilter<"Booking"> | $Enums.PaymentStatus
    paymentIntentId?: StringNullableWithAggregatesFilter<"Booking"> | string | null
    paymentGateway?: StringNullableWithAggregatesFilter<"Booking"> | string | null
    gatewayReference?: StringNullableWithAggregatesFilter<"Booking"> | string | null
    currency?: EnumCurrencyWithAggregatesFilter<"Booking"> | $Enums.Currency
    totalNet?: FloatWithAggregatesFilter<"Booking"> | number
    totalMarkup?: FloatWithAggregatesFilter<"Booking"> | number
    totalGross?: FloatWithAggregatesFilter<"Booking"> | number
    supplierRef?: StringNullableWithAggregatesFilter<"Booking"> | string | null
    voucherUrl?: StringNullableWithAggregatesFilter<"Booking"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Booking"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Booking"> | Date | string
    passengerCount?: IntWithAggregatesFilter<"Booking"> | number
    leadPassenger?: JsonNullableWithAggregatesFilter<"Booking">
    externalBookingId?: StringNullableWithAggregatesFilter<"Booking"> | string | null
    apiResponse?: JsonNullableWithAggregatesFilter<"Booking">
    apiCalledAt?: DateTimeNullableWithAggregatesFilter<"Booking"> | Date | string | null
    syncedAt?: DateTimeNullableWithAggregatesFilter<"Booking"> | Date | string | null
  }

  export type BookingItemWhereInput = {
    AND?: BookingItemWhereInput | BookingItemWhereInput[]
    OR?: BookingItemWhereInput[]
    NOT?: BookingItemWhereInput | BookingItemWhereInput[]
    id?: StringFilter<"BookingItem"> | string
    bookingId?: StringFilter<"BookingItem"> | string
    productId?: StringNullableFilter<"BookingItem"> | string | null
    name?: StringFilter<"BookingItem"> | string
    date?: DateTimeNullableFilter<"BookingItem"> | Date | string | null
    quantity?: IntFilter<"BookingItem"> | number
    unitNet?: FloatFilter<"BookingItem"> | number
    unitGross?: FloatFilter<"BookingItem"> | number
    subtotalNet?: FloatFilter<"BookingItem"> | number
    subtotalGross?: FloatFilter<"BookingItem"> | number
    booking?: XOR<BookingScalarRelationFilter, BookingWhereInput>
    product?: XOR<ProductNullableScalarRelationFilter, ProductWhereInput> | null
  }

  export type BookingItemOrderByWithRelationInput = {
    id?: SortOrder
    bookingId?: SortOrder
    productId?: SortOrder
    name?: SortOrder
    date?: SortOrder
    quantity?: SortOrder
    unitNet?: SortOrder
    unitGross?: SortOrder
    subtotalNet?: SortOrder
    subtotalGross?: SortOrder
    booking?: BookingOrderByWithRelationInput
    product?: ProductOrderByWithRelationInput
  }

  export type BookingItemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BookingItemWhereInput | BookingItemWhereInput[]
    OR?: BookingItemWhereInput[]
    NOT?: BookingItemWhereInput | BookingItemWhereInput[]
    bookingId?: StringFilter<"BookingItem"> | string
    productId?: StringNullableFilter<"BookingItem"> | string | null
    name?: StringFilter<"BookingItem"> | string
    date?: DateTimeNullableFilter<"BookingItem"> | Date | string | null
    quantity?: IntFilter<"BookingItem"> | number
    unitNet?: FloatFilter<"BookingItem"> | number
    unitGross?: FloatFilter<"BookingItem"> | number
    subtotalNet?: FloatFilter<"BookingItem"> | number
    subtotalGross?: FloatFilter<"BookingItem"> | number
    booking?: XOR<BookingScalarRelationFilter, BookingWhereInput>
    product?: XOR<ProductNullableScalarRelationFilter, ProductWhereInput> | null
  }, "id">

  export type BookingItemOrderByWithAggregationInput = {
    id?: SortOrder
    bookingId?: SortOrder
    productId?: SortOrder
    name?: SortOrder
    date?: SortOrder
    quantity?: SortOrder
    unitNet?: SortOrder
    unitGross?: SortOrder
    subtotalNet?: SortOrder
    subtotalGross?: SortOrder
    _count?: BookingItemCountOrderByAggregateInput
    _avg?: BookingItemAvgOrderByAggregateInput
    _max?: BookingItemMaxOrderByAggregateInput
    _min?: BookingItemMinOrderByAggregateInput
    _sum?: BookingItemSumOrderByAggregateInput
  }

  export type BookingItemScalarWhereWithAggregatesInput = {
    AND?: BookingItemScalarWhereWithAggregatesInput | BookingItemScalarWhereWithAggregatesInput[]
    OR?: BookingItemScalarWhereWithAggregatesInput[]
    NOT?: BookingItemScalarWhereWithAggregatesInput | BookingItemScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"BookingItem"> | string
    bookingId?: StringWithAggregatesFilter<"BookingItem"> | string
    productId?: StringNullableWithAggregatesFilter<"BookingItem"> | string | null
    name?: StringWithAggregatesFilter<"BookingItem"> | string
    date?: DateTimeNullableWithAggregatesFilter<"BookingItem"> | Date | string | null
    quantity?: IntWithAggregatesFilter<"BookingItem"> | number
    unitNet?: FloatWithAggregatesFilter<"BookingItem"> | number
    unitGross?: FloatWithAggregatesFilter<"BookingItem"> | number
    subtotalNet?: FloatWithAggregatesFilter<"BookingItem"> | number
    subtotalGross?: FloatWithAggregatesFilter<"BookingItem"> | number
  }

  export type ExternalServiceMappingWhereInput = {
    AND?: ExternalServiceMappingWhereInput | ExternalServiceMappingWhereInput[]
    OR?: ExternalServiceMappingWhereInput[]
    NOT?: ExternalServiceMappingWhereInput | ExternalServiceMappingWhereInput[]
    id?: StringFilter<"ExternalServiceMapping"> | string
    serviceName?: StringFilter<"ExternalServiceMapping"> | string
    externalId?: StringFilter<"ExternalServiceMapping"> | string
    internalId?: StringFilter<"ExternalServiceMapping"> | string
    internalType?: StringFilter<"ExternalServiceMapping"> | string
    metadata?: JsonNullableFilter<"ExternalServiceMapping">
    isActive?: BoolFilter<"ExternalServiceMapping"> | boolean
    createdAt?: DateTimeFilter<"ExternalServiceMapping"> | Date | string
    updatedAt?: DateTimeFilter<"ExternalServiceMapping"> | Date | string
  }

  export type ExternalServiceMappingOrderByWithRelationInput = {
    id?: SortOrder
    serviceName?: SortOrder
    externalId?: SortOrder
    internalId?: SortOrder
    internalType?: SortOrder
    metadata?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ExternalServiceMappingWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    serviceName_externalId_internalType?: ExternalServiceMappingServiceNameExternalIdInternalTypeCompoundUniqueInput
    AND?: ExternalServiceMappingWhereInput | ExternalServiceMappingWhereInput[]
    OR?: ExternalServiceMappingWhereInput[]
    NOT?: ExternalServiceMappingWhereInput | ExternalServiceMappingWhereInput[]
    serviceName?: StringFilter<"ExternalServiceMapping"> | string
    externalId?: StringFilter<"ExternalServiceMapping"> | string
    internalId?: StringFilter<"ExternalServiceMapping"> | string
    internalType?: StringFilter<"ExternalServiceMapping"> | string
    metadata?: JsonNullableFilter<"ExternalServiceMapping">
    isActive?: BoolFilter<"ExternalServiceMapping"> | boolean
    createdAt?: DateTimeFilter<"ExternalServiceMapping"> | Date | string
    updatedAt?: DateTimeFilter<"ExternalServiceMapping"> | Date | string
  }, "id" | "serviceName_externalId_internalType">

  export type ExternalServiceMappingOrderByWithAggregationInput = {
    id?: SortOrder
    serviceName?: SortOrder
    externalId?: SortOrder
    internalId?: SortOrder
    internalType?: SortOrder
    metadata?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ExternalServiceMappingCountOrderByAggregateInput
    _max?: ExternalServiceMappingMaxOrderByAggregateInput
    _min?: ExternalServiceMappingMinOrderByAggregateInput
  }

  export type ExternalServiceMappingScalarWhereWithAggregatesInput = {
    AND?: ExternalServiceMappingScalarWhereWithAggregatesInput | ExternalServiceMappingScalarWhereWithAggregatesInput[]
    OR?: ExternalServiceMappingScalarWhereWithAggregatesInput[]
    NOT?: ExternalServiceMappingScalarWhereWithAggregatesInput | ExternalServiceMappingScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ExternalServiceMapping"> | string
    serviceName?: StringWithAggregatesFilter<"ExternalServiceMapping"> | string
    externalId?: StringWithAggregatesFilter<"ExternalServiceMapping"> | string
    internalId?: StringWithAggregatesFilter<"ExternalServiceMapping"> | string
    internalType?: StringWithAggregatesFilter<"ExternalServiceMapping"> | string
    metadata?: JsonNullableWithAggregatesFilter<"ExternalServiceMapping">
    isActive?: BoolWithAggregatesFilter<"ExternalServiceMapping"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"ExternalServiceMapping"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ExternalServiceMapping"> | Date | string
  }

  export type PaymentTransactionWhereInput = {
    AND?: PaymentTransactionWhereInput | PaymentTransactionWhereInput[]
    OR?: PaymentTransactionWhereInput[]
    NOT?: PaymentTransactionWhereInput | PaymentTransactionWhereInput[]
    id?: StringFilter<"PaymentTransaction"> | string
    bookingId?: StringFilter<"PaymentTransaction"> | string
    paymentIntentId?: StringFilter<"PaymentTransaction"> | string
    amount?: FloatFilter<"PaymentTransaction"> | number
    currency?: EnumCurrencyFilter<"PaymentTransaction"> | $Enums.Currency
    status?: EnumPaymentStatusFilter<"PaymentTransaction"> | $Enums.PaymentStatus
    gatewayResponse?: JsonNullableFilter<"PaymentTransaction">
    createdAt?: DateTimeFilter<"PaymentTransaction"> | Date | string
    updatedAt?: DateTimeFilter<"PaymentTransaction"> | Date | string
    booking?: XOR<BookingScalarRelationFilter, BookingWhereInput>
  }

  export type PaymentTransactionOrderByWithRelationInput = {
    id?: SortOrder
    bookingId?: SortOrder
    paymentIntentId?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    status?: SortOrder
    gatewayResponse?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    booking?: BookingOrderByWithRelationInput
  }

  export type PaymentTransactionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    paymentIntentId?: string
    AND?: PaymentTransactionWhereInput | PaymentTransactionWhereInput[]
    OR?: PaymentTransactionWhereInput[]
    NOT?: PaymentTransactionWhereInput | PaymentTransactionWhereInput[]
    bookingId?: StringFilter<"PaymentTransaction"> | string
    amount?: FloatFilter<"PaymentTransaction"> | number
    currency?: EnumCurrencyFilter<"PaymentTransaction"> | $Enums.Currency
    status?: EnumPaymentStatusFilter<"PaymentTransaction"> | $Enums.PaymentStatus
    gatewayResponse?: JsonNullableFilter<"PaymentTransaction">
    createdAt?: DateTimeFilter<"PaymentTransaction"> | Date | string
    updatedAt?: DateTimeFilter<"PaymentTransaction"> | Date | string
    booking?: XOR<BookingScalarRelationFilter, BookingWhereInput>
  }, "id" | "paymentIntentId">

  export type PaymentTransactionOrderByWithAggregationInput = {
    id?: SortOrder
    bookingId?: SortOrder
    paymentIntentId?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    status?: SortOrder
    gatewayResponse?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PaymentTransactionCountOrderByAggregateInput
    _avg?: PaymentTransactionAvgOrderByAggregateInput
    _max?: PaymentTransactionMaxOrderByAggregateInput
    _min?: PaymentTransactionMinOrderByAggregateInput
    _sum?: PaymentTransactionSumOrderByAggregateInput
  }

  export type PaymentTransactionScalarWhereWithAggregatesInput = {
    AND?: PaymentTransactionScalarWhereWithAggregatesInput | PaymentTransactionScalarWhereWithAggregatesInput[]
    OR?: PaymentTransactionScalarWhereWithAggregatesInput[]
    NOT?: PaymentTransactionScalarWhereWithAggregatesInput | PaymentTransactionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PaymentTransaction"> | string
    bookingId?: StringWithAggregatesFilter<"PaymentTransaction"> | string
    paymentIntentId?: StringWithAggregatesFilter<"PaymentTransaction"> | string
    amount?: FloatWithAggregatesFilter<"PaymentTransaction"> | number
    currency?: EnumCurrencyWithAggregatesFilter<"PaymentTransaction"> | $Enums.Currency
    status?: EnumPaymentStatusWithAggregatesFilter<"PaymentTransaction"> | $Enums.PaymentStatus
    gatewayResponse?: JsonNullableWithAggregatesFilter<"PaymentTransaction">
    createdAt?: DateTimeWithAggregatesFilter<"PaymentTransaction"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PaymentTransaction"> | Date | string
  }

  export type BillingRecordWhereInput = {
    AND?: BillingRecordWhereInput | BillingRecordWhereInput[]
    OR?: BillingRecordWhereInput[]
    NOT?: BillingRecordWhereInput | BillingRecordWhereInput[]
    id?: StringFilter<"BillingRecord"> | string
    userId?: StringFilter<"BillingRecord"> | string
    bookingId?: StringFilter<"BillingRecord"> | string
    planName?: StringNullableFilter<"BillingRecord"> | string | null
    duration?: IntNullableFilter<"BillingRecord"> | number | null
    price?: FloatFilter<"BillingRecord"> | number
    paymentSessionId?: StringNullableFilter<"BillingRecord"> | string | null
    purchasedAt?: DateTimeFilter<"BillingRecord"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    booking?: XOR<BookingScalarRelationFilter, BookingWhereInput>
  }

  export type BillingRecordOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    bookingId?: SortOrder
    planName?: SortOrder
    duration?: SortOrder
    price?: SortOrder
    paymentSessionId?: SortOrder
    purchasedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    booking?: BookingOrderByWithRelationInput
  }

  export type BillingRecordWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BillingRecordWhereInput | BillingRecordWhereInput[]
    OR?: BillingRecordWhereInput[]
    NOT?: BillingRecordWhereInput | BillingRecordWhereInput[]
    userId?: StringFilter<"BillingRecord"> | string
    bookingId?: StringFilter<"BillingRecord"> | string
    planName?: StringNullableFilter<"BillingRecord"> | string | null
    duration?: IntNullableFilter<"BillingRecord"> | number | null
    price?: FloatFilter<"BillingRecord"> | number
    paymentSessionId?: StringNullableFilter<"BillingRecord"> | string | null
    purchasedAt?: DateTimeFilter<"BillingRecord"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    booking?: XOR<BookingScalarRelationFilter, BookingWhereInput>
  }, "id">

  export type BillingRecordOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    bookingId?: SortOrder
    planName?: SortOrder
    duration?: SortOrder
    price?: SortOrder
    paymentSessionId?: SortOrder
    purchasedAt?: SortOrder
    _count?: BillingRecordCountOrderByAggregateInput
    _avg?: BillingRecordAvgOrderByAggregateInput
    _max?: BillingRecordMaxOrderByAggregateInput
    _min?: BillingRecordMinOrderByAggregateInput
    _sum?: BillingRecordSumOrderByAggregateInput
  }

  export type BillingRecordScalarWhereWithAggregatesInput = {
    AND?: BillingRecordScalarWhereWithAggregatesInput | BillingRecordScalarWhereWithAggregatesInput[]
    OR?: BillingRecordScalarWhereWithAggregatesInput[]
    NOT?: BillingRecordScalarWhereWithAggregatesInput | BillingRecordScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"BillingRecord"> | string
    userId?: StringWithAggregatesFilter<"BillingRecord"> | string
    bookingId?: StringWithAggregatesFilter<"BillingRecord"> | string
    planName?: StringNullableWithAggregatesFilter<"BillingRecord"> | string | null
    duration?: IntNullableWithAggregatesFilter<"BillingRecord"> | number | null
    price?: FloatWithAggregatesFilter<"BillingRecord"> | number
    paymentSessionId?: StringNullableWithAggregatesFilter<"BillingRecord"> | string | null
    purchasedAt?: DateTimeWithAggregatesFilter<"BillingRecord"> | Date | string
  }

  export type SettingsWhereInput = {
    AND?: SettingsWhereInput | SettingsWhereInput[]
    OR?: SettingsWhereInput[]
    NOT?: SettingsWhereInput | SettingsWhereInput[]
    id?: StringFilter<"Settings"> | string
    type?: StringFilter<"Settings"> | string
    value?: JsonFilter<"Settings">
    createdAt?: DateTimeFilter<"Settings"> | Date | string
    updatedAt?: DateTimeFilter<"Settings"> | Date | string
  }

  export type SettingsOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SettingsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    type?: string
    AND?: SettingsWhereInput | SettingsWhereInput[]
    OR?: SettingsWhereInput[]
    NOT?: SettingsWhereInput | SettingsWhereInput[]
    value?: JsonFilter<"Settings">
    createdAt?: DateTimeFilter<"Settings"> | Date | string
    updatedAt?: DateTimeFilter<"Settings"> | Date | string
  }, "id" | "type">

  export type SettingsOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SettingsCountOrderByAggregateInput
    _max?: SettingsMaxOrderByAggregateInput
    _min?: SettingsMinOrderByAggregateInput
  }

  export type SettingsScalarWhereWithAggregatesInput = {
    AND?: SettingsScalarWhereWithAggregatesInput | SettingsScalarWhereWithAggregatesInput[]
    OR?: SettingsScalarWhereWithAggregatesInput[]
    NOT?: SettingsScalarWhereWithAggregatesInput | SettingsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Settings"> | string
    type?: StringWithAggregatesFilter<"Settings"> | string
    value?: JsonWithAggregatesFilter<"Settings">
    createdAt?: DateTimeWithAggregatesFilter<"Settings"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Settings"> | Date | string
  }

  export type ApprovedTourWhereInput = {
    AND?: ApprovedTourWhereInput | ApprovedTourWhereInput[]
    OR?: ApprovedTourWhereInput[]
    NOT?: ApprovedTourWhereInput | ApprovedTourWhereInput[]
    id?: StringFilter<"ApprovedTour"> | string
    tourId?: StringFilter<"ApprovedTour"> | string
    createdAt?: DateTimeFilter<"ApprovedTour"> | Date | string
  }

  export type ApprovedTourOrderByWithRelationInput = {
    id?: SortOrder
    tourId?: SortOrder
    createdAt?: SortOrder
  }

  export type ApprovedTourWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    tourId?: string
    AND?: ApprovedTourWhereInput | ApprovedTourWhereInput[]
    OR?: ApprovedTourWhereInput[]
    NOT?: ApprovedTourWhereInput | ApprovedTourWhereInput[]
    createdAt?: DateTimeFilter<"ApprovedTour"> | Date | string
  }, "id" | "tourId">

  export type ApprovedTourOrderByWithAggregationInput = {
    id?: SortOrder
    tourId?: SortOrder
    createdAt?: SortOrder
    _count?: ApprovedTourCountOrderByAggregateInput
    _max?: ApprovedTourMaxOrderByAggregateInput
    _min?: ApprovedTourMinOrderByAggregateInput
  }

  export type ApprovedTourScalarWhereWithAggregatesInput = {
    AND?: ApprovedTourScalarWhereWithAggregatesInput | ApprovedTourScalarWhereWithAggregatesInput[]
    OR?: ApprovedTourScalarWhereWithAggregatesInput[]
    NOT?: ApprovedTourScalarWhereWithAggregatesInput | ApprovedTourScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ApprovedTour"> | string
    tourId?: StringWithAggregatesFilter<"ApprovedTour"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ApprovedTour"> | Date | string
  }

  export type ComplaintWhereInput = {
    AND?: ComplaintWhereInput | ComplaintWhereInput[]
    OR?: ComplaintWhereInput[]
    NOT?: ComplaintWhereInput | ComplaintWhereInput[]
    id?: StringFilter<"Complaint"> | string
    userId?: StringFilter<"Complaint"> | string
    subject?: StringFilter<"Complaint"> | string
    category?: EnumComplaintCategoryFilter<"Complaint"> | $Enums.ComplaintCategory
    priority?: EnumComplaintPriorityFilter<"Complaint"> | $Enums.ComplaintPriority
    status?: EnumComplaintStatusFilter<"Complaint"> | $Enums.ComplaintStatus
    bookingId?: StringNullableFilter<"Complaint"> | string | null
    tourId?: StringNullableFilter<"Complaint"> | string | null
    tourName?: StringNullableFilter<"Complaint"> | string | null
    description?: StringFilter<"Complaint"> | string
    expectedOutcome?: StringNullableFilter<"Complaint"> | string | null
    refundAmount?: FloatNullableFilter<"Complaint"> | number | null
    contactEmail?: StringFilter<"Complaint"> | string
    contactPhone?: StringFilter<"Complaint"> | string
    preferredContactMethod?: StringNullableFilter<"Complaint"> | string | null
    attachments?: JsonNullableFilter<"Complaint">
    adminResponse?: StringNullableFilter<"Complaint"> | string | null
    resolvedAt?: DateTimeNullableFilter<"Complaint"> | Date | string | null
    assignedTo?: StringNullableFilter<"Complaint"> | string | null
    rating?: IntNullableFilter<"Complaint"> | number | null
    ratingComment?: StringNullableFilter<"Complaint"> | string | null
    createdAt?: DateTimeFilter<"Complaint"> | Date | string
    updatedAt?: DateTimeFilter<"Complaint"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    booking?: XOR<BookingNullableScalarRelationFilter, BookingWhereInput> | null
    messages?: ComplaintMessageListRelationFilter
  }

  export type ComplaintOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    subject?: SortOrder
    category?: SortOrder
    priority?: SortOrder
    status?: SortOrder
    bookingId?: SortOrder
    tourId?: SortOrder
    tourName?: SortOrder
    description?: SortOrder
    expectedOutcome?: SortOrder
    refundAmount?: SortOrder
    contactEmail?: SortOrder
    contactPhone?: SortOrder
    preferredContactMethod?: SortOrder
    attachments?: SortOrder
    adminResponse?: SortOrder
    resolvedAt?: SortOrder
    assignedTo?: SortOrder
    rating?: SortOrder
    ratingComment?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    booking?: BookingOrderByWithRelationInput
    messages?: ComplaintMessageOrderByRelationAggregateInput
  }

  export type ComplaintWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ComplaintWhereInput | ComplaintWhereInput[]
    OR?: ComplaintWhereInput[]
    NOT?: ComplaintWhereInput | ComplaintWhereInput[]
    userId?: StringFilter<"Complaint"> | string
    subject?: StringFilter<"Complaint"> | string
    category?: EnumComplaintCategoryFilter<"Complaint"> | $Enums.ComplaintCategory
    priority?: EnumComplaintPriorityFilter<"Complaint"> | $Enums.ComplaintPriority
    status?: EnumComplaintStatusFilter<"Complaint"> | $Enums.ComplaintStatus
    bookingId?: StringNullableFilter<"Complaint"> | string | null
    tourId?: StringNullableFilter<"Complaint"> | string | null
    tourName?: StringNullableFilter<"Complaint"> | string | null
    description?: StringFilter<"Complaint"> | string
    expectedOutcome?: StringNullableFilter<"Complaint"> | string | null
    refundAmount?: FloatNullableFilter<"Complaint"> | number | null
    contactEmail?: StringFilter<"Complaint"> | string
    contactPhone?: StringFilter<"Complaint"> | string
    preferredContactMethod?: StringNullableFilter<"Complaint"> | string | null
    attachments?: JsonNullableFilter<"Complaint">
    adminResponse?: StringNullableFilter<"Complaint"> | string | null
    resolvedAt?: DateTimeNullableFilter<"Complaint"> | Date | string | null
    assignedTo?: StringNullableFilter<"Complaint"> | string | null
    rating?: IntNullableFilter<"Complaint"> | number | null
    ratingComment?: StringNullableFilter<"Complaint"> | string | null
    createdAt?: DateTimeFilter<"Complaint"> | Date | string
    updatedAt?: DateTimeFilter<"Complaint"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    booking?: XOR<BookingNullableScalarRelationFilter, BookingWhereInput> | null
    messages?: ComplaintMessageListRelationFilter
  }, "id">

  export type ComplaintOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    subject?: SortOrder
    category?: SortOrder
    priority?: SortOrder
    status?: SortOrder
    bookingId?: SortOrder
    tourId?: SortOrder
    tourName?: SortOrder
    description?: SortOrder
    expectedOutcome?: SortOrder
    refundAmount?: SortOrder
    contactEmail?: SortOrder
    contactPhone?: SortOrder
    preferredContactMethod?: SortOrder
    attachments?: SortOrder
    adminResponse?: SortOrder
    resolvedAt?: SortOrder
    assignedTo?: SortOrder
    rating?: SortOrder
    ratingComment?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ComplaintCountOrderByAggregateInput
    _avg?: ComplaintAvgOrderByAggregateInput
    _max?: ComplaintMaxOrderByAggregateInput
    _min?: ComplaintMinOrderByAggregateInput
    _sum?: ComplaintSumOrderByAggregateInput
  }

  export type ComplaintScalarWhereWithAggregatesInput = {
    AND?: ComplaintScalarWhereWithAggregatesInput | ComplaintScalarWhereWithAggregatesInput[]
    OR?: ComplaintScalarWhereWithAggregatesInput[]
    NOT?: ComplaintScalarWhereWithAggregatesInput | ComplaintScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Complaint"> | string
    userId?: StringWithAggregatesFilter<"Complaint"> | string
    subject?: StringWithAggregatesFilter<"Complaint"> | string
    category?: EnumComplaintCategoryWithAggregatesFilter<"Complaint"> | $Enums.ComplaintCategory
    priority?: EnumComplaintPriorityWithAggregatesFilter<"Complaint"> | $Enums.ComplaintPriority
    status?: EnumComplaintStatusWithAggregatesFilter<"Complaint"> | $Enums.ComplaintStatus
    bookingId?: StringNullableWithAggregatesFilter<"Complaint"> | string | null
    tourId?: StringNullableWithAggregatesFilter<"Complaint"> | string | null
    tourName?: StringNullableWithAggregatesFilter<"Complaint"> | string | null
    description?: StringWithAggregatesFilter<"Complaint"> | string
    expectedOutcome?: StringNullableWithAggregatesFilter<"Complaint"> | string | null
    refundAmount?: FloatNullableWithAggregatesFilter<"Complaint"> | number | null
    contactEmail?: StringWithAggregatesFilter<"Complaint"> | string
    contactPhone?: StringWithAggregatesFilter<"Complaint"> | string
    preferredContactMethod?: StringNullableWithAggregatesFilter<"Complaint"> | string | null
    attachments?: JsonNullableWithAggregatesFilter<"Complaint">
    adminResponse?: StringNullableWithAggregatesFilter<"Complaint"> | string | null
    resolvedAt?: DateTimeNullableWithAggregatesFilter<"Complaint"> | Date | string | null
    assignedTo?: StringNullableWithAggregatesFilter<"Complaint"> | string | null
    rating?: IntNullableWithAggregatesFilter<"Complaint"> | number | null
    ratingComment?: StringNullableWithAggregatesFilter<"Complaint"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Complaint"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Complaint"> | Date | string
  }

  export type ComplaintMessageWhereInput = {
    AND?: ComplaintMessageWhereInput | ComplaintMessageWhereInput[]
    OR?: ComplaintMessageWhereInput[]
    NOT?: ComplaintMessageWhereInput | ComplaintMessageWhereInput[]
    id?: StringFilter<"ComplaintMessage"> | string
    complaintId?: StringFilter<"ComplaintMessage"> | string
    senderType?: StringFilter<"ComplaintMessage"> | string
    senderId?: StringFilter<"ComplaintMessage"> | string
    message?: StringFilter<"ComplaintMessage"> | string
    attachments?: JsonNullableFilter<"ComplaintMessage">
    isRead?: BoolFilter<"ComplaintMessage"> | boolean
    createdAt?: DateTimeFilter<"ComplaintMessage"> | Date | string
    complaint?: XOR<ComplaintScalarRelationFilter, ComplaintWhereInput>
  }

  export type ComplaintMessageOrderByWithRelationInput = {
    id?: SortOrder
    complaintId?: SortOrder
    senderType?: SortOrder
    senderId?: SortOrder
    message?: SortOrder
    attachments?: SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
    complaint?: ComplaintOrderByWithRelationInput
  }

  export type ComplaintMessageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ComplaintMessageWhereInput | ComplaintMessageWhereInput[]
    OR?: ComplaintMessageWhereInput[]
    NOT?: ComplaintMessageWhereInput | ComplaintMessageWhereInput[]
    complaintId?: StringFilter<"ComplaintMessage"> | string
    senderType?: StringFilter<"ComplaintMessage"> | string
    senderId?: StringFilter<"ComplaintMessage"> | string
    message?: StringFilter<"ComplaintMessage"> | string
    attachments?: JsonNullableFilter<"ComplaintMessage">
    isRead?: BoolFilter<"ComplaintMessage"> | boolean
    createdAt?: DateTimeFilter<"ComplaintMessage"> | Date | string
    complaint?: XOR<ComplaintScalarRelationFilter, ComplaintWhereInput>
  }, "id">

  export type ComplaintMessageOrderByWithAggregationInput = {
    id?: SortOrder
    complaintId?: SortOrder
    senderType?: SortOrder
    senderId?: SortOrder
    message?: SortOrder
    attachments?: SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
    _count?: ComplaintMessageCountOrderByAggregateInput
    _max?: ComplaintMessageMaxOrderByAggregateInput
    _min?: ComplaintMessageMinOrderByAggregateInput
  }

  export type ComplaintMessageScalarWhereWithAggregatesInput = {
    AND?: ComplaintMessageScalarWhereWithAggregatesInput | ComplaintMessageScalarWhereWithAggregatesInput[]
    OR?: ComplaintMessageScalarWhereWithAggregatesInput[]
    NOT?: ComplaintMessageScalarWhereWithAggregatesInput | ComplaintMessageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ComplaintMessage"> | string
    complaintId?: StringWithAggregatesFilter<"ComplaintMessage"> | string
    senderType?: StringWithAggregatesFilter<"ComplaintMessage"> | string
    senderId?: StringWithAggregatesFilter<"ComplaintMessage"> | string
    message?: StringWithAggregatesFilter<"ComplaintMessage"> | string
    attachments?: JsonNullableWithAggregatesFilter<"ComplaintMessage">
    isRead?: BoolWithAggregatesFilter<"ComplaintMessage"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"ComplaintMessage"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phoneNumber: string
    dateOfBirth?: Date | string | null
    nationality: string
    password: string
    role?: $Enums.Role
    preferredLanguage?: string
    companyName?: string | null
    businessLicense?: string | null
    markupType?: string | null
    markupValue?: number | null
    isActive?: boolean
    emailVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    metadata?: InputJsonValue | null
    bookings?: BookingCreateNestedManyWithoutUserInput
    createdProducts?: ProductCreateNestedManyWithoutCreatedByInput
    b2bAccounts?: B2BAccountCreateNestedManyWithoutUserInput
    managedUsers?: UserCreateNestedManyWithoutAccountManagerInput
    accountManager?: UserCreateNestedOneWithoutManagedUsersInput
    billingRecords?: BillingRecordCreateNestedManyWithoutUserInput
    complaints?: ComplaintCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phoneNumber: string
    dateOfBirth?: Date | string | null
    nationality: string
    password: string
    role?: $Enums.Role
    preferredLanguage?: string
    companyName?: string | null
    businessLicense?: string | null
    markupType?: string | null
    markupValue?: number | null
    isActive?: boolean
    emailVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    metadata?: InputJsonValue | null
    accountManagerId?: string | null
    bookings?: BookingUncheckedCreateNestedManyWithoutUserInput
    createdProducts?: ProductUncheckedCreateNestedManyWithoutCreatedByInput
    b2bAccounts?: B2BAccountUncheckedCreateNestedManyWithoutUserInput
    managedUsers?: UserUncheckedCreateNestedManyWithoutAccountManagerInput
    billingRecords?: BillingRecordUncheckedCreateNestedManyWithoutUserInput
    complaints?: ComplaintUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nationality?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    businessLicense?: NullableStringFieldUpdateOperationsInput | string | null
    markupType?: NullableStringFieldUpdateOperationsInput | string | null
    markupValue?: NullableFloatFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: InputJsonValue | InputJsonValue | null
    bookings?: BookingUpdateManyWithoutUserNestedInput
    createdProducts?: ProductUpdateManyWithoutCreatedByNestedInput
    b2bAccounts?: B2BAccountUpdateManyWithoutUserNestedInput
    managedUsers?: UserUpdateManyWithoutAccountManagerNestedInput
    accountManager?: UserUpdateOneWithoutManagedUsersNestedInput
    billingRecords?: BillingRecordUpdateManyWithoutUserNestedInput
    complaints?: ComplaintUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nationality?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    businessLicense?: NullableStringFieldUpdateOperationsInput | string | null
    markupType?: NullableStringFieldUpdateOperationsInput | string | null
    markupValue?: NullableFloatFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: InputJsonValue | InputJsonValue | null
    accountManagerId?: NullableStringFieldUpdateOperationsInput | string | null
    bookings?: BookingUncheckedUpdateManyWithoutUserNestedInput
    createdProducts?: ProductUncheckedUpdateManyWithoutCreatedByNestedInput
    b2bAccounts?: B2BAccountUncheckedUpdateManyWithoutUserNestedInput
    managedUsers?: UserUncheckedUpdateManyWithoutAccountManagerNestedInput
    billingRecords?: BillingRecordUncheckedUpdateManyWithoutUserNestedInput
    complaints?: ComplaintUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phoneNumber: string
    dateOfBirth?: Date | string | null
    nationality: string
    password: string
    role?: $Enums.Role
    preferredLanguage?: string
    companyName?: string | null
    businessLicense?: string | null
    markupType?: string | null
    markupValue?: number | null
    isActive?: boolean
    emailVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    metadata?: InputJsonValue | null
    accountManagerId?: string | null
  }

  export type UserUpdateManyMutationInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nationality?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    businessLicense?: NullableStringFieldUpdateOperationsInput | string | null
    markupType?: NullableStringFieldUpdateOperationsInput | string | null
    markupValue?: NullableFloatFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: InputJsonValue | InputJsonValue | null
  }

  export type UserUncheckedUpdateManyInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nationality?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    businessLicense?: NullableStringFieldUpdateOperationsInput | string | null
    markupType?: NullableStringFieldUpdateOperationsInput | string | null
    markupValue?: NullableFloatFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: InputJsonValue | InputJsonValue | null
    accountManagerId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CategoryCreateInput = {
    id?: string
    name: string
    description: string
    slug: string
    icon?: string | null
    status?: $Enums.CategoryStatus
    displayOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    products?: ProductCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateInput = {
    id?: string
    name: string
    description: string
    slug: string
    icon?: string | null
    status?: $Enums.CategoryStatus
    displayOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    products?: ProductUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCategoryStatusFieldUpdateOperationsInput | $Enums.CategoryStatus
    displayOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    products?: ProductUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCategoryStatusFieldUpdateOperationsInput | $Enums.CategoryStatus
    displayOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    products?: ProductUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryCreateManyInput = {
    id?: string
    name: string
    description: string
    slug: string
    icon?: string | null
    status?: $Enums.CategoryStatus
    displayOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CategoryUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCategoryStatusFieldUpdateOperationsInput | $Enums.CategoryStatus
    displayOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCategoryStatusFieldUpdateOperationsInput | $Enums.CategoryStatus
    displayOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductCreateInput = {
    id?: string
    name: string
    slug: string
    type: $Enums.ProductType
    shortDesc?: string | null
    longDesc?: string | null
    baseCurrency?: $Enums.Currency
    basePrice: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    externalIds?: InputJsonValue | null
    images?: ProductImageCreateNestedManyWithoutProductInput
    category: CategoryCreateNestedOneWithoutProductsInput
    createdBy?: UserCreateNestedOneWithoutCreatedProductsInput
    markupRules?: MarkupRuleCreateNestedManyWithoutProductInput
    bookingItems?: BookingItemCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateInput = {
    id?: string
    name: string
    slug: string
    type: $Enums.ProductType
    shortDesc?: string | null
    longDesc?: string | null
    baseCurrency?: $Enums.Currency
    basePrice: number
    isActive?: boolean
    categoryId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    externalIds?: InputJsonValue | null
    images?: ProductImageUncheckedCreateNestedManyWithoutProductInput
    markupRules?: MarkupRuleUncheckedCreateNestedManyWithoutProductInput
    bookingItems?: BookingItemUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    type?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    longDesc?: NullableStringFieldUpdateOperationsInput | string | null
    baseCurrency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    basePrice?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    externalIds?: InputJsonValue | InputJsonValue | null
    images?: ProductImageUpdateManyWithoutProductNestedInput
    category?: CategoryUpdateOneRequiredWithoutProductsNestedInput
    createdBy?: UserUpdateOneWithoutCreatedProductsNestedInput
    markupRules?: MarkupRuleUpdateManyWithoutProductNestedInput
    bookingItems?: BookingItemUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    type?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    longDesc?: NullableStringFieldUpdateOperationsInput | string | null
    baseCurrency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    basePrice?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    categoryId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    externalIds?: InputJsonValue | InputJsonValue | null
    images?: ProductImageUncheckedUpdateManyWithoutProductNestedInput
    markupRules?: MarkupRuleUncheckedUpdateManyWithoutProductNestedInput
    bookingItems?: BookingItemUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductCreateManyInput = {
    id?: string
    name: string
    slug: string
    type: $Enums.ProductType
    shortDesc?: string | null
    longDesc?: string | null
    baseCurrency?: $Enums.Currency
    basePrice: number
    isActive?: boolean
    categoryId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    externalIds?: InputJsonValue | null
  }

  export type ProductUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    type?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    longDesc?: NullableStringFieldUpdateOperationsInput | string | null
    baseCurrency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    basePrice?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    externalIds?: InputJsonValue | InputJsonValue | null
  }

  export type ProductUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    type?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    longDesc?: NullableStringFieldUpdateOperationsInput | string | null
    baseCurrency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    basePrice?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    categoryId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    externalIds?: InputJsonValue | InputJsonValue | null
  }

  export type ProductImageCreateInput = {
    id?: string
    url: string
    alt?: string | null
    product: ProductCreateNestedOneWithoutImagesInput
  }

  export type ProductImageUncheckedCreateInput = {
    id?: string
    url: string
    alt?: string | null
    productId: string
  }

  export type ProductImageUpdateInput = {
    url?: StringFieldUpdateOperationsInput | string
    alt?: NullableStringFieldUpdateOperationsInput | string | null
    product?: ProductUpdateOneRequiredWithoutImagesNestedInput
  }

  export type ProductImageUncheckedUpdateInput = {
    url?: StringFieldUpdateOperationsInput | string
    alt?: NullableStringFieldUpdateOperationsInput | string | null
    productId?: StringFieldUpdateOperationsInput | string
  }

  export type ProductImageCreateManyInput = {
    id?: string
    url: string
    alt?: string | null
    productId: string
  }

  export type ProductImageUpdateManyMutationInput = {
    url?: StringFieldUpdateOperationsInput | string
    alt?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProductImageUncheckedUpdateManyInput = {
    url?: StringFieldUpdateOperationsInput | string
    alt?: NullableStringFieldUpdateOperationsInput | string | null
    productId?: StringFieldUpdateOperationsInput | string
  }

  export type B2BAccountCreateInput = {
    id?: string
    name: string
    code: string
    defaultMarkup?: number
    currency?: $Enums.Currency
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutB2bAccountsInput
    markupRules?: MarkupRuleCreateNestedManyWithoutB2bAccountInput
    bookings?: BookingCreateNestedManyWithoutB2bAccountInput
  }

  export type B2BAccountUncheckedCreateInput = {
    id?: string
    name: string
    code: string
    userId?: string | null
    defaultMarkup?: number
    currency?: $Enums.Currency
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    markupRules?: MarkupRuleUncheckedCreateNestedManyWithoutB2bAccountInput
    bookings?: BookingUncheckedCreateNestedManyWithoutB2bAccountInput
  }

  export type B2BAccountUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    defaultMarkup?: FloatFieldUpdateOperationsInput | number
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutB2bAccountsNestedInput
    markupRules?: MarkupRuleUpdateManyWithoutB2bAccountNestedInput
    bookings?: BookingUpdateManyWithoutB2bAccountNestedInput
  }

  export type B2BAccountUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    defaultMarkup?: FloatFieldUpdateOperationsInput | number
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    markupRules?: MarkupRuleUncheckedUpdateManyWithoutB2bAccountNestedInput
    bookings?: BookingUncheckedUpdateManyWithoutB2bAccountNestedInput
  }

  export type B2BAccountCreateManyInput = {
    id?: string
    name: string
    code: string
    userId?: string | null
    defaultMarkup?: number
    currency?: $Enums.Currency
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type B2BAccountUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    defaultMarkup?: FloatFieldUpdateOperationsInput | number
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type B2BAccountUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    defaultMarkup?: FloatFieldUpdateOperationsInput | number
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MarkupRuleCreateInput = {
    id?: string
    percentage: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    b2bAccount?: B2BAccountCreateNestedOneWithoutMarkupRulesInput
    product?: ProductCreateNestedOneWithoutMarkupRulesInput
  }

  export type MarkupRuleUncheckedCreateInput = {
    id?: string
    b2bAccountId?: string | null
    productId?: string | null
    percentage: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
  }

  export type MarkupRuleUpdateInput = {
    percentage?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    b2bAccount?: B2BAccountUpdateOneWithoutMarkupRulesNestedInput
    product?: ProductUpdateOneWithoutMarkupRulesNestedInput
  }

  export type MarkupRuleUncheckedUpdateInput = {
    b2bAccountId?: NullableStringFieldUpdateOperationsInput | string | null
    productId?: NullableStringFieldUpdateOperationsInput | string | null
    percentage?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MarkupRuleCreateManyInput = {
    id?: string
    b2bAccountId?: string | null
    productId?: string | null
    percentage: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
  }

  export type MarkupRuleUpdateManyMutationInput = {
    percentage?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MarkupRuleUncheckedUpdateManyInput = {
    b2bAccountId?: NullableStringFieldUpdateOperationsInput | string | null
    productId?: NullableStringFieldUpdateOperationsInput | string | null
    percentage?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type BookingCreateInput = {
    id?: string
    reference: string
    status?: $Enums.BookingStatus
    paymentMethod?: $Enums.PaymentMethod | null
    paymentStatus?: $Enums.PaymentStatus
    paymentIntentId?: string | null
    paymentGateway?: string | null
    gatewayReference?: string | null
    currency?: $Enums.Currency
    totalNet: number
    totalMarkup: number
    totalGross: number
    supplierRef?: string | null
    voucherUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    passengerCount?: number
    leadPassenger?: InputJsonValue | null
    externalBookingId?: string | null
    apiResponse?: InputJsonValue | null
    apiCalledAt?: Date | string | null
    syncedAt?: Date | string | null
    user?: UserCreateNestedOneWithoutBookingsInput
    b2bAccount?: B2BAccountCreateNestedOneWithoutBookingsInput
    items?: BookingItemCreateNestedManyWithoutBookingInput
    paymentTransactions?: PaymentTransactionCreateNestedManyWithoutBookingInput
    billingRecords?: BillingRecordCreateNestedManyWithoutBookingInput
    complaints?: ComplaintCreateNestedManyWithoutBookingInput
  }

  export type BookingUncheckedCreateInput = {
    id?: string
    reference: string
    userId?: string | null
    b2bAccountId?: string | null
    status?: $Enums.BookingStatus
    paymentMethod?: $Enums.PaymentMethod | null
    paymentStatus?: $Enums.PaymentStatus
    paymentIntentId?: string | null
    paymentGateway?: string | null
    gatewayReference?: string | null
    currency?: $Enums.Currency
    totalNet: number
    totalMarkup: number
    totalGross: number
    supplierRef?: string | null
    voucherUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    passengerCount?: number
    leadPassenger?: InputJsonValue | null
    externalBookingId?: string | null
    apiResponse?: InputJsonValue | null
    apiCalledAt?: Date | string | null
    syncedAt?: Date | string | null
    items?: BookingItemUncheckedCreateNestedManyWithoutBookingInput
    paymentTransactions?: PaymentTransactionUncheckedCreateNestedManyWithoutBookingInput
    billingRecords?: BillingRecordUncheckedCreateNestedManyWithoutBookingInput
    complaints?: ComplaintUncheckedCreateNestedManyWithoutBookingInput
  }

  export type BookingUpdateInput = {
    reference?: StringFieldUpdateOperationsInput | string
    status?: EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus
    paymentMethod?: NullableEnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod | null
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    paymentIntentId?: NullableStringFieldUpdateOperationsInput | string | null
    paymentGateway?: NullableStringFieldUpdateOperationsInput | string | null
    gatewayReference?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    totalNet?: FloatFieldUpdateOperationsInput | number
    totalMarkup?: FloatFieldUpdateOperationsInput | number
    totalGross?: FloatFieldUpdateOperationsInput | number
    supplierRef?: NullableStringFieldUpdateOperationsInput | string | null
    voucherUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passengerCount?: IntFieldUpdateOperationsInput | number
    leadPassenger?: InputJsonValue | InputJsonValue | null
    externalBookingId?: NullableStringFieldUpdateOperationsInput | string | null
    apiResponse?: InputJsonValue | InputJsonValue | null
    apiCalledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneWithoutBookingsNestedInput
    b2bAccount?: B2BAccountUpdateOneWithoutBookingsNestedInput
    items?: BookingItemUpdateManyWithoutBookingNestedInput
    paymentTransactions?: PaymentTransactionUpdateManyWithoutBookingNestedInput
    billingRecords?: BillingRecordUpdateManyWithoutBookingNestedInput
    complaints?: ComplaintUpdateManyWithoutBookingNestedInput
  }

  export type BookingUncheckedUpdateInput = {
    reference?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    b2bAccountId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus
    paymentMethod?: NullableEnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod | null
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    paymentIntentId?: NullableStringFieldUpdateOperationsInput | string | null
    paymentGateway?: NullableStringFieldUpdateOperationsInput | string | null
    gatewayReference?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    totalNet?: FloatFieldUpdateOperationsInput | number
    totalMarkup?: FloatFieldUpdateOperationsInput | number
    totalGross?: FloatFieldUpdateOperationsInput | number
    supplierRef?: NullableStringFieldUpdateOperationsInput | string | null
    voucherUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passengerCount?: IntFieldUpdateOperationsInput | number
    leadPassenger?: InputJsonValue | InputJsonValue | null
    externalBookingId?: NullableStringFieldUpdateOperationsInput | string | null
    apiResponse?: InputJsonValue | InputJsonValue | null
    apiCalledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    items?: BookingItemUncheckedUpdateManyWithoutBookingNestedInput
    paymentTransactions?: PaymentTransactionUncheckedUpdateManyWithoutBookingNestedInput
    billingRecords?: BillingRecordUncheckedUpdateManyWithoutBookingNestedInput
    complaints?: ComplaintUncheckedUpdateManyWithoutBookingNestedInput
  }

  export type BookingCreateManyInput = {
    id?: string
    reference: string
    userId?: string | null
    b2bAccountId?: string | null
    status?: $Enums.BookingStatus
    paymentMethod?: $Enums.PaymentMethod | null
    paymentStatus?: $Enums.PaymentStatus
    paymentIntentId?: string | null
    paymentGateway?: string | null
    gatewayReference?: string | null
    currency?: $Enums.Currency
    totalNet: number
    totalMarkup: number
    totalGross: number
    supplierRef?: string | null
    voucherUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    passengerCount?: number
    leadPassenger?: InputJsonValue | null
    externalBookingId?: string | null
    apiResponse?: InputJsonValue | null
    apiCalledAt?: Date | string | null
    syncedAt?: Date | string | null
  }

  export type BookingUpdateManyMutationInput = {
    reference?: StringFieldUpdateOperationsInput | string
    status?: EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus
    paymentMethod?: NullableEnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod | null
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    paymentIntentId?: NullableStringFieldUpdateOperationsInput | string | null
    paymentGateway?: NullableStringFieldUpdateOperationsInput | string | null
    gatewayReference?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    totalNet?: FloatFieldUpdateOperationsInput | number
    totalMarkup?: FloatFieldUpdateOperationsInput | number
    totalGross?: FloatFieldUpdateOperationsInput | number
    supplierRef?: NullableStringFieldUpdateOperationsInput | string | null
    voucherUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passengerCount?: IntFieldUpdateOperationsInput | number
    leadPassenger?: InputJsonValue | InputJsonValue | null
    externalBookingId?: NullableStringFieldUpdateOperationsInput | string | null
    apiResponse?: InputJsonValue | InputJsonValue | null
    apiCalledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type BookingUncheckedUpdateManyInput = {
    reference?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    b2bAccountId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus
    paymentMethod?: NullableEnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod | null
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    paymentIntentId?: NullableStringFieldUpdateOperationsInput | string | null
    paymentGateway?: NullableStringFieldUpdateOperationsInput | string | null
    gatewayReference?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    totalNet?: FloatFieldUpdateOperationsInput | number
    totalMarkup?: FloatFieldUpdateOperationsInput | number
    totalGross?: FloatFieldUpdateOperationsInput | number
    supplierRef?: NullableStringFieldUpdateOperationsInput | string | null
    voucherUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passengerCount?: IntFieldUpdateOperationsInput | number
    leadPassenger?: InputJsonValue | InputJsonValue | null
    externalBookingId?: NullableStringFieldUpdateOperationsInput | string | null
    apiResponse?: InputJsonValue | InputJsonValue | null
    apiCalledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type BookingItemCreateInput = {
    id?: string
    name: string
    date?: Date | string | null
    quantity?: number
    unitNet: number
    unitGross: number
    subtotalNet: number
    subtotalGross: number
    booking: BookingCreateNestedOneWithoutItemsInput
    product?: ProductCreateNestedOneWithoutBookingItemsInput
  }

  export type BookingItemUncheckedCreateInput = {
    id?: string
    bookingId: string
    productId?: string | null
    name: string
    date?: Date | string | null
    quantity?: number
    unitNet: number
    unitGross: number
    subtotalNet: number
    subtotalGross: number
  }

  export type BookingItemUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    unitNet?: FloatFieldUpdateOperationsInput | number
    unitGross?: FloatFieldUpdateOperationsInput | number
    subtotalNet?: FloatFieldUpdateOperationsInput | number
    subtotalGross?: FloatFieldUpdateOperationsInput | number
    booking?: BookingUpdateOneRequiredWithoutItemsNestedInput
    product?: ProductUpdateOneWithoutBookingItemsNestedInput
  }

  export type BookingItemUncheckedUpdateInput = {
    bookingId?: StringFieldUpdateOperationsInput | string
    productId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    unitNet?: FloatFieldUpdateOperationsInput | number
    unitGross?: FloatFieldUpdateOperationsInput | number
    subtotalNet?: FloatFieldUpdateOperationsInput | number
    subtotalGross?: FloatFieldUpdateOperationsInput | number
  }

  export type BookingItemCreateManyInput = {
    id?: string
    bookingId: string
    productId?: string | null
    name: string
    date?: Date | string | null
    quantity?: number
    unitNet: number
    unitGross: number
    subtotalNet: number
    subtotalGross: number
  }

  export type BookingItemUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    unitNet?: FloatFieldUpdateOperationsInput | number
    unitGross?: FloatFieldUpdateOperationsInput | number
    subtotalNet?: FloatFieldUpdateOperationsInput | number
    subtotalGross?: FloatFieldUpdateOperationsInput | number
  }

  export type BookingItemUncheckedUpdateManyInput = {
    bookingId?: StringFieldUpdateOperationsInput | string
    productId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    unitNet?: FloatFieldUpdateOperationsInput | number
    unitGross?: FloatFieldUpdateOperationsInput | number
    subtotalNet?: FloatFieldUpdateOperationsInput | number
    subtotalGross?: FloatFieldUpdateOperationsInput | number
  }

  export type ExternalServiceMappingCreateInput = {
    id?: string
    serviceName: string
    externalId: string
    internalId: string
    internalType: string
    metadata?: InputJsonValue | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ExternalServiceMappingUncheckedCreateInput = {
    id?: string
    serviceName: string
    externalId: string
    internalId: string
    internalType: string
    metadata?: InputJsonValue | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ExternalServiceMappingUpdateInput = {
    serviceName?: StringFieldUpdateOperationsInput | string
    externalId?: StringFieldUpdateOperationsInput | string
    internalId?: StringFieldUpdateOperationsInput | string
    internalType?: StringFieldUpdateOperationsInput | string
    metadata?: InputJsonValue | InputJsonValue | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExternalServiceMappingUncheckedUpdateInput = {
    serviceName?: StringFieldUpdateOperationsInput | string
    externalId?: StringFieldUpdateOperationsInput | string
    internalId?: StringFieldUpdateOperationsInput | string
    internalType?: StringFieldUpdateOperationsInput | string
    metadata?: InputJsonValue | InputJsonValue | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExternalServiceMappingCreateManyInput = {
    id?: string
    serviceName: string
    externalId: string
    internalId: string
    internalType: string
    metadata?: InputJsonValue | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ExternalServiceMappingUpdateManyMutationInput = {
    serviceName?: StringFieldUpdateOperationsInput | string
    externalId?: StringFieldUpdateOperationsInput | string
    internalId?: StringFieldUpdateOperationsInput | string
    internalType?: StringFieldUpdateOperationsInput | string
    metadata?: InputJsonValue | InputJsonValue | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExternalServiceMappingUncheckedUpdateManyInput = {
    serviceName?: StringFieldUpdateOperationsInput | string
    externalId?: StringFieldUpdateOperationsInput | string
    internalId?: StringFieldUpdateOperationsInput | string
    internalType?: StringFieldUpdateOperationsInput | string
    metadata?: InputJsonValue | InputJsonValue | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentTransactionCreateInput = {
    id?: string
    paymentIntentId: string
    amount: number
    currency?: $Enums.Currency
    status: $Enums.PaymentStatus
    gatewayResponse?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
    booking: BookingCreateNestedOneWithoutPaymentTransactionsInput
  }

  export type PaymentTransactionUncheckedCreateInput = {
    id?: string
    bookingId: string
    paymentIntentId: string
    amount: number
    currency?: $Enums.Currency
    status: $Enums.PaymentStatus
    gatewayResponse?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentTransactionUpdateInput = {
    paymentIntentId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    gatewayResponse?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    booking?: BookingUpdateOneRequiredWithoutPaymentTransactionsNestedInput
  }

  export type PaymentTransactionUncheckedUpdateInput = {
    bookingId?: StringFieldUpdateOperationsInput | string
    paymentIntentId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    gatewayResponse?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentTransactionCreateManyInput = {
    id?: string
    bookingId: string
    paymentIntentId: string
    amount: number
    currency?: $Enums.Currency
    status: $Enums.PaymentStatus
    gatewayResponse?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentTransactionUpdateManyMutationInput = {
    paymentIntentId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    gatewayResponse?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentTransactionUncheckedUpdateManyInput = {
    bookingId?: StringFieldUpdateOperationsInput | string
    paymentIntentId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    gatewayResponse?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BillingRecordCreateInput = {
    id?: string
    planName?: string | null
    duration?: number | null
    price: number
    paymentSessionId?: string | null
    purchasedAt?: Date | string
    user: UserCreateNestedOneWithoutBillingRecordsInput
    booking: BookingCreateNestedOneWithoutBillingRecordsInput
  }

  export type BillingRecordUncheckedCreateInput = {
    id?: string
    userId: string
    bookingId: string
    planName?: string | null
    duration?: number | null
    price: number
    paymentSessionId?: string | null
    purchasedAt?: Date | string
  }

  export type BillingRecordUpdateInput = {
    planName?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    price?: FloatFieldUpdateOperationsInput | number
    paymentSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    purchasedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutBillingRecordsNestedInput
    booking?: BookingUpdateOneRequiredWithoutBillingRecordsNestedInput
  }

  export type BillingRecordUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    bookingId?: StringFieldUpdateOperationsInput | string
    planName?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    price?: FloatFieldUpdateOperationsInput | number
    paymentSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    purchasedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BillingRecordCreateManyInput = {
    id?: string
    userId: string
    bookingId: string
    planName?: string | null
    duration?: number | null
    price: number
    paymentSessionId?: string | null
    purchasedAt?: Date | string
  }

  export type BillingRecordUpdateManyMutationInput = {
    planName?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    price?: FloatFieldUpdateOperationsInput | number
    paymentSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    purchasedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BillingRecordUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    bookingId?: StringFieldUpdateOperationsInput | string
    planName?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    price?: FloatFieldUpdateOperationsInput | number
    paymentSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    purchasedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SettingsCreateInput = {
    id?: string
    type: string
    value: InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SettingsUncheckedCreateInput = {
    id?: string
    type: string
    value: InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SettingsUpdateInput = {
    type?: StringFieldUpdateOperationsInput | string
    value?: InputJsonValue | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SettingsUncheckedUpdateInput = {
    type?: StringFieldUpdateOperationsInput | string
    value?: InputJsonValue | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SettingsCreateManyInput = {
    id?: string
    type: string
    value: InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SettingsUpdateManyMutationInput = {
    type?: StringFieldUpdateOperationsInput | string
    value?: InputJsonValue | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SettingsUncheckedUpdateManyInput = {
    type?: StringFieldUpdateOperationsInput | string
    value?: InputJsonValue | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApprovedTourCreateInput = {
    id?: string
    tourId: string
    createdAt?: Date | string
  }

  export type ApprovedTourUncheckedCreateInput = {
    id?: string
    tourId: string
    createdAt?: Date | string
  }

  export type ApprovedTourUpdateInput = {
    tourId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApprovedTourUncheckedUpdateInput = {
    tourId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApprovedTourCreateManyInput = {
    id?: string
    tourId: string
    createdAt?: Date | string
  }

  export type ApprovedTourUpdateManyMutationInput = {
    tourId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApprovedTourUncheckedUpdateManyInput = {
    tourId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ComplaintCreateInput = {
    id?: string
    subject: string
    category: $Enums.ComplaintCategory
    priority?: $Enums.ComplaintPriority
    status?: $Enums.ComplaintStatus
    tourId?: string | null
    tourName?: string | null
    description: string
    expectedOutcome?: string | null
    refundAmount?: number | null
    contactEmail: string
    contactPhone: string
    preferredContactMethod?: string | null
    attachments?: InputJsonValue | null
    adminResponse?: string | null
    resolvedAt?: Date | string | null
    assignedTo?: string | null
    rating?: number | null
    ratingComment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutComplaintsInput
    booking?: BookingCreateNestedOneWithoutComplaintsInput
    messages?: ComplaintMessageCreateNestedManyWithoutComplaintInput
  }

  export type ComplaintUncheckedCreateInput = {
    id?: string
    userId: string
    subject: string
    category: $Enums.ComplaintCategory
    priority?: $Enums.ComplaintPriority
    status?: $Enums.ComplaintStatus
    bookingId?: string | null
    tourId?: string | null
    tourName?: string | null
    description: string
    expectedOutcome?: string | null
    refundAmount?: number | null
    contactEmail: string
    contactPhone: string
    preferredContactMethod?: string | null
    attachments?: InputJsonValue | null
    adminResponse?: string | null
    resolvedAt?: Date | string | null
    assignedTo?: string | null
    rating?: number | null
    ratingComment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: ComplaintMessageUncheckedCreateNestedManyWithoutComplaintInput
  }

  export type ComplaintUpdateInput = {
    subject?: StringFieldUpdateOperationsInput | string
    category?: EnumComplaintCategoryFieldUpdateOperationsInput | $Enums.ComplaintCategory
    priority?: EnumComplaintPriorityFieldUpdateOperationsInput | $Enums.ComplaintPriority
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    tourId?: NullableStringFieldUpdateOperationsInput | string | null
    tourName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    expectedOutcome?: NullableStringFieldUpdateOperationsInput | string | null
    refundAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    contactEmail?: StringFieldUpdateOperationsInput | string
    contactPhone?: StringFieldUpdateOperationsInput | string
    preferredContactMethod?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: InputJsonValue | InputJsonValue | null
    adminResponse?: NullableStringFieldUpdateOperationsInput | string | null
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedTo?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    ratingComment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutComplaintsNestedInput
    booking?: BookingUpdateOneWithoutComplaintsNestedInput
    messages?: ComplaintMessageUpdateManyWithoutComplaintNestedInput
  }

  export type ComplaintUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    category?: EnumComplaintCategoryFieldUpdateOperationsInput | $Enums.ComplaintCategory
    priority?: EnumComplaintPriorityFieldUpdateOperationsInput | $Enums.ComplaintPriority
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    bookingId?: NullableStringFieldUpdateOperationsInput | string | null
    tourId?: NullableStringFieldUpdateOperationsInput | string | null
    tourName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    expectedOutcome?: NullableStringFieldUpdateOperationsInput | string | null
    refundAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    contactEmail?: StringFieldUpdateOperationsInput | string
    contactPhone?: StringFieldUpdateOperationsInput | string
    preferredContactMethod?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: InputJsonValue | InputJsonValue | null
    adminResponse?: NullableStringFieldUpdateOperationsInput | string | null
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedTo?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    ratingComment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: ComplaintMessageUncheckedUpdateManyWithoutComplaintNestedInput
  }

  export type ComplaintCreateManyInput = {
    id?: string
    userId: string
    subject: string
    category: $Enums.ComplaintCategory
    priority?: $Enums.ComplaintPriority
    status?: $Enums.ComplaintStatus
    bookingId?: string | null
    tourId?: string | null
    tourName?: string | null
    description: string
    expectedOutcome?: string | null
    refundAmount?: number | null
    contactEmail: string
    contactPhone: string
    preferredContactMethod?: string | null
    attachments?: InputJsonValue | null
    adminResponse?: string | null
    resolvedAt?: Date | string | null
    assignedTo?: string | null
    rating?: number | null
    ratingComment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ComplaintUpdateManyMutationInput = {
    subject?: StringFieldUpdateOperationsInput | string
    category?: EnumComplaintCategoryFieldUpdateOperationsInput | $Enums.ComplaintCategory
    priority?: EnumComplaintPriorityFieldUpdateOperationsInput | $Enums.ComplaintPriority
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    tourId?: NullableStringFieldUpdateOperationsInput | string | null
    tourName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    expectedOutcome?: NullableStringFieldUpdateOperationsInput | string | null
    refundAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    contactEmail?: StringFieldUpdateOperationsInput | string
    contactPhone?: StringFieldUpdateOperationsInput | string
    preferredContactMethod?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: InputJsonValue | InputJsonValue | null
    adminResponse?: NullableStringFieldUpdateOperationsInput | string | null
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedTo?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    ratingComment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ComplaintUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    category?: EnumComplaintCategoryFieldUpdateOperationsInput | $Enums.ComplaintCategory
    priority?: EnumComplaintPriorityFieldUpdateOperationsInput | $Enums.ComplaintPriority
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    bookingId?: NullableStringFieldUpdateOperationsInput | string | null
    tourId?: NullableStringFieldUpdateOperationsInput | string | null
    tourName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    expectedOutcome?: NullableStringFieldUpdateOperationsInput | string | null
    refundAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    contactEmail?: StringFieldUpdateOperationsInput | string
    contactPhone?: StringFieldUpdateOperationsInput | string
    preferredContactMethod?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: InputJsonValue | InputJsonValue | null
    adminResponse?: NullableStringFieldUpdateOperationsInput | string | null
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedTo?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    ratingComment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ComplaintMessageCreateInput = {
    id?: string
    senderType: string
    senderId: string
    message: string
    attachments?: InputJsonValue | null
    isRead?: boolean
    createdAt?: Date | string
    complaint: ComplaintCreateNestedOneWithoutMessagesInput
  }

  export type ComplaintMessageUncheckedCreateInput = {
    id?: string
    complaintId: string
    senderType: string
    senderId: string
    message: string
    attachments?: InputJsonValue | null
    isRead?: boolean
    createdAt?: Date | string
  }

  export type ComplaintMessageUpdateInput = {
    senderType?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    attachments?: InputJsonValue | InputJsonValue | null
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    complaint?: ComplaintUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type ComplaintMessageUncheckedUpdateInput = {
    complaintId?: StringFieldUpdateOperationsInput | string
    senderType?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    attachments?: InputJsonValue | InputJsonValue | null
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ComplaintMessageCreateManyInput = {
    id?: string
    complaintId: string
    senderType: string
    senderId: string
    message: string
    attachments?: InputJsonValue | null
    isRead?: boolean
    createdAt?: Date | string
  }

  export type ComplaintMessageUpdateManyMutationInput = {
    senderType?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    attachments?: InputJsonValue | InputJsonValue | null
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ComplaintMessageUncheckedUpdateManyInput = {
    complaintId?: StringFieldUpdateOperationsInput | string
    senderType?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    attachments?: InputJsonValue | InputJsonValue | null
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
    isSet?: boolean
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
    isSet?: boolean
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
    isSet?: boolean
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    isSet?: boolean
  }

  export type BookingListRelationFilter = {
    every?: BookingWhereInput
    some?: BookingWhereInput
    none?: BookingWhereInput
  }

  export type ProductListRelationFilter = {
    every?: ProductWhereInput
    some?: ProductWhereInput
    none?: ProductWhereInput
  }

  export type B2BAccountListRelationFilter = {
    every?: B2BAccountWhereInput
    some?: B2BAccountWhereInput
    none?: B2BAccountWhereInput
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type BillingRecordListRelationFilter = {
    every?: BillingRecordWhereInput
    some?: BillingRecordWhereInput
    none?: BillingRecordWhereInput
  }

  export type ComplaintListRelationFilter = {
    every?: ComplaintWhereInput
    some?: ComplaintWhereInput
    none?: ComplaintWhereInput
  }

  export type BookingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProductOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type B2BAccountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BillingRecordOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ComplaintOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    dateOfBirth?: SortOrder
    nationality?: SortOrder
    password?: SortOrder
    role?: SortOrder
    preferredLanguage?: SortOrder
    companyName?: SortOrder
    businessLicense?: SortOrder
    markupType?: SortOrder
    markupValue?: SortOrder
    isActive?: SortOrder
    emailVerified?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    metadata?: SortOrder
    accountManagerId?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    markupValue?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    dateOfBirth?: SortOrder
    nationality?: SortOrder
    password?: SortOrder
    role?: SortOrder
    preferredLanguage?: SortOrder
    companyName?: SortOrder
    businessLicense?: SortOrder
    markupType?: SortOrder
    markupValue?: SortOrder
    isActive?: SortOrder
    emailVerified?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    accountManagerId?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    dateOfBirth?: SortOrder
    nationality?: SortOrder
    password?: SortOrder
    role?: SortOrder
    preferredLanguage?: SortOrder
    companyName?: SortOrder
    businessLicense?: SortOrder
    markupType?: SortOrder
    markupValue?: SortOrder
    isActive?: SortOrder
    emailVerified?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    accountManagerId?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    markupValue?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type EnumCategoryStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.CategoryStatus | EnumCategoryStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CategoryStatus[] | ListEnumCategoryStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CategoryStatus[] | ListEnumCategoryStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCategoryStatusFilter<$PrismaModel> | $Enums.CategoryStatus
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type CategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    slug?: SortOrder
    icon?: SortOrder
    status?: SortOrder
    displayOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CategoryAvgOrderByAggregateInput = {
    displayOrder?: SortOrder
  }

  export type CategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    slug?: SortOrder
    icon?: SortOrder
    status?: SortOrder
    displayOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    slug?: SortOrder
    icon?: SortOrder
    status?: SortOrder
    displayOrder?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CategorySumOrderByAggregateInput = {
    displayOrder?: SortOrder
  }

  export type EnumCategoryStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CategoryStatus | EnumCategoryStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CategoryStatus[] | ListEnumCategoryStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CategoryStatus[] | ListEnumCategoryStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCategoryStatusWithAggregatesFilter<$PrismaModel> | $Enums.CategoryStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCategoryStatusFilter<$PrismaModel>
    _max?: NestedEnumCategoryStatusFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type EnumProductTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ProductType | EnumProductTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ProductType[] | ListEnumProductTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProductType[] | ListEnumProductTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumProductTypeFilter<$PrismaModel> | $Enums.ProductType
  }

  export type EnumCurrencyFilter<$PrismaModel = never> = {
    equals?: $Enums.Currency | EnumCurrencyFieldRefInput<$PrismaModel>
    in?: $Enums.Currency[] | ListEnumCurrencyFieldRefInput<$PrismaModel>
    notIn?: $Enums.Currency[] | ListEnumCurrencyFieldRefInput<$PrismaModel>
    not?: NestedEnumCurrencyFilter<$PrismaModel> | $Enums.Currency
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type ProductImageListRelationFilter = {
    every?: ProductImageWhereInput
    some?: ProductImageWhereInput
    none?: ProductImageWhereInput
  }

  export type CategoryScalarRelationFilter = {
    is?: CategoryWhereInput
    isNot?: CategoryWhereInput
  }

  export type MarkupRuleListRelationFilter = {
    every?: MarkupRuleWhereInput
    some?: MarkupRuleWhereInput
    none?: MarkupRuleWhereInput
  }

  export type BookingItemListRelationFilter = {
    every?: BookingItemWhereInput
    some?: BookingItemWhereInput
    none?: BookingItemWhereInput
  }

  export type ProductImageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MarkupRuleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BookingItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProductCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    type?: SortOrder
    shortDesc?: SortOrder
    longDesc?: SortOrder
    baseCurrency?: SortOrder
    basePrice?: SortOrder
    isActive?: SortOrder
    categoryId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    externalIds?: SortOrder
  }

  export type ProductAvgOrderByAggregateInput = {
    basePrice?: SortOrder
  }

  export type ProductMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    type?: SortOrder
    shortDesc?: SortOrder
    longDesc?: SortOrder
    baseCurrency?: SortOrder
    basePrice?: SortOrder
    isActive?: SortOrder
    categoryId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
  }

  export type ProductMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    type?: SortOrder
    shortDesc?: SortOrder
    longDesc?: SortOrder
    baseCurrency?: SortOrder
    basePrice?: SortOrder
    isActive?: SortOrder
    categoryId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
  }

  export type ProductSumOrderByAggregateInput = {
    basePrice?: SortOrder
  }

  export type EnumProductTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProductType | EnumProductTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ProductType[] | ListEnumProductTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProductType[] | ListEnumProductTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumProductTypeWithAggregatesFilter<$PrismaModel> | $Enums.ProductType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProductTypeFilter<$PrismaModel>
    _max?: NestedEnumProductTypeFilter<$PrismaModel>
  }

  export type EnumCurrencyWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Currency | EnumCurrencyFieldRefInput<$PrismaModel>
    in?: $Enums.Currency[] | ListEnumCurrencyFieldRefInput<$PrismaModel>
    notIn?: $Enums.Currency[] | ListEnumCurrencyFieldRefInput<$PrismaModel>
    not?: NestedEnumCurrencyWithAggregatesFilter<$PrismaModel> | $Enums.Currency
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCurrencyFilter<$PrismaModel>
    _max?: NestedEnumCurrencyFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type ProductScalarRelationFilter = {
    is?: ProductWhereInput
    isNot?: ProductWhereInput
  }

  export type ProductImageCountOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    alt?: SortOrder
    productId?: SortOrder
  }

  export type ProductImageMaxOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    alt?: SortOrder
    productId?: SortOrder
  }

  export type ProductImageMinOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    alt?: SortOrder
    productId?: SortOrder
  }

  export type B2BAccountCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    userId?: SortOrder
    defaultMarkup?: SortOrder
    currency?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type B2BAccountAvgOrderByAggregateInput = {
    defaultMarkup?: SortOrder
  }

  export type B2BAccountMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    userId?: SortOrder
    defaultMarkup?: SortOrder
    currency?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type B2BAccountMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    userId?: SortOrder
    defaultMarkup?: SortOrder
    currency?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type B2BAccountSumOrderByAggregateInput = {
    defaultMarkup?: SortOrder
  }

  export type B2BAccountNullableScalarRelationFilter = {
    is?: B2BAccountWhereInput | null
    isNot?: B2BAccountWhereInput | null
  }

  export type ProductNullableScalarRelationFilter = {
    is?: ProductWhereInput | null
    isNot?: ProductWhereInput | null
  }

  export type MarkupRuleCountOrderByAggregateInput = {
    id?: SortOrder
    b2bAccountId?: SortOrder
    productId?: SortOrder
    percentage?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isActive?: SortOrder
  }

  export type MarkupRuleAvgOrderByAggregateInput = {
    percentage?: SortOrder
  }

  export type MarkupRuleMaxOrderByAggregateInput = {
    id?: SortOrder
    b2bAccountId?: SortOrder
    productId?: SortOrder
    percentage?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isActive?: SortOrder
  }

  export type MarkupRuleMinOrderByAggregateInput = {
    id?: SortOrder
    b2bAccountId?: SortOrder
    productId?: SortOrder
    percentage?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isActive?: SortOrder
  }

  export type MarkupRuleSumOrderByAggregateInput = {
    percentage?: SortOrder
  }

  export type EnumBookingStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.BookingStatus | EnumBookingStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BookingStatus[] | ListEnumBookingStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.BookingStatus[] | ListEnumBookingStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumBookingStatusFilter<$PrismaModel> | $Enums.BookingStatus
  }

  export type EnumPaymentMethodNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel> | null
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel> | null
    not?: NestedEnumPaymentMethodNullableFilter<$PrismaModel> | $Enums.PaymentMethod | null
    isSet?: boolean
  }

  export type EnumPaymentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatusFilter<$PrismaModel> | $Enums.PaymentStatus
  }

  export type PaymentTransactionListRelationFilter = {
    every?: PaymentTransactionWhereInput
    some?: PaymentTransactionWhereInput
    none?: PaymentTransactionWhereInput
  }

  export type PaymentTransactionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BookingCountOrderByAggregateInput = {
    id?: SortOrder
    reference?: SortOrder
    userId?: SortOrder
    b2bAccountId?: SortOrder
    status?: SortOrder
    paymentMethod?: SortOrder
    paymentStatus?: SortOrder
    paymentIntentId?: SortOrder
    paymentGateway?: SortOrder
    gatewayReference?: SortOrder
    currency?: SortOrder
    totalNet?: SortOrder
    totalMarkup?: SortOrder
    totalGross?: SortOrder
    supplierRef?: SortOrder
    voucherUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    passengerCount?: SortOrder
    leadPassenger?: SortOrder
    externalBookingId?: SortOrder
    apiResponse?: SortOrder
    apiCalledAt?: SortOrder
    syncedAt?: SortOrder
  }

  export type BookingAvgOrderByAggregateInput = {
    totalNet?: SortOrder
    totalMarkup?: SortOrder
    totalGross?: SortOrder
    passengerCount?: SortOrder
  }

  export type BookingMaxOrderByAggregateInput = {
    id?: SortOrder
    reference?: SortOrder
    userId?: SortOrder
    b2bAccountId?: SortOrder
    status?: SortOrder
    paymentMethod?: SortOrder
    paymentStatus?: SortOrder
    paymentIntentId?: SortOrder
    paymentGateway?: SortOrder
    gatewayReference?: SortOrder
    currency?: SortOrder
    totalNet?: SortOrder
    totalMarkup?: SortOrder
    totalGross?: SortOrder
    supplierRef?: SortOrder
    voucherUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    passengerCount?: SortOrder
    externalBookingId?: SortOrder
    apiCalledAt?: SortOrder
    syncedAt?: SortOrder
  }

  export type BookingMinOrderByAggregateInput = {
    id?: SortOrder
    reference?: SortOrder
    userId?: SortOrder
    b2bAccountId?: SortOrder
    status?: SortOrder
    paymentMethod?: SortOrder
    paymentStatus?: SortOrder
    paymentIntentId?: SortOrder
    paymentGateway?: SortOrder
    gatewayReference?: SortOrder
    currency?: SortOrder
    totalNet?: SortOrder
    totalMarkup?: SortOrder
    totalGross?: SortOrder
    supplierRef?: SortOrder
    voucherUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    passengerCount?: SortOrder
    externalBookingId?: SortOrder
    apiCalledAt?: SortOrder
    syncedAt?: SortOrder
  }

  export type BookingSumOrderByAggregateInput = {
    totalNet?: SortOrder
    totalMarkup?: SortOrder
    totalGross?: SortOrder
    passengerCount?: SortOrder
  }

  export type EnumBookingStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BookingStatus | EnumBookingStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BookingStatus[] | ListEnumBookingStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.BookingStatus[] | ListEnumBookingStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumBookingStatusWithAggregatesFilter<$PrismaModel> | $Enums.BookingStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBookingStatusFilter<$PrismaModel>
    _max?: NestedEnumBookingStatusFilter<$PrismaModel>
  }

  export type EnumPaymentMethodNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel> | null
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel> | null
    not?: NestedEnumPaymentMethodNullableWithAggregatesFilter<$PrismaModel> | $Enums.PaymentMethod | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumPaymentMethodNullableFilter<$PrismaModel>
    _max?: NestedEnumPaymentMethodNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type EnumPaymentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatusWithAggregatesFilter<$PrismaModel> | $Enums.PaymentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentStatusFilter<$PrismaModel>
    _max?: NestedEnumPaymentStatusFilter<$PrismaModel>
  }

  export type BookingScalarRelationFilter = {
    is?: BookingWhereInput
    isNot?: BookingWhereInput
  }

  export type BookingItemCountOrderByAggregateInput = {
    id?: SortOrder
    bookingId?: SortOrder
    productId?: SortOrder
    name?: SortOrder
    date?: SortOrder
    quantity?: SortOrder
    unitNet?: SortOrder
    unitGross?: SortOrder
    subtotalNet?: SortOrder
    subtotalGross?: SortOrder
  }

  export type BookingItemAvgOrderByAggregateInput = {
    quantity?: SortOrder
    unitNet?: SortOrder
    unitGross?: SortOrder
    subtotalNet?: SortOrder
    subtotalGross?: SortOrder
  }

  export type BookingItemMaxOrderByAggregateInput = {
    id?: SortOrder
    bookingId?: SortOrder
    productId?: SortOrder
    name?: SortOrder
    date?: SortOrder
    quantity?: SortOrder
    unitNet?: SortOrder
    unitGross?: SortOrder
    subtotalNet?: SortOrder
    subtotalGross?: SortOrder
  }

  export type BookingItemMinOrderByAggregateInput = {
    id?: SortOrder
    bookingId?: SortOrder
    productId?: SortOrder
    name?: SortOrder
    date?: SortOrder
    quantity?: SortOrder
    unitNet?: SortOrder
    unitGross?: SortOrder
    subtotalNet?: SortOrder
    subtotalGross?: SortOrder
  }

  export type BookingItemSumOrderByAggregateInput = {
    quantity?: SortOrder
    unitNet?: SortOrder
    unitGross?: SortOrder
    subtotalNet?: SortOrder
    subtotalGross?: SortOrder
  }

  export type ExternalServiceMappingServiceNameExternalIdInternalTypeCompoundUniqueInput = {
    serviceName: string
    externalId: string
    internalType: string
  }

  export type ExternalServiceMappingCountOrderByAggregateInput = {
    id?: SortOrder
    serviceName?: SortOrder
    externalId?: SortOrder
    internalId?: SortOrder
    internalType?: SortOrder
    metadata?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ExternalServiceMappingMaxOrderByAggregateInput = {
    id?: SortOrder
    serviceName?: SortOrder
    externalId?: SortOrder
    internalId?: SortOrder
    internalType?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ExternalServiceMappingMinOrderByAggregateInput = {
    id?: SortOrder
    serviceName?: SortOrder
    externalId?: SortOrder
    internalId?: SortOrder
    internalType?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PaymentTransactionCountOrderByAggregateInput = {
    id?: SortOrder
    bookingId?: SortOrder
    paymentIntentId?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    status?: SortOrder
    gatewayResponse?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PaymentTransactionAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type PaymentTransactionMaxOrderByAggregateInput = {
    id?: SortOrder
    bookingId?: SortOrder
    paymentIntentId?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PaymentTransactionMinOrderByAggregateInput = {
    id?: SortOrder
    bookingId?: SortOrder
    paymentIntentId?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PaymentTransactionSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
    isSet?: boolean
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type BillingRecordCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    bookingId?: SortOrder
    planName?: SortOrder
    duration?: SortOrder
    price?: SortOrder
    paymentSessionId?: SortOrder
    purchasedAt?: SortOrder
  }

  export type BillingRecordAvgOrderByAggregateInput = {
    duration?: SortOrder
    price?: SortOrder
  }

  export type BillingRecordMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    bookingId?: SortOrder
    planName?: SortOrder
    duration?: SortOrder
    price?: SortOrder
    paymentSessionId?: SortOrder
    purchasedAt?: SortOrder
  }

  export type BillingRecordMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    bookingId?: SortOrder
    planName?: SortOrder
    duration?: SortOrder
    price?: SortOrder
    paymentSessionId?: SortOrder
    purchasedAt?: SortOrder
  }

  export type BillingRecordSumOrderByAggregateInput = {
    duration?: SortOrder
    price?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
    isSet?: boolean
  }
  export type JsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
  }

  export type SettingsCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SettingsMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SettingsMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type ApprovedTourCountOrderByAggregateInput = {
    id?: SortOrder
    tourId?: SortOrder
    createdAt?: SortOrder
  }

  export type ApprovedTourMaxOrderByAggregateInput = {
    id?: SortOrder
    tourId?: SortOrder
    createdAt?: SortOrder
  }

  export type ApprovedTourMinOrderByAggregateInput = {
    id?: SortOrder
    tourId?: SortOrder
    createdAt?: SortOrder
  }

  export type EnumComplaintCategoryFilter<$PrismaModel = never> = {
    equals?: $Enums.ComplaintCategory | EnumComplaintCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.ComplaintCategory[] | ListEnumComplaintCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.ComplaintCategory[] | ListEnumComplaintCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumComplaintCategoryFilter<$PrismaModel> | $Enums.ComplaintCategory
  }

  export type EnumComplaintPriorityFilter<$PrismaModel = never> = {
    equals?: $Enums.ComplaintPriority | EnumComplaintPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.ComplaintPriority[] | ListEnumComplaintPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.ComplaintPriority[] | ListEnumComplaintPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumComplaintPriorityFilter<$PrismaModel> | $Enums.ComplaintPriority
  }

  export type EnumComplaintStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ComplaintStatus | EnumComplaintStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ComplaintStatus[] | ListEnumComplaintStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ComplaintStatus[] | ListEnumComplaintStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumComplaintStatusFilter<$PrismaModel> | $Enums.ComplaintStatus
  }

  export type BookingNullableScalarRelationFilter = {
    is?: BookingWhereInput | null
    isNot?: BookingWhereInput | null
  }

  export type ComplaintMessageListRelationFilter = {
    every?: ComplaintMessageWhereInput
    some?: ComplaintMessageWhereInput
    none?: ComplaintMessageWhereInput
  }

  export type ComplaintMessageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ComplaintCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    subject?: SortOrder
    category?: SortOrder
    priority?: SortOrder
    status?: SortOrder
    bookingId?: SortOrder
    tourId?: SortOrder
    tourName?: SortOrder
    description?: SortOrder
    expectedOutcome?: SortOrder
    refundAmount?: SortOrder
    contactEmail?: SortOrder
    contactPhone?: SortOrder
    preferredContactMethod?: SortOrder
    attachments?: SortOrder
    adminResponse?: SortOrder
    resolvedAt?: SortOrder
    assignedTo?: SortOrder
    rating?: SortOrder
    ratingComment?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ComplaintAvgOrderByAggregateInput = {
    refundAmount?: SortOrder
    rating?: SortOrder
  }

  export type ComplaintMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    subject?: SortOrder
    category?: SortOrder
    priority?: SortOrder
    status?: SortOrder
    bookingId?: SortOrder
    tourId?: SortOrder
    tourName?: SortOrder
    description?: SortOrder
    expectedOutcome?: SortOrder
    refundAmount?: SortOrder
    contactEmail?: SortOrder
    contactPhone?: SortOrder
    preferredContactMethod?: SortOrder
    adminResponse?: SortOrder
    resolvedAt?: SortOrder
    assignedTo?: SortOrder
    rating?: SortOrder
    ratingComment?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ComplaintMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    subject?: SortOrder
    category?: SortOrder
    priority?: SortOrder
    status?: SortOrder
    bookingId?: SortOrder
    tourId?: SortOrder
    tourName?: SortOrder
    description?: SortOrder
    expectedOutcome?: SortOrder
    refundAmount?: SortOrder
    contactEmail?: SortOrder
    contactPhone?: SortOrder
    preferredContactMethod?: SortOrder
    adminResponse?: SortOrder
    resolvedAt?: SortOrder
    assignedTo?: SortOrder
    rating?: SortOrder
    ratingComment?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ComplaintSumOrderByAggregateInput = {
    refundAmount?: SortOrder
    rating?: SortOrder
  }

  export type EnumComplaintCategoryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ComplaintCategory | EnumComplaintCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.ComplaintCategory[] | ListEnumComplaintCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.ComplaintCategory[] | ListEnumComplaintCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumComplaintCategoryWithAggregatesFilter<$PrismaModel> | $Enums.ComplaintCategory
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumComplaintCategoryFilter<$PrismaModel>
    _max?: NestedEnumComplaintCategoryFilter<$PrismaModel>
  }

  export type EnumComplaintPriorityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ComplaintPriority | EnumComplaintPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.ComplaintPriority[] | ListEnumComplaintPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.ComplaintPriority[] | ListEnumComplaintPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumComplaintPriorityWithAggregatesFilter<$PrismaModel> | $Enums.ComplaintPriority
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumComplaintPriorityFilter<$PrismaModel>
    _max?: NestedEnumComplaintPriorityFilter<$PrismaModel>
  }

  export type EnumComplaintStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ComplaintStatus | EnumComplaintStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ComplaintStatus[] | ListEnumComplaintStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ComplaintStatus[] | ListEnumComplaintStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumComplaintStatusWithAggregatesFilter<$PrismaModel> | $Enums.ComplaintStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumComplaintStatusFilter<$PrismaModel>
    _max?: NestedEnumComplaintStatusFilter<$PrismaModel>
  }

  export type ComplaintScalarRelationFilter = {
    is?: ComplaintWhereInput
    isNot?: ComplaintWhereInput
  }

  export type ComplaintMessageCountOrderByAggregateInput = {
    id?: SortOrder
    complaintId?: SortOrder
    senderType?: SortOrder
    senderId?: SortOrder
    message?: SortOrder
    attachments?: SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
  }

  export type ComplaintMessageMaxOrderByAggregateInput = {
    id?: SortOrder
    complaintId?: SortOrder
    senderType?: SortOrder
    senderId?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
  }

  export type ComplaintMessageMinOrderByAggregateInput = {
    id?: SortOrder
    complaintId?: SortOrder
    senderType?: SortOrder
    senderId?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    createdAt?: SortOrder
  }

  export type BookingCreateNestedManyWithoutUserInput = {
    create?: XOR<BookingCreateWithoutUserInput, BookingUncheckedCreateWithoutUserInput> | BookingCreateWithoutUserInput[] | BookingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BookingCreateOrConnectWithoutUserInput | BookingCreateOrConnectWithoutUserInput[]
    createMany?: BookingCreateManyUserInputEnvelope
    connect?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
  }

  export type ProductCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<ProductCreateWithoutCreatedByInput, ProductUncheckedCreateWithoutCreatedByInput> | ProductCreateWithoutCreatedByInput[] | ProductUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutCreatedByInput | ProductCreateOrConnectWithoutCreatedByInput[]
    createMany?: ProductCreateManyCreatedByInputEnvelope
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type B2BAccountCreateNestedManyWithoutUserInput = {
    create?: XOR<B2BAccountCreateWithoutUserInput, B2BAccountUncheckedCreateWithoutUserInput> | B2BAccountCreateWithoutUserInput[] | B2BAccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: B2BAccountCreateOrConnectWithoutUserInput | B2BAccountCreateOrConnectWithoutUserInput[]
    createMany?: B2BAccountCreateManyUserInputEnvelope
    connect?: B2BAccountWhereUniqueInput | B2BAccountWhereUniqueInput[]
  }

  export type UserCreateNestedManyWithoutAccountManagerInput = {
    create?: XOR<UserCreateWithoutAccountManagerInput, UserUncheckedCreateWithoutAccountManagerInput> | UserCreateWithoutAccountManagerInput[] | UserUncheckedCreateWithoutAccountManagerInput[]
    connectOrCreate?: UserCreateOrConnectWithoutAccountManagerInput | UserCreateOrConnectWithoutAccountManagerInput[]
    createMany?: UserCreateManyAccountManagerInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutManagedUsersInput = {
    create?: XOR<UserCreateWithoutManagedUsersInput, UserUncheckedCreateWithoutManagedUsersInput>
    connectOrCreate?: UserCreateOrConnectWithoutManagedUsersInput
    connect?: UserWhereUniqueInput
  }

  export type BillingRecordCreateNestedManyWithoutUserInput = {
    create?: XOR<BillingRecordCreateWithoutUserInput, BillingRecordUncheckedCreateWithoutUserInput> | BillingRecordCreateWithoutUserInput[] | BillingRecordUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BillingRecordCreateOrConnectWithoutUserInput | BillingRecordCreateOrConnectWithoutUserInput[]
    createMany?: BillingRecordCreateManyUserInputEnvelope
    connect?: BillingRecordWhereUniqueInput | BillingRecordWhereUniqueInput[]
  }

  export type ComplaintCreateNestedManyWithoutUserInput = {
    create?: XOR<ComplaintCreateWithoutUserInput, ComplaintUncheckedCreateWithoutUserInput> | ComplaintCreateWithoutUserInput[] | ComplaintUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ComplaintCreateOrConnectWithoutUserInput | ComplaintCreateOrConnectWithoutUserInput[]
    createMany?: ComplaintCreateManyUserInputEnvelope
    connect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
  }

  export type BookingUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<BookingCreateWithoutUserInput, BookingUncheckedCreateWithoutUserInput> | BookingCreateWithoutUserInput[] | BookingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BookingCreateOrConnectWithoutUserInput | BookingCreateOrConnectWithoutUserInput[]
    createMany?: BookingCreateManyUserInputEnvelope
    connect?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
  }

  export type ProductUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<ProductCreateWithoutCreatedByInput, ProductUncheckedCreateWithoutCreatedByInput> | ProductCreateWithoutCreatedByInput[] | ProductUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutCreatedByInput | ProductCreateOrConnectWithoutCreatedByInput[]
    createMany?: ProductCreateManyCreatedByInputEnvelope
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type B2BAccountUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<B2BAccountCreateWithoutUserInput, B2BAccountUncheckedCreateWithoutUserInput> | B2BAccountCreateWithoutUserInput[] | B2BAccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: B2BAccountCreateOrConnectWithoutUserInput | B2BAccountCreateOrConnectWithoutUserInput[]
    createMany?: B2BAccountCreateManyUserInputEnvelope
    connect?: B2BAccountWhereUniqueInput | B2BAccountWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutAccountManagerInput = {
    create?: XOR<UserCreateWithoutAccountManagerInput, UserUncheckedCreateWithoutAccountManagerInput> | UserCreateWithoutAccountManagerInput[] | UserUncheckedCreateWithoutAccountManagerInput[]
    connectOrCreate?: UserCreateOrConnectWithoutAccountManagerInput | UserCreateOrConnectWithoutAccountManagerInput[]
    createMany?: UserCreateManyAccountManagerInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type BillingRecordUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<BillingRecordCreateWithoutUserInput, BillingRecordUncheckedCreateWithoutUserInput> | BillingRecordCreateWithoutUserInput[] | BillingRecordUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BillingRecordCreateOrConnectWithoutUserInput | BillingRecordCreateOrConnectWithoutUserInput[]
    createMany?: BillingRecordCreateManyUserInputEnvelope
    connect?: BillingRecordWhereUniqueInput | BillingRecordWhereUniqueInput[]
  }

  export type ComplaintUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ComplaintCreateWithoutUserInput, ComplaintUncheckedCreateWithoutUserInput> | ComplaintCreateWithoutUserInput[] | ComplaintUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ComplaintCreateOrConnectWithoutUserInput | ComplaintCreateOrConnectWithoutUserInput[]
    createMany?: ComplaintCreateManyUserInputEnvelope
    connect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
    unset?: boolean
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
    unset?: boolean
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
    unset?: boolean
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BookingUpdateManyWithoutUserNestedInput = {
    create?: XOR<BookingCreateWithoutUserInput, BookingUncheckedCreateWithoutUserInput> | BookingCreateWithoutUserInput[] | BookingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BookingCreateOrConnectWithoutUserInput | BookingCreateOrConnectWithoutUserInput[]
    upsert?: BookingUpsertWithWhereUniqueWithoutUserInput | BookingUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BookingCreateManyUserInputEnvelope
    set?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    disconnect?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    delete?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    connect?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    update?: BookingUpdateWithWhereUniqueWithoutUserInput | BookingUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BookingUpdateManyWithWhereWithoutUserInput | BookingUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BookingScalarWhereInput | BookingScalarWhereInput[]
  }

  export type ProductUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<ProductCreateWithoutCreatedByInput, ProductUncheckedCreateWithoutCreatedByInput> | ProductCreateWithoutCreatedByInput[] | ProductUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutCreatedByInput | ProductCreateOrConnectWithoutCreatedByInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutCreatedByInput | ProductUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: ProductCreateManyCreatedByInputEnvelope
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutCreatedByInput | ProductUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutCreatedByInput | ProductUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type B2BAccountUpdateManyWithoutUserNestedInput = {
    create?: XOR<B2BAccountCreateWithoutUserInput, B2BAccountUncheckedCreateWithoutUserInput> | B2BAccountCreateWithoutUserInput[] | B2BAccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: B2BAccountCreateOrConnectWithoutUserInput | B2BAccountCreateOrConnectWithoutUserInput[]
    upsert?: B2BAccountUpsertWithWhereUniqueWithoutUserInput | B2BAccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: B2BAccountCreateManyUserInputEnvelope
    set?: B2BAccountWhereUniqueInput | B2BAccountWhereUniqueInput[]
    disconnect?: B2BAccountWhereUniqueInput | B2BAccountWhereUniqueInput[]
    delete?: B2BAccountWhereUniqueInput | B2BAccountWhereUniqueInput[]
    connect?: B2BAccountWhereUniqueInput | B2BAccountWhereUniqueInput[]
    update?: B2BAccountUpdateWithWhereUniqueWithoutUserInput | B2BAccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: B2BAccountUpdateManyWithWhereWithoutUserInput | B2BAccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: B2BAccountScalarWhereInput | B2BAccountScalarWhereInput[]
  }

  export type UserUpdateManyWithoutAccountManagerNestedInput = {
    create?: XOR<UserCreateWithoutAccountManagerInput, UserUncheckedCreateWithoutAccountManagerInput> | UserCreateWithoutAccountManagerInput[] | UserUncheckedCreateWithoutAccountManagerInput[]
    connectOrCreate?: UserCreateOrConnectWithoutAccountManagerInput | UserCreateOrConnectWithoutAccountManagerInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutAccountManagerInput | UserUpsertWithWhereUniqueWithoutAccountManagerInput[]
    createMany?: UserCreateManyAccountManagerInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutAccountManagerInput | UserUpdateWithWhereUniqueWithoutAccountManagerInput[]
    updateMany?: UserUpdateManyWithWhereWithoutAccountManagerInput | UserUpdateManyWithWhereWithoutAccountManagerInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUpdateOneWithoutManagedUsersNestedInput = {
    create?: XOR<UserCreateWithoutManagedUsersInput, UserUncheckedCreateWithoutManagedUsersInput>
    connectOrCreate?: UserCreateOrConnectWithoutManagedUsersInput
    upsert?: UserUpsertWithoutManagedUsersInput
    disconnect?: boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutManagedUsersInput, UserUpdateWithoutManagedUsersInput>, UserUncheckedUpdateWithoutManagedUsersInput>
  }

  export type BillingRecordUpdateManyWithoutUserNestedInput = {
    create?: XOR<BillingRecordCreateWithoutUserInput, BillingRecordUncheckedCreateWithoutUserInput> | BillingRecordCreateWithoutUserInput[] | BillingRecordUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BillingRecordCreateOrConnectWithoutUserInput | BillingRecordCreateOrConnectWithoutUserInput[]
    upsert?: BillingRecordUpsertWithWhereUniqueWithoutUserInput | BillingRecordUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BillingRecordCreateManyUserInputEnvelope
    set?: BillingRecordWhereUniqueInput | BillingRecordWhereUniqueInput[]
    disconnect?: BillingRecordWhereUniqueInput | BillingRecordWhereUniqueInput[]
    delete?: BillingRecordWhereUniqueInput | BillingRecordWhereUniqueInput[]
    connect?: BillingRecordWhereUniqueInput | BillingRecordWhereUniqueInput[]
    update?: BillingRecordUpdateWithWhereUniqueWithoutUserInput | BillingRecordUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BillingRecordUpdateManyWithWhereWithoutUserInput | BillingRecordUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BillingRecordScalarWhereInput | BillingRecordScalarWhereInput[]
  }

  export type ComplaintUpdateManyWithoutUserNestedInput = {
    create?: XOR<ComplaintCreateWithoutUserInput, ComplaintUncheckedCreateWithoutUserInput> | ComplaintCreateWithoutUserInput[] | ComplaintUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ComplaintCreateOrConnectWithoutUserInput | ComplaintCreateOrConnectWithoutUserInput[]
    upsert?: ComplaintUpsertWithWhereUniqueWithoutUserInput | ComplaintUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ComplaintCreateManyUserInputEnvelope
    set?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    disconnect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    delete?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    connect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    update?: ComplaintUpdateWithWhereUniqueWithoutUserInput | ComplaintUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ComplaintUpdateManyWithWhereWithoutUserInput | ComplaintUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ComplaintScalarWhereInput | ComplaintScalarWhereInput[]
  }

  export type BookingUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<BookingCreateWithoutUserInput, BookingUncheckedCreateWithoutUserInput> | BookingCreateWithoutUserInput[] | BookingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BookingCreateOrConnectWithoutUserInput | BookingCreateOrConnectWithoutUserInput[]
    upsert?: BookingUpsertWithWhereUniqueWithoutUserInput | BookingUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BookingCreateManyUserInputEnvelope
    set?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    disconnect?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    delete?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    connect?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    update?: BookingUpdateWithWhereUniqueWithoutUserInput | BookingUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BookingUpdateManyWithWhereWithoutUserInput | BookingUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BookingScalarWhereInput | BookingScalarWhereInput[]
  }

  export type ProductUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<ProductCreateWithoutCreatedByInput, ProductUncheckedCreateWithoutCreatedByInput> | ProductCreateWithoutCreatedByInput[] | ProductUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutCreatedByInput | ProductCreateOrConnectWithoutCreatedByInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutCreatedByInput | ProductUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: ProductCreateManyCreatedByInputEnvelope
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutCreatedByInput | ProductUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutCreatedByInput | ProductUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type B2BAccountUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<B2BAccountCreateWithoutUserInput, B2BAccountUncheckedCreateWithoutUserInput> | B2BAccountCreateWithoutUserInput[] | B2BAccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: B2BAccountCreateOrConnectWithoutUserInput | B2BAccountCreateOrConnectWithoutUserInput[]
    upsert?: B2BAccountUpsertWithWhereUniqueWithoutUserInput | B2BAccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: B2BAccountCreateManyUserInputEnvelope
    set?: B2BAccountWhereUniqueInput | B2BAccountWhereUniqueInput[]
    disconnect?: B2BAccountWhereUniqueInput | B2BAccountWhereUniqueInput[]
    delete?: B2BAccountWhereUniqueInput | B2BAccountWhereUniqueInput[]
    connect?: B2BAccountWhereUniqueInput | B2BAccountWhereUniqueInput[]
    update?: B2BAccountUpdateWithWhereUniqueWithoutUserInput | B2BAccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: B2BAccountUpdateManyWithWhereWithoutUserInput | B2BAccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: B2BAccountScalarWhereInput | B2BAccountScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutAccountManagerNestedInput = {
    create?: XOR<UserCreateWithoutAccountManagerInput, UserUncheckedCreateWithoutAccountManagerInput> | UserCreateWithoutAccountManagerInput[] | UserUncheckedCreateWithoutAccountManagerInput[]
    connectOrCreate?: UserCreateOrConnectWithoutAccountManagerInput | UserCreateOrConnectWithoutAccountManagerInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutAccountManagerInput | UserUpsertWithWhereUniqueWithoutAccountManagerInput[]
    createMany?: UserCreateManyAccountManagerInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutAccountManagerInput | UserUpdateWithWhereUniqueWithoutAccountManagerInput[]
    updateMany?: UserUpdateManyWithWhereWithoutAccountManagerInput | UserUpdateManyWithWhereWithoutAccountManagerInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type BillingRecordUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<BillingRecordCreateWithoutUserInput, BillingRecordUncheckedCreateWithoutUserInput> | BillingRecordCreateWithoutUserInput[] | BillingRecordUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BillingRecordCreateOrConnectWithoutUserInput | BillingRecordCreateOrConnectWithoutUserInput[]
    upsert?: BillingRecordUpsertWithWhereUniqueWithoutUserInput | BillingRecordUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BillingRecordCreateManyUserInputEnvelope
    set?: BillingRecordWhereUniqueInput | BillingRecordWhereUniqueInput[]
    disconnect?: BillingRecordWhereUniqueInput | BillingRecordWhereUniqueInput[]
    delete?: BillingRecordWhereUniqueInput | BillingRecordWhereUniqueInput[]
    connect?: BillingRecordWhereUniqueInput | BillingRecordWhereUniqueInput[]
    update?: BillingRecordUpdateWithWhereUniqueWithoutUserInput | BillingRecordUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BillingRecordUpdateManyWithWhereWithoutUserInput | BillingRecordUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BillingRecordScalarWhereInput | BillingRecordScalarWhereInput[]
  }

  export type ComplaintUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ComplaintCreateWithoutUserInput, ComplaintUncheckedCreateWithoutUserInput> | ComplaintCreateWithoutUserInput[] | ComplaintUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ComplaintCreateOrConnectWithoutUserInput | ComplaintCreateOrConnectWithoutUserInput[]
    upsert?: ComplaintUpsertWithWhereUniqueWithoutUserInput | ComplaintUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ComplaintCreateManyUserInputEnvelope
    set?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    disconnect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    delete?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    connect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    update?: ComplaintUpdateWithWhereUniqueWithoutUserInput | ComplaintUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ComplaintUpdateManyWithWhereWithoutUserInput | ComplaintUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ComplaintScalarWhereInput | ComplaintScalarWhereInput[]
  }

  export type ProductCreateNestedManyWithoutCategoryInput = {
    create?: XOR<ProductCreateWithoutCategoryInput, ProductUncheckedCreateWithoutCategoryInput> | ProductCreateWithoutCategoryInput[] | ProductUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutCategoryInput | ProductCreateOrConnectWithoutCategoryInput[]
    createMany?: ProductCreateManyCategoryInputEnvelope
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type ProductUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<ProductCreateWithoutCategoryInput, ProductUncheckedCreateWithoutCategoryInput> | ProductCreateWithoutCategoryInput[] | ProductUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutCategoryInput | ProductCreateOrConnectWithoutCategoryInput[]
    createMany?: ProductCreateManyCategoryInputEnvelope
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type EnumCategoryStatusFieldUpdateOperationsInput = {
    set?: $Enums.CategoryStatus
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ProductUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<ProductCreateWithoutCategoryInput, ProductUncheckedCreateWithoutCategoryInput> | ProductCreateWithoutCategoryInput[] | ProductUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutCategoryInput | ProductCreateOrConnectWithoutCategoryInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutCategoryInput | ProductUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: ProductCreateManyCategoryInputEnvelope
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutCategoryInput | ProductUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutCategoryInput | ProductUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type ProductUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<ProductCreateWithoutCategoryInput, ProductUncheckedCreateWithoutCategoryInput> | ProductCreateWithoutCategoryInput[] | ProductUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutCategoryInput | ProductCreateOrConnectWithoutCategoryInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutCategoryInput | ProductUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: ProductCreateManyCategoryInputEnvelope
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutCategoryInput | ProductUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutCategoryInput | ProductUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type ProductImageCreateNestedManyWithoutProductInput = {
    create?: XOR<ProductImageCreateWithoutProductInput, ProductImageUncheckedCreateWithoutProductInput> | ProductImageCreateWithoutProductInput[] | ProductImageUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductImageCreateOrConnectWithoutProductInput | ProductImageCreateOrConnectWithoutProductInput[]
    createMany?: ProductImageCreateManyProductInputEnvelope
    connect?: ProductImageWhereUniqueInput | ProductImageWhereUniqueInput[]
  }

  export type CategoryCreateNestedOneWithoutProductsInput = {
    create?: XOR<CategoryCreateWithoutProductsInput, CategoryUncheckedCreateWithoutProductsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutProductsInput
    connect?: CategoryWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCreatedProductsInput = {
    create?: XOR<UserCreateWithoutCreatedProductsInput, UserUncheckedCreateWithoutCreatedProductsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedProductsInput
    connect?: UserWhereUniqueInput
  }

  export type MarkupRuleCreateNestedManyWithoutProductInput = {
    create?: XOR<MarkupRuleCreateWithoutProductInput, MarkupRuleUncheckedCreateWithoutProductInput> | MarkupRuleCreateWithoutProductInput[] | MarkupRuleUncheckedCreateWithoutProductInput[]
    connectOrCreate?: MarkupRuleCreateOrConnectWithoutProductInput | MarkupRuleCreateOrConnectWithoutProductInput[]
    createMany?: MarkupRuleCreateManyProductInputEnvelope
    connect?: MarkupRuleWhereUniqueInput | MarkupRuleWhereUniqueInput[]
  }

  export type BookingItemCreateNestedManyWithoutProductInput = {
    create?: XOR<BookingItemCreateWithoutProductInput, BookingItemUncheckedCreateWithoutProductInput> | BookingItemCreateWithoutProductInput[] | BookingItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: BookingItemCreateOrConnectWithoutProductInput | BookingItemCreateOrConnectWithoutProductInput[]
    createMany?: BookingItemCreateManyProductInputEnvelope
    connect?: BookingItemWhereUniqueInput | BookingItemWhereUniqueInput[]
  }

  export type ProductImageUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<ProductImageCreateWithoutProductInput, ProductImageUncheckedCreateWithoutProductInput> | ProductImageCreateWithoutProductInput[] | ProductImageUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductImageCreateOrConnectWithoutProductInput | ProductImageCreateOrConnectWithoutProductInput[]
    createMany?: ProductImageCreateManyProductInputEnvelope
    connect?: ProductImageWhereUniqueInput | ProductImageWhereUniqueInput[]
  }

  export type MarkupRuleUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<MarkupRuleCreateWithoutProductInput, MarkupRuleUncheckedCreateWithoutProductInput> | MarkupRuleCreateWithoutProductInput[] | MarkupRuleUncheckedCreateWithoutProductInput[]
    connectOrCreate?: MarkupRuleCreateOrConnectWithoutProductInput | MarkupRuleCreateOrConnectWithoutProductInput[]
    createMany?: MarkupRuleCreateManyProductInputEnvelope
    connect?: MarkupRuleWhereUniqueInput | MarkupRuleWhereUniqueInput[]
  }

  export type BookingItemUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<BookingItemCreateWithoutProductInput, BookingItemUncheckedCreateWithoutProductInput> | BookingItemCreateWithoutProductInput[] | BookingItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: BookingItemCreateOrConnectWithoutProductInput | BookingItemCreateOrConnectWithoutProductInput[]
    createMany?: BookingItemCreateManyProductInputEnvelope
    connect?: BookingItemWhereUniqueInput | BookingItemWhereUniqueInput[]
  }

  export type EnumProductTypeFieldUpdateOperationsInput = {
    set?: $Enums.ProductType
  }

  export type EnumCurrencyFieldUpdateOperationsInput = {
    set?: $Enums.Currency
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ProductImageUpdateManyWithoutProductNestedInput = {
    create?: XOR<ProductImageCreateWithoutProductInput, ProductImageUncheckedCreateWithoutProductInput> | ProductImageCreateWithoutProductInput[] | ProductImageUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductImageCreateOrConnectWithoutProductInput | ProductImageCreateOrConnectWithoutProductInput[]
    upsert?: ProductImageUpsertWithWhereUniqueWithoutProductInput | ProductImageUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: ProductImageCreateManyProductInputEnvelope
    set?: ProductImageWhereUniqueInput | ProductImageWhereUniqueInput[]
    disconnect?: ProductImageWhereUniqueInput | ProductImageWhereUniqueInput[]
    delete?: ProductImageWhereUniqueInput | ProductImageWhereUniqueInput[]
    connect?: ProductImageWhereUniqueInput | ProductImageWhereUniqueInput[]
    update?: ProductImageUpdateWithWhereUniqueWithoutProductInput | ProductImageUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: ProductImageUpdateManyWithWhereWithoutProductInput | ProductImageUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: ProductImageScalarWhereInput | ProductImageScalarWhereInput[]
  }

  export type CategoryUpdateOneRequiredWithoutProductsNestedInput = {
    create?: XOR<CategoryCreateWithoutProductsInput, CategoryUncheckedCreateWithoutProductsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutProductsInput
    upsert?: CategoryUpsertWithoutProductsInput
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutProductsInput, CategoryUpdateWithoutProductsInput>, CategoryUncheckedUpdateWithoutProductsInput>
  }

  export type UserUpdateOneWithoutCreatedProductsNestedInput = {
    create?: XOR<UserCreateWithoutCreatedProductsInput, UserUncheckedCreateWithoutCreatedProductsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedProductsInput
    upsert?: UserUpsertWithoutCreatedProductsInput
    disconnect?: boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedProductsInput, UserUpdateWithoutCreatedProductsInput>, UserUncheckedUpdateWithoutCreatedProductsInput>
  }

  export type MarkupRuleUpdateManyWithoutProductNestedInput = {
    create?: XOR<MarkupRuleCreateWithoutProductInput, MarkupRuleUncheckedCreateWithoutProductInput> | MarkupRuleCreateWithoutProductInput[] | MarkupRuleUncheckedCreateWithoutProductInput[]
    connectOrCreate?: MarkupRuleCreateOrConnectWithoutProductInput | MarkupRuleCreateOrConnectWithoutProductInput[]
    upsert?: MarkupRuleUpsertWithWhereUniqueWithoutProductInput | MarkupRuleUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: MarkupRuleCreateManyProductInputEnvelope
    set?: MarkupRuleWhereUniqueInput | MarkupRuleWhereUniqueInput[]
    disconnect?: MarkupRuleWhereUniqueInput | MarkupRuleWhereUniqueInput[]
    delete?: MarkupRuleWhereUniqueInput | MarkupRuleWhereUniqueInput[]
    connect?: MarkupRuleWhereUniqueInput | MarkupRuleWhereUniqueInput[]
    update?: MarkupRuleUpdateWithWhereUniqueWithoutProductInput | MarkupRuleUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: MarkupRuleUpdateManyWithWhereWithoutProductInput | MarkupRuleUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: MarkupRuleScalarWhereInput | MarkupRuleScalarWhereInput[]
  }

  export type BookingItemUpdateManyWithoutProductNestedInput = {
    create?: XOR<BookingItemCreateWithoutProductInput, BookingItemUncheckedCreateWithoutProductInput> | BookingItemCreateWithoutProductInput[] | BookingItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: BookingItemCreateOrConnectWithoutProductInput | BookingItemCreateOrConnectWithoutProductInput[]
    upsert?: BookingItemUpsertWithWhereUniqueWithoutProductInput | BookingItemUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: BookingItemCreateManyProductInputEnvelope
    set?: BookingItemWhereUniqueInput | BookingItemWhereUniqueInput[]
    disconnect?: BookingItemWhereUniqueInput | BookingItemWhereUniqueInput[]
    delete?: BookingItemWhereUniqueInput | BookingItemWhereUniqueInput[]
    connect?: BookingItemWhereUniqueInput | BookingItemWhereUniqueInput[]
    update?: BookingItemUpdateWithWhereUniqueWithoutProductInput | BookingItemUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: BookingItemUpdateManyWithWhereWithoutProductInput | BookingItemUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: BookingItemScalarWhereInput | BookingItemScalarWhereInput[]
  }

  export type ProductImageUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<ProductImageCreateWithoutProductInput, ProductImageUncheckedCreateWithoutProductInput> | ProductImageCreateWithoutProductInput[] | ProductImageUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductImageCreateOrConnectWithoutProductInput | ProductImageCreateOrConnectWithoutProductInput[]
    upsert?: ProductImageUpsertWithWhereUniqueWithoutProductInput | ProductImageUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: ProductImageCreateManyProductInputEnvelope
    set?: ProductImageWhereUniqueInput | ProductImageWhereUniqueInput[]
    disconnect?: ProductImageWhereUniqueInput | ProductImageWhereUniqueInput[]
    delete?: ProductImageWhereUniqueInput | ProductImageWhereUniqueInput[]
    connect?: ProductImageWhereUniqueInput | ProductImageWhereUniqueInput[]
    update?: ProductImageUpdateWithWhereUniqueWithoutProductInput | ProductImageUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: ProductImageUpdateManyWithWhereWithoutProductInput | ProductImageUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: ProductImageScalarWhereInput | ProductImageScalarWhereInput[]
  }

  export type MarkupRuleUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<MarkupRuleCreateWithoutProductInput, MarkupRuleUncheckedCreateWithoutProductInput> | MarkupRuleCreateWithoutProductInput[] | MarkupRuleUncheckedCreateWithoutProductInput[]
    connectOrCreate?: MarkupRuleCreateOrConnectWithoutProductInput | MarkupRuleCreateOrConnectWithoutProductInput[]
    upsert?: MarkupRuleUpsertWithWhereUniqueWithoutProductInput | MarkupRuleUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: MarkupRuleCreateManyProductInputEnvelope
    set?: MarkupRuleWhereUniqueInput | MarkupRuleWhereUniqueInput[]
    disconnect?: MarkupRuleWhereUniqueInput | MarkupRuleWhereUniqueInput[]
    delete?: MarkupRuleWhereUniqueInput | MarkupRuleWhereUniqueInput[]
    connect?: MarkupRuleWhereUniqueInput | MarkupRuleWhereUniqueInput[]
    update?: MarkupRuleUpdateWithWhereUniqueWithoutProductInput | MarkupRuleUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: MarkupRuleUpdateManyWithWhereWithoutProductInput | MarkupRuleUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: MarkupRuleScalarWhereInput | MarkupRuleScalarWhereInput[]
  }

  export type BookingItemUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<BookingItemCreateWithoutProductInput, BookingItemUncheckedCreateWithoutProductInput> | BookingItemCreateWithoutProductInput[] | BookingItemUncheckedCreateWithoutProductInput[]
    connectOrCreate?: BookingItemCreateOrConnectWithoutProductInput | BookingItemCreateOrConnectWithoutProductInput[]
    upsert?: BookingItemUpsertWithWhereUniqueWithoutProductInput | BookingItemUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: BookingItemCreateManyProductInputEnvelope
    set?: BookingItemWhereUniqueInput | BookingItemWhereUniqueInput[]
    disconnect?: BookingItemWhereUniqueInput | BookingItemWhereUniqueInput[]
    delete?: BookingItemWhereUniqueInput | BookingItemWhereUniqueInput[]
    connect?: BookingItemWhereUniqueInput | BookingItemWhereUniqueInput[]
    update?: BookingItemUpdateWithWhereUniqueWithoutProductInput | BookingItemUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: BookingItemUpdateManyWithWhereWithoutProductInput | BookingItemUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: BookingItemScalarWhereInput | BookingItemScalarWhereInput[]
  }

  export type ProductCreateNestedOneWithoutImagesInput = {
    create?: XOR<ProductCreateWithoutImagesInput, ProductUncheckedCreateWithoutImagesInput>
    connectOrCreate?: ProductCreateOrConnectWithoutImagesInput
    connect?: ProductWhereUniqueInput
  }

  export type ProductUpdateOneRequiredWithoutImagesNestedInput = {
    create?: XOR<ProductCreateWithoutImagesInput, ProductUncheckedCreateWithoutImagesInput>
    connectOrCreate?: ProductCreateOrConnectWithoutImagesInput
    upsert?: ProductUpsertWithoutImagesInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutImagesInput, ProductUpdateWithoutImagesInput>, ProductUncheckedUpdateWithoutImagesInput>
  }

  export type UserCreateNestedOneWithoutB2bAccountsInput = {
    create?: XOR<UserCreateWithoutB2bAccountsInput, UserUncheckedCreateWithoutB2bAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutB2bAccountsInput
    connect?: UserWhereUniqueInput
  }

  export type MarkupRuleCreateNestedManyWithoutB2bAccountInput = {
    create?: XOR<MarkupRuleCreateWithoutB2bAccountInput, MarkupRuleUncheckedCreateWithoutB2bAccountInput> | MarkupRuleCreateWithoutB2bAccountInput[] | MarkupRuleUncheckedCreateWithoutB2bAccountInput[]
    connectOrCreate?: MarkupRuleCreateOrConnectWithoutB2bAccountInput | MarkupRuleCreateOrConnectWithoutB2bAccountInput[]
    createMany?: MarkupRuleCreateManyB2bAccountInputEnvelope
    connect?: MarkupRuleWhereUniqueInput | MarkupRuleWhereUniqueInput[]
  }

  export type BookingCreateNestedManyWithoutB2bAccountInput = {
    create?: XOR<BookingCreateWithoutB2bAccountInput, BookingUncheckedCreateWithoutB2bAccountInput> | BookingCreateWithoutB2bAccountInput[] | BookingUncheckedCreateWithoutB2bAccountInput[]
    connectOrCreate?: BookingCreateOrConnectWithoutB2bAccountInput | BookingCreateOrConnectWithoutB2bAccountInput[]
    createMany?: BookingCreateManyB2bAccountInputEnvelope
    connect?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
  }

  export type MarkupRuleUncheckedCreateNestedManyWithoutB2bAccountInput = {
    create?: XOR<MarkupRuleCreateWithoutB2bAccountInput, MarkupRuleUncheckedCreateWithoutB2bAccountInput> | MarkupRuleCreateWithoutB2bAccountInput[] | MarkupRuleUncheckedCreateWithoutB2bAccountInput[]
    connectOrCreate?: MarkupRuleCreateOrConnectWithoutB2bAccountInput | MarkupRuleCreateOrConnectWithoutB2bAccountInput[]
    createMany?: MarkupRuleCreateManyB2bAccountInputEnvelope
    connect?: MarkupRuleWhereUniqueInput | MarkupRuleWhereUniqueInput[]
  }

  export type BookingUncheckedCreateNestedManyWithoutB2bAccountInput = {
    create?: XOR<BookingCreateWithoutB2bAccountInput, BookingUncheckedCreateWithoutB2bAccountInput> | BookingCreateWithoutB2bAccountInput[] | BookingUncheckedCreateWithoutB2bAccountInput[]
    connectOrCreate?: BookingCreateOrConnectWithoutB2bAccountInput | BookingCreateOrConnectWithoutB2bAccountInput[]
    createMany?: BookingCreateManyB2bAccountInputEnvelope
    connect?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
  }

  export type UserUpdateOneWithoutB2bAccountsNestedInput = {
    create?: XOR<UserCreateWithoutB2bAccountsInput, UserUncheckedCreateWithoutB2bAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutB2bAccountsInput
    upsert?: UserUpsertWithoutB2bAccountsInput
    disconnect?: boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutB2bAccountsInput, UserUpdateWithoutB2bAccountsInput>, UserUncheckedUpdateWithoutB2bAccountsInput>
  }

  export type MarkupRuleUpdateManyWithoutB2bAccountNestedInput = {
    create?: XOR<MarkupRuleCreateWithoutB2bAccountInput, MarkupRuleUncheckedCreateWithoutB2bAccountInput> | MarkupRuleCreateWithoutB2bAccountInput[] | MarkupRuleUncheckedCreateWithoutB2bAccountInput[]
    connectOrCreate?: MarkupRuleCreateOrConnectWithoutB2bAccountInput | MarkupRuleCreateOrConnectWithoutB2bAccountInput[]
    upsert?: MarkupRuleUpsertWithWhereUniqueWithoutB2bAccountInput | MarkupRuleUpsertWithWhereUniqueWithoutB2bAccountInput[]
    createMany?: MarkupRuleCreateManyB2bAccountInputEnvelope
    set?: MarkupRuleWhereUniqueInput | MarkupRuleWhereUniqueInput[]
    disconnect?: MarkupRuleWhereUniqueInput | MarkupRuleWhereUniqueInput[]
    delete?: MarkupRuleWhereUniqueInput | MarkupRuleWhereUniqueInput[]
    connect?: MarkupRuleWhereUniqueInput | MarkupRuleWhereUniqueInput[]
    update?: MarkupRuleUpdateWithWhereUniqueWithoutB2bAccountInput | MarkupRuleUpdateWithWhereUniqueWithoutB2bAccountInput[]
    updateMany?: MarkupRuleUpdateManyWithWhereWithoutB2bAccountInput | MarkupRuleUpdateManyWithWhereWithoutB2bAccountInput[]
    deleteMany?: MarkupRuleScalarWhereInput | MarkupRuleScalarWhereInput[]
  }

  export type BookingUpdateManyWithoutB2bAccountNestedInput = {
    create?: XOR<BookingCreateWithoutB2bAccountInput, BookingUncheckedCreateWithoutB2bAccountInput> | BookingCreateWithoutB2bAccountInput[] | BookingUncheckedCreateWithoutB2bAccountInput[]
    connectOrCreate?: BookingCreateOrConnectWithoutB2bAccountInput | BookingCreateOrConnectWithoutB2bAccountInput[]
    upsert?: BookingUpsertWithWhereUniqueWithoutB2bAccountInput | BookingUpsertWithWhereUniqueWithoutB2bAccountInput[]
    createMany?: BookingCreateManyB2bAccountInputEnvelope
    set?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    disconnect?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    delete?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    connect?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    update?: BookingUpdateWithWhereUniqueWithoutB2bAccountInput | BookingUpdateWithWhereUniqueWithoutB2bAccountInput[]
    updateMany?: BookingUpdateManyWithWhereWithoutB2bAccountInput | BookingUpdateManyWithWhereWithoutB2bAccountInput[]
    deleteMany?: BookingScalarWhereInput | BookingScalarWhereInput[]
  }

  export type MarkupRuleUncheckedUpdateManyWithoutB2bAccountNestedInput = {
    create?: XOR<MarkupRuleCreateWithoutB2bAccountInput, MarkupRuleUncheckedCreateWithoutB2bAccountInput> | MarkupRuleCreateWithoutB2bAccountInput[] | MarkupRuleUncheckedCreateWithoutB2bAccountInput[]
    connectOrCreate?: MarkupRuleCreateOrConnectWithoutB2bAccountInput | MarkupRuleCreateOrConnectWithoutB2bAccountInput[]
    upsert?: MarkupRuleUpsertWithWhereUniqueWithoutB2bAccountInput | MarkupRuleUpsertWithWhereUniqueWithoutB2bAccountInput[]
    createMany?: MarkupRuleCreateManyB2bAccountInputEnvelope
    set?: MarkupRuleWhereUniqueInput | MarkupRuleWhereUniqueInput[]
    disconnect?: MarkupRuleWhereUniqueInput | MarkupRuleWhereUniqueInput[]
    delete?: MarkupRuleWhereUniqueInput | MarkupRuleWhereUniqueInput[]
    connect?: MarkupRuleWhereUniqueInput | MarkupRuleWhereUniqueInput[]
    update?: MarkupRuleUpdateWithWhereUniqueWithoutB2bAccountInput | MarkupRuleUpdateWithWhereUniqueWithoutB2bAccountInput[]
    updateMany?: MarkupRuleUpdateManyWithWhereWithoutB2bAccountInput | MarkupRuleUpdateManyWithWhereWithoutB2bAccountInput[]
    deleteMany?: MarkupRuleScalarWhereInput | MarkupRuleScalarWhereInput[]
  }

  export type BookingUncheckedUpdateManyWithoutB2bAccountNestedInput = {
    create?: XOR<BookingCreateWithoutB2bAccountInput, BookingUncheckedCreateWithoutB2bAccountInput> | BookingCreateWithoutB2bAccountInput[] | BookingUncheckedCreateWithoutB2bAccountInput[]
    connectOrCreate?: BookingCreateOrConnectWithoutB2bAccountInput | BookingCreateOrConnectWithoutB2bAccountInput[]
    upsert?: BookingUpsertWithWhereUniqueWithoutB2bAccountInput | BookingUpsertWithWhereUniqueWithoutB2bAccountInput[]
    createMany?: BookingCreateManyB2bAccountInputEnvelope
    set?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    disconnect?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    delete?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    connect?: BookingWhereUniqueInput | BookingWhereUniqueInput[]
    update?: BookingUpdateWithWhereUniqueWithoutB2bAccountInput | BookingUpdateWithWhereUniqueWithoutB2bAccountInput[]
    updateMany?: BookingUpdateManyWithWhereWithoutB2bAccountInput | BookingUpdateManyWithWhereWithoutB2bAccountInput[]
    deleteMany?: BookingScalarWhereInput | BookingScalarWhereInput[]
  }

  export type B2BAccountCreateNestedOneWithoutMarkupRulesInput = {
    create?: XOR<B2BAccountCreateWithoutMarkupRulesInput, B2BAccountUncheckedCreateWithoutMarkupRulesInput>
    connectOrCreate?: B2BAccountCreateOrConnectWithoutMarkupRulesInput
    connect?: B2BAccountWhereUniqueInput
  }

  export type ProductCreateNestedOneWithoutMarkupRulesInput = {
    create?: XOR<ProductCreateWithoutMarkupRulesInput, ProductUncheckedCreateWithoutMarkupRulesInput>
    connectOrCreate?: ProductCreateOrConnectWithoutMarkupRulesInput
    connect?: ProductWhereUniqueInput
  }

  export type B2BAccountUpdateOneWithoutMarkupRulesNestedInput = {
    create?: XOR<B2BAccountCreateWithoutMarkupRulesInput, B2BAccountUncheckedCreateWithoutMarkupRulesInput>
    connectOrCreate?: B2BAccountCreateOrConnectWithoutMarkupRulesInput
    upsert?: B2BAccountUpsertWithoutMarkupRulesInput
    disconnect?: boolean
    delete?: B2BAccountWhereInput | boolean
    connect?: B2BAccountWhereUniqueInput
    update?: XOR<XOR<B2BAccountUpdateToOneWithWhereWithoutMarkupRulesInput, B2BAccountUpdateWithoutMarkupRulesInput>, B2BAccountUncheckedUpdateWithoutMarkupRulesInput>
  }

  export type ProductUpdateOneWithoutMarkupRulesNestedInput = {
    create?: XOR<ProductCreateWithoutMarkupRulesInput, ProductUncheckedCreateWithoutMarkupRulesInput>
    connectOrCreate?: ProductCreateOrConnectWithoutMarkupRulesInput
    upsert?: ProductUpsertWithoutMarkupRulesInput
    disconnect?: boolean
    delete?: ProductWhereInput | boolean
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutMarkupRulesInput, ProductUpdateWithoutMarkupRulesInput>, ProductUncheckedUpdateWithoutMarkupRulesInput>
  }

  export type UserCreateNestedOneWithoutBookingsInput = {
    create?: XOR<UserCreateWithoutBookingsInput, UserUncheckedCreateWithoutBookingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBookingsInput
    connect?: UserWhereUniqueInput
  }

  export type B2BAccountCreateNestedOneWithoutBookingsInput = {
    create?: XOR<B2BAccountCreateWithoutBookingsInput, B2BAccountUncheckedCreateWithoutBookingsInput>
    connectOrCreate?: B2BAccountCreateOrConnectWithoutBookingsInput
    connect?: B2BAccountWhereUniqueInput
  }

  export type BookingItemCreateNestedManyWithoutBookingInput = {
    create?: XOR<BookingItemCreateWithoutBookingInput, BookingItemUncheckedCreateWithoutBookingInput> | BookingItemCreateWithoutBookingInput[] | BookingItemUncheckedCreateWithoutBookingInput[]
    connectOrCreate?: BookingItemCreateOrConnectWithoutBookingInput | BookingItemCreateOrConnectWithoutBookingInput[]
    createMany?: BookingItemCreateManyBookingInputEnvelope
    connect?: BookingItemWhereUniqueInput | BookingItemWhereUniqueInput[]
  }

  export type PaymentTransactionCreateNestedManyWithoutBookingInput = {
    create?: XOR<PaymentTransactionCreateWithoutBookingInput, PaymentTransactionUncheckedCreateWithoutBookingInput> | PaymentTransactionCreateWithoutBookingInput[] | PaymentTransactionUncheckedCreateWithoutBookingInput[]
    connectOrCreate?: PaymentTransactionCreateOrConnectWithoutBookingInput | PaymentTransactionCreateOrConnectWithoutBookingInput[]
    createMany?: PaymentTransactionCreateManyBookingInputEnvelope
    connect?: PaymentTransactionWhereUniqueInput | PaymentTransactionWhereUniqueInput[]
  }

  export type BillingRecordCreateNestedManyWithoutBookingInput = {
    create?: XOR<BillingRecordCreateWithoutBookingInput, BillingRecordUncheckedCreateWithoutBookingInput> | BillingRecordCreateWithoutBookingInput[] | BillingRecordUncheckedCreateWithoutBookingInput[]
    connectOrCreate?: BillingRecordCreateOrConnectWithoutBookingInput | BillingRecordCreateOrConnectWithoutBookingInput[]
    createMany?: BillingRecordCreateManyBookingInputEnvelope
    connect?: BillingRecordWhereUniqueInput | BillingRecordWhereUniqueInput[]
  }

  export type ComplaintCreateNestedManyWithoutBookingInput = {
    create?: XOR<ComplaintCreateWithoutBookingInput, ComplaintUncheckedCreateWithoutBookingInput> | ComplaintCreateWithoutBookingInput[] | ComplaintUncheckedCreateWithoutBookingInput[]
    connectOrCreate?: ComplaintCreateOrConnectWithoutBookingInput | ComplaintCreateOrConnectWithoutBookingInput[]
    createMany?: ComplaintCreateManyBookingInputEnvelope
    connect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
  }

  export type BookingItemUncheckedCreateNestedManyWithoutBookingInput = {
    create?: XOR<BookingItemCreateWithoutBookingInput, BookingItemUncheckedCreateWithoutBookingInput> | BookingItemCreateWithoutBookingInput[] | BookingItemUncheckedCreateWithoutBookingInput[]
    connectOrCreate?: BookingItemCreateOrConnectWithoutBookingInput | BookingItemCreateOrConnectWithoutBookingInput[]
    createMany?: BookingItemCreateManyBookingInputEnvelope
    connect?: BookingItemWhereUniqueInput | BookingItemWhereUniqueInput[]
  }

  export type PaymentTransactionUncheckedCreateNestedManyWithoutBookingInput = {
    create?: XOR<PaymentTransactionCreateWithoutBookingInput, PaymentTransactionUncheckedCreateWithoutBookingInput> | PaymentTransactionCreateWithoutBookingInput[] | PaymentTransactionUncheckedCreateWithoutBookingInput[]
    connectOrCreate?: PaymentTransactionCreateOrConnectWithoutBookingInput | PaymentTransactionCreateOrConnectWithoutBookingInput[]
    createMany?: PaymentTransactionCreateManyBookingInputEnvelope
    connect?: PaymentTransactionWhereUniqueInput | PaymentTransactionWhereUniqueInput[]
  }

  export type BillingRecordUncheckedCreateNestedManyWithoutBookingInput = {
    create?: XOR<BillingRecordCreateWithoutBookingInput, BillingRecordUncheckedCreateWithoutBookingInput> | BillingRecordCreateWithoutBookingInput[] | BillingRecordUncheckedCreateWithoutBookingInput[]
    connectOrCreate?: BillingRecordCreateOrConnectWithoutBookingInput | BillingRecordCreateOrConnectWithoutBookingInput[]
    createMany?: BillingRecordCreateManyBookingInputEnvelope
    connect?: BillingRecordWhereUniqueInput | BillingRecordWhereUniqueInput[]
  }

  export type ComplaintUncheckedCreateNestedManyWithoutBookingInput = {
    create?: XOR<ComplaintCreateWithoutBookingInput, ComplaintUncheckedCreateWithoutBookingInput> | ComplaintCreateWithoutBookingInput[] | ComplaintUncheckedCreateWithoutBookingInput[]
    connectOrCreate?: ComplaintCreateOrConnectWithoutBookingInput | ComplaintCreateOrConnectWithoutBookingInput[]
    createMany?: ComplaintCreateManyBookingInputEnvelope
    connect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
  }

  export type EnumBookingStatusFieldUpdateOperationsInput = {
    set?: $Enums.BookingStatus
  }

  export type NullableEnumPaymentMethodFieldUpdateOperationsInput = {
    set?: $Enums.PaymentMethod | null
    unset?: boolean
  }

  export type EnumPaymentStatusFieldUpdateOperationsInput = {
    set?: $Enums.PaymentStatus
  }

  export type UserUpdateOneWithoutBookingsNestedInput = {
    create?: XOR<UserCreateWithoutBookingsInput, UserUncheckedCreateWithoutBookingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBookingsInput
    upsert?: UserUpsertWithoutBookingsInput
    disconnect?: boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutBookingsInput, UserUpdateWithoutBookingsInput>, UserUncheckedUpdateWithoutBookingsInput>
  }

  export type B2BAccountUpdateOneWithoutBookingsNestedInput = {
    create?: XOR<B2BAccountCreateWithoutBookingsInput, B2BAccountUncheckedCreateWithoutBookingsInput>
    connectOrCreate?: B2BAccountCreateOrConnectWithoutBookingsInput
    upsert?: B2BAccountUpsertWithoutBookingsInput
    disconnect?: boolean
    delete?: B2BAccountWhereInput | boolean
    connect?: B2BAccountWhereUniqueInput
    update?: XOR<XOR<B2BAccountUpdateToOneWithWhereWithoutBookingsInput, B2BAccountUpdateWithoutBookingsInput>, B2BAccountUncheckedUpdateWithoutBookingsInput>
  }

  export type BookingItemUpdateManyWithoutBookingNestedInput = {
    create?: XOR<BookingItemCreateWithoutBookingInput, BookingItemUncheckedCreateWithoutBookingInput> | BookingItemCreateWithoutBookingInput[] | BookingItemUncheckedCreateWithoutBookingInput[]
    connectOrCreate?: BookingItemCreateOrConnectWithoutBookingInput | BookingItemCreateOrConnectWithoutBookingInput[]
    upsert?: BookingItemUpsertWithWhereUniqueWithoutBookingInput | BookingItemUpsertWithWhereUniqueWithoutBookingInput[]
    createMany?: BookingItemCreateManyBookingInputEnvelope
    set?: BookingItemWhereUniqueInput | BookingItemWhereUniqueInput[]
    disconnect?: BookingItemWhereUniqueInput | BookingItemWhereUniqueInput[]
    delete?: BookingItemWhereUniqueInput | BookingItemWhereUniqueInput[]
    connect?: BookingItemWhereUniqueInput | BookingItemWhereUniqueInput[]
    update?: BookingItemUpdateWithWhereUniqueWithoutBookingInput | BookingItemUpdateWithWhereUniqueWithoutBookingInput[]
    updateMany?: BookingItemUpdateManyWithWhereWithoutBookingInput | BookingItemUpdateManyWithWhereWithoutBookingInput[]
    deleteMany?: BookingItemScalarWhereInput | BookingItemScalarWhereInput[]
  }

  export type PaymentTransactionUpdateManyWithoutBookingNestedInput = {
    create?: XOR<PaymentTransactionCreateWithoutBookingInput, PaymentTransactionUncheckedCreateWithoutBookingInput> | PaymentTransactionCreateWithoutBookingInput[] | PaymentTransactionUncheckedCreateWithoutBookingInput[]
    connectOrCreate?: PaymentTransactionCreateOrConnectWithoutBookingInput | PaymentTransactionCreateOrConnectWithoutBookingInput[]
    upsert?: PaymentTransactionUpsertWithWhereUniqueWithoutBookingInput | PaymentTransactionUpsertWithWhereUniqueWithoutBookingInput[]
    createMany?: PaymentTransactionCreateManyBookingInputEnvelope
    set?: PaymentTransactionWhereUniqueInput | PaymentTransactionWhereUniqueInput[]
    disconnect?: PaymentTransactionWhereUniqueInput | PaymentTransactionWhereUniqueInput[]
    delete?: PaymentTransactionWhereUniqueInput | PaymentTransactionWhereUniqueInput[]
    connect?: PaymentTransactionWhereUniqueInput | PaymentTransactionWhereUniqueInput[]
    update?: PaymentTransactionUpdateWithWhereUniqueWithoutBookingInput | PaymentTransactionUpdateWithWhereUniqueWithoutBookingInput[]
    updateMany?: PaymentTransactionUpdateManyWithWhereWithoutBookingInput | PaymentTransactionUpdateManyWithWhereWithoutBookingInput[]
    deleteMany?: PaymentTransactionScalarWhereInput | PaymentTransactionScalarWhereInput[]
  }

  export type BillingRecordUpdateManyWithoutBookingNestedInput = {
    create?: XOR<BillingRecordCreateWithoutBookingInput, BillingRecordUncheckedCreateWithoutBookingInput> | BillingRecordCreateWithoutBookingInput[] | BillingRecordUncheckedCreateWithoutBookingInput[]
    connectOrCreate?: BillingRecordCreateOrConnectWithoutBookingInput | BillingRecordCreateOrConnectWithoutBookingInput[]
    upsert?: BillingRecordUpsertWithWhereUniqueWithoutBookingInput | BillingRecordUpsertWithWhereUniqueWithoutBookingInput[]
    createMany?: BillingRecordCreateManyBookingInputEnvelope
    set?: BillingRecordWhereUniqueInput | BillingRecordWhereUniqueInput[]
    disconnect?: BillingRecordWhereUniqueInput | BillingRecordWhereUniqueInput[]
    delete?: BillingRecordWhereUniqueInput | BillingRecordWhereUniqueInput[]
    connect?: BillingRecordWhereUniqueInput | BillingRecordWhereUniqueInput[]
    update?: BillingRecordUpdateWithWhereUniqueWithoutBookingInput | BillingRecordUpdateWithWhereUniqueWithoutBookingInput[]
    updateMany?: BillingRecordUpdateManyWithWhereWithoutBookingInput | BillingRecordUpdateManyWithWhereWithoutBookingInput[]
    deleteMany?: BillingRecordScalarWhereInput | BillingRecordScalarWhereInput[]
  }

  export type ComplaintUpdateManyWithoutBookingNestedInput = {
    create?: XOR<ComplaintCreateWithoutBookingInput, ComplaintUncheckedCreateWithoutBookingInput> | ComplaintCreateWithoutBookingInput[] | ComplaintUncheckedCreateWithoutBookingInput[]
    connectOrCreate?: ComplaintCreateOrConnectWithoutBookingInput | ComplaintCreateOrConnectWithoutBookingInput[]
    upsert?: ComplaintUpsertWithWhereUniqueWithoutBookingInput | ComplaintUpsertWithWhereUniqueWithoutBookingInput[]
    createMany?: ComplaintCreateManyBookingInputEnvelope
    set?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    disconnect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    delete?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    connect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    update?: ComplaintUpdateWithWhereUniqueWithoutBookingInput | ComplaintUpdateWithWhereUniqueWithoutBookingInput[]
    updateMany?: ComplaintUpdateManyWithWhereWithoutBookingInput | ComplaintUpdateManyWithWhereWithoutBookingInput[]
    deleteMany?: ComplaintScalarWhereInput | ComplaintScalarWhereInput[]
  }

  export type BookingItemUncheckedUpdateManyWithoutBookingNestedInput = {
    create?: XOR<BookingItemCreateWithoutBookingInput, BookingItemUncheckedCreateWithoutBookingInput> | BookingItemCreateWithoutBookingInput[] | BookingItemUncheckedCreateWithoutBookingInput[]
    connectOrCreate?: BookingItemCreateOrConnectWithoutBookingInput | BookingItemCreateOrConnectWithoutBookingInput[]
    upsert?: BookingItemUpsertWithWhereUniqueWithoutBookingInput | BookingItemUpsertWithWhereUniqueWithoutBookingInput[]
    createMany?: BookingItemCreateManyBookingInputEnvelope
    set?: BookingItemWhereUniqueInput | BookingItemWhereUniqueInput[]
    disconnect?: BookingItemWhereUniqueInput | BookingItemWhereUniqueInput[]
    delete?: BookingItemWhereUniqueInput | BookingItemWhereUniqueInput[]
    connect?: BookingItemWhereUniqueInput | BookingItemWhereUniqueInput[]
    update?: BookingItemUpdateWithWhereUniqueWithoutBookingInput | BookingItemUpdateWithWhereUniqueWithoutBookingInput[]
    updateMany?: BookingItemUpdateManyWithWhereWithoutBookingInput | BookingItemUpdateManyWithWhereWithoutBookingInput[]
    deleteMany?: BookingItemScalarWhereInput | BookingItemScalarWhereInput[]
  }

  export type PaymentTransactionUncheckedUpdateManyWithoutBookingNestedInput = {
    create?: XOR<PaymentTransactionCreateWithoutBookingInput, PaymentTransactionUncheckedCreateWithoutBookingInput> | PaymentTransactionCreateWithoutBookingInput[] | PaymentTransactionUncheckedCreateWithoutBookingInput[]
    connectOrCreate?: PaymentTransactionCreateOrConnectWithoutBookingInput | PaymentTransactionCreateOrConnectWithoutBookingInput[]
    upsert?: PaymentTransactionUpsertWithWhereUniqueWithoutBookingInput | PaymentTransactionUpsertWithWhereUniqueWithoutBookingInput[]
    createMany?: PaymentTransactionCreateManyBookingInputEnvelope
    set?: PaymentTransactionWhereUniqueInput | PaymentTransactionWhereUniqueInput[]
    disconnect?: PaymentTransactionWhereUniqueInput | PaymentTransactionWhereUniqueInput[]
    delete?: PaymentTransactionWhereUniqueInput | PaymentTransactionWhereUniqueInput[]
    connect?: PaymentTransactionWhereUniqueInput | PaymentTransactionWhereUniqueInput[]
    update?: PaymentTransactionUpdateWithWhereUniqueWithoutBookingInput | PaymentTransactionUpdateWithWhereUniqueWithoutBookingInput[]
    updateMany?: PaymentTransactionUpdateManyWithWhereWithoutBookingInput | PaymentTransactionUpdateManyWithWhereWithoutBookingInput[]
    deleteMany?: PaymentTransactionScalarWhereInput | PaymentTransactionScalarWhereInput[]
  }

  export type BillingRecordUncheckedUpdateManyWithoutBookingNestedInput = {
    create?: XOR<BillingRecordCreateWithoutBookingInput, BillingRecordUncheckedCreateWithoutBookingInput> | BillingRecordCreateWithoutBookingInput[] | BillingRecordUncheckedCreateWithoutBookingInput[]
    connectOrCreate?: BillingRecordCreateOrConnectWithoutBookingInput | BillingRecordCreateOrConnectWithoutBookingInput[]
    upsert?: BillingRecordUpsertWithWhereUniqueWithoutBookingInput | BillingRecordUpsertWithWhereUniqueWithoutBookingInput[]
    createMany?: BillingRecordCreateManyBookingInputEnvelope
    set?: BillingRecordWhereUniqueInput | BillingRecordWhereUniqueInput[]
    disconnect?: BillingRecordWhereUniqueInput | BillingRecordWhereUniqueInput[]
    delete?: BillingRecordWhereUniqueInput | BillingRecordWhereUniqueInput[]
    connect?: BillingRecordWhereUniqueInput | BillingRecordWhereUniqueInput[]
    update?: BillingRecordUpdateWithWhereUniqueWithoutBookingInput | BillingRecordUpdateWithWhereUniqueWithoutBookingInput[]
    updateMany?: BillingRecordUpdateManyWithWhereWithoutBookingInput | BillingRecordUpdateManyWithWhereWithoutBookingInput[]
    deleteMany?: BillingRecordScalarWhereInput | BillingRecordScalarWhereInput[]
  }

  export type ComplaintUncheckedUpdateManyWithoutBookingNestedInput = {
    create?: XOR<ComplaintCreateWithoutBookingInput, ComplaintUncheckedCreateWithoutBookingInput> | ComplaintCreateWithoutBookingInput[] | ComplaintUncheckedCreateWithoutBookingInput[]
    connectOrCreate?: ComplaintCreateOrConnectWithoutBookingInput | ComplaintCreateOrConnectWithoutBookingInput[]
    upsert?: ComplaintUpsertWithWhereUniqueWithoutBookingInput | ComplaintUpsertWithWhereUniqueWithoutBookingInput[]
    createMany?: ComplaintCreateManyBookingInputEnvelope
    set?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    disconnect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    delete?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    connect?: ComplaintWhereUniqueInput | ComplaintWhereUniqueInput[]
    update?: ComplaintUpdateWithWhereUniqueWithoutBookingInput | ComplaintUpdateWithWhereUniqueWithoutBookingInput[]
    updateMany?: ComplaintUpdateManyWithWhereWithoutBookingInput | ComplaintUpdateManyWithWhereWithoutBookingInput[]
    deleteMany?: ComplaintScalarWhereInput | ComplaintScalarWhereInput[]
  }

  export type BookingCreateNestedOneWithoutItemsInput = {
    create?: XOR<BookingCreateWithoutItemsInput, BookingUncheckedCreateWithoutItemsInput>
    connectOrCreate?: BookingCreateOrConnectWithoutItemsInput
    connect?: BookingWhereUniqueInput
  }

  export type ProductCreateNestedOneWithoutBookingItemsInput = {
    create?: XOR<ProductCreateWithoutBookingItemsInput, ProductUncheckedCreateWithoutBookingItemsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutBookingItemsInput
    connect?: ProductWhereUniqueInput
  }

  export type BookingUpdateOneRequiredWithoutItemsNestedInput = {
    create?: XOR<BookingCreateWithoutItemsInput, BookingUncheckedCreateWithoutItemsInput>
    connectOrCreate?: BookingCreateOrConnectWithoutItemsInput
    upsert?: BookingUpsertWithoutItemsInput
    connect?: BookingWhereUniqueInput
    update?: XOR<XOR<BookingUpdateToOneWithWhereWithoutItemsInput, BookingUpdateWithoutItemsInput>, BookingUncheckedUpdateWithoutItemsInput>
  }

  export type ProductUpdateOneWithoutBookingItemsNestedInput = {
    create?: XOR<ProductCreateWithoutBookingItemsInput, ProductUncheckedCreateWithoutBookingItemsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutBookingItemsInput
    upsert?: ProductUpsertWithoutBookingItemsInput
    disconnect?: boolean
    delete?: ProductWhereInput | boolean
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutBookingItemsInput, ProductUpdateWithoutBookingItemsInput>, ProductUncheckedUpdateWithoutBookingItemsInput>
  }

  export type BookingCreateNestedOneWithoutPaymentTransactionsInput = {
    create?: XOR<BookingCreateWithoutPaymentTransactionsInput, BookingUncheckedCreateWithoutPaymentTransactionsInput>
    connectOrCreate?: BookingCreateOrConnectWithoutPaymentTransactionsInput
    connect?: BookingWhereUniqueInput
  }

  export type BookingUpdateOneRequiredWithoutPaymentTransactionsNestedInput = {
    create?: XOR<BookingCreateWithoutPaymentTransactionsInput, BookingUncheckedCreateWithoutPaymentTransactionsInput>
    connectOrCreate?: BookingCreateOrConnectWithoutPaymentTransactionsInput
    upsert?: BookingUpsertWithoutPaymentTransactionsInput
    connect?: BookingWhereUniqueInput
    update?: XOR<XOR<BookingUpdateToOneWithWhereWithoutPaymentTransactionsInput, BookingUpdateWithoutPaymentTransactionsInput>, BookingUncheckedUpdateWithoutPaymentTransactionsInput>
  }

  export type UserCreateNestedOneWithoutBillingRecordsInput = {
    create?: XOR<UserCreateWithoutBillingRecordsInput, UserUncheckedCreateWithoutBillingRecordsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBillingRecordsInput
    connect?: UserWhereUniqueInput
  }

  export type BookingCreateNestedOneWithoutBillingRecordsInput = {
    create?: XOR<BookingCreateWithoutBillingRecordsInput, BookingUncheckedCreateWithoutBillingRecordsInput>
    connectOrCreate?: BookingCreateOrConnectWithoutBillingRecordsInput
    connect?: BookingWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
    unset?: boolean
  }

  export type UserUpdateOneRequiredWithoutBillingRecordsNestedInput = {
    create?: XOR<UserCreateWithoutBillingRecordsInput, UserUncheckedCreateWithoutBillingRecordsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBillingRecordsInput
    upsert?: UserUpsertWithoutBillingRecordsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutBillingRecordsInput, UserUpdateWithoutBillingRecordsInput>, UserUncheckedUpdateWithoutBillingRecordsInput>
  }

  export type BookingUpdateOneRequiredWithoutBillingRecordsNestedInput = {
    create?: XOR<BookingCreateWithoutBillingRecordsInput, BookingUncheckedCreateWithoutBillingRecordsInput>
    connectOrCreate?: BookingCreateOrConnectWithoutBillingRecordsInput
    upsert?: BookingUpsertWithoutBillingRecordsInput
    connect?: BookingWhereUniqueInput
    update?: XOR<XOR<BookingUpdateToOneWithWhereWithoutBillingRecordsInput, BookingUpdateWithoutBillingRecordsInput>, BookingUncheckedUpdateWithoutBillingRecordsInput>
  }

  export type UserCreateNestedOneWithoutComplaintsInput = {
    create?: XOR<UserCreateWithoutComplaintsInput, UserUncheckedCreateWithoutComplaintsInput>
    connectOrCreate?: UserCreateOrConnectWithoutComplaintsInput
    connect?: UserWhereUniqueInput
  }

  export type BookingCreateNestedOneWithoutComplaintsInput = {
    create?: XOR<BookingCreateWithoutComplaintsInput, BookingUncheckedCreateWithoutComplaintsInput>
    connectOrCreate?: BookingCreateOrConnectWithoutComplaintsInput
    connect?: BookingWhereUniqueInput
  }

  export type ComplaintMessageCreateNestedManyWithoutComplaintInput = {
    create?: XOR<ComplaintMessageCreateWithoutComplaintInput, ComplaintMessageUncheckedCreateWithoutComplaintInput> | ComplaintMessageCreateWithoutComplaintInput[] | ComplaintMessageUncheckedCreateWithoutComplaintInput[]
    connectOrCreate?: ComplaintMessageCreateOrConnectWithoutComplaintInput | ComplaintMessageCreateOrConnectWithoutComplaintInput[]
    createMany?: ComplaintMessageCreateManyComplaintInputEnvelope
    connect?: ComplaintMessageWhereUniqueInput | ComplaintMessageWhereUniqueInput[]
  }

  export type ComplaintMessageUncheckedCreateNestedManyWithoutComplaintInput = {
    create?: XOR<ComplaintMessageCreateWithoutComplaintInput, ComplaintMessageUncheckedCreateWithoutComplaintInput> | ComplaintMessageCreateWithoutComplaintInput[] | ComplaintMessageUncheckedCreateWithoutComplaintInput[]
    connectOrCreate?: ComplaintMessageCreateOrConnectWithoutComplaintInput | ComplaintMessageCreateOrConnectWithoutComplaintInput[]
    createMany?: ComplaintMessageCreateManyComplaintInputEnvelope
    connect?: ComplaintMessageWhereUniqueInput | ComplaintMessageWhereUniqueInput[]
  }

  export type EnumComplaintCategoryFieldUpdateOperationsInput = {
    set?: $Enums.ComplaintCategory
  }

  export type EnumComplaintPriorityFieldUpdateOperationsInput = {
    set?: $Enums.ComplaintPriority
  }

  export type EnumComplaintStatusFieldUpdateOperationsInput = {
    set?: $Enums.ComplaintStatus
  }

  export type UserUpdateOneRequiredWithoutComplaintsNestedInput = {
    create?: XOR<UserCreateWithoutComplaintsInput, UserUncheckedCreateWithoutComplaintsInput>
    connectOrCreate?: UserCreateOrConnectWithoutComplaintsInput
    upsert?: UserUpsertWithoutComplaintsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutComplaintsInput, UserUpdateWithoutComplaintsInput>, UserUncheckedUpdateWithoutComplaintsInput>
  }

  export type BookingUpdateOneWithoutComplaintsNestedInput = {
    create?: XOR<BookingCreateWithoutComplaintsInput, BookingUncheckedCreateWithoutComplaintsInput>
    connectOrCreate?: BookingCreateOrConnectWithoutComplaintsInput
    upsert?: BookingUpsertWithoutComplaintsInput
    disconnect?: boolean
    delete?: BookingWhereInput | boolean
    connect?: BookingWhereUniqueInput
    update?: XOR<XOR<BookingUpdateToOneWithWhereWithoutComplaintsInput, BookingUpdateWithoutComplaintsInput>, BookingUncheckedUpdateWithoutComplaintsInput>
  }

  export type ComplaintMessageUpdateManyWithoutComplaintNestedInput = {
    create?: XOR<ComplaintMessageCreateWithoutComplaintInput, ComplaintMessageUncheckedCreateWithoutComplaintInput> | ComplaintMessageCreateWithoutComplaintInput[] | ComplaintMessageUncheckedCreateWithoutComplaintInput[]
    connectOrCreate?: ComplaintMessageCreateOrConnectWithoutComplaintInput | ComplaintMessageCreateOrConnectWithoutComplaintInput[]
    upsert?: ComplaintMessageUpsertWithWhereUniqueWithoutComplaintInput | ComplaintMessageUpsertWithWhereUniqueWithoutComplaintInput[]
    createMany?: ComplaintMessageCreateManyComplaintInputEnvelope
    set?: ComplaintMessageWhereUniqueInput | ComplaintMessageWhereUniqueInput[]
    disconnect?: ComplaintMessageWhereUniqueInput | ComplaintMessageWhereUniqueInput[]
    delete?: ComplaintMessageWhereUniqueInput | ComplaintMessageWhereUniqueInput[]
    connect?: ComplaintMessageWhereUniqueInput | ComplaintMessageWhereUniqueInput[]
    update?: ComplaintMessageUpdateWithWhereUniqueWithoutComplaintInput | ComplaintMessageUpdateWithWhereUniqueWithoutComplaintInput[]
    updateMany?: ComplaintMessageUpdateManyWithWhereWithoutComplaintInput | ComplaintMessageUpdateManyWithWhereWithoutComplaintInput[]
    deleteMany?: ComplaintMessageScalarWhereInput | ComplaintMessageScalarWhereInput[]
  }

  export type ComplaintMessageUncheckedUpdateManyWithoutComplaintNestedInput = {
    create?: XOR<ComplaintMessageCreateWithoutComplaintInput, ComplaintMessageUncheckedCreateWithoutComplaintInput> | ComplaintMessageCreateWithoutComplaintInput[] | ComplaintMessageUncheckedCreateWithoutComplaintInput[]
    connectOrCreate?: ComplaintMessageCreateOrConnectWithoutComplaintInput | ComplaintMessageCreateOrConnectWithoutComplaintInput[]
    upsert?: ComplaintMessageUpsertWithWhereUniqueWithoutComplaintInput | ComplaintMessageUpsertWithWhereUniqueWithoutComplaintInput[]
    createMany?: ComplaintMessageCreateManyComplaintInputEnvelope
    set?: ComplaintMessageWhereUniqueInput | ComplaintMessageWhereUniqueInput[]
    disconnect?: ComplaintMessageWhereUniqueInput | ComplaintMessageWhereUniqueInput[]
    delete?: ComplaintMessageWhereUniqueInput | ComplaintMessageWhereUniqueInput[]
    connect?: ComplaintMessageWhereUniqueInput | ComplaintMessageWhereUniqueInput[]
    update?: ComplaintMessageUpdateWithWhereUniqueWithoutComplaintInput | ComplaintMessageUpdateWithWhereUniqueWithoutComplaintInput[]
    updateMany?: ComplaintMessageUpdateManyWithWhereWithoutComplaintInput | ComplaintMessageUpdateManyWithWhereWithoutComplaintInput[]
    deleteMany?: ComplaintMessageScalarWhereInput | ComplaintMessageScalarWhereInput[]
  }

  export type ComplaintCreateNestedOneWithoutMessagesInput = {
    create?: XOR<ComplaintCreateWithoutMessagesInput, ComplaintUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: ComplaintCreateOrConnectWithoutMessagesInput
    connect?: ComplaintWhereUniqueInput
  }

  export type ComplaintUpdateOneRequiredWithoutMessagesNestedInput = {
    create?: XOR<ComplaintCreateWithoutMessagesInput, ComplaintUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: ComplaintCreateOrConnectWithoutMessagesInput
    upsert?: ComplaintUpsertWithoutMessagesInput
    connect?: ComplaintWhereUniqueInput
    update?: XOR<XOR<ComplaintUpdateToOneWithWhereWithoutMessagesInput, ComplaintUpdateWithoutMessagesInput>, ComplaintUncheckedUpdateWithoutMessagesInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
    isSet?: boolean
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
    isSet?: boolean
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
    isSet?: boolean
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
    isSet?: boolean
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    isSet?: boolean
  }

  export type NestedEnumCategoryStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.CategoryStatus | EnumCategoryStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CategoryStatus[] | ListEnumCategoryStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CategoryStatus[] | ListEnumCategoryStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCategoryStatusFilter<$PrismaModel> | $Enums.CategoryStatus
  }

  export type NestedEnumCategoryStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CategoryStatus | EnumCategoryStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CategoryStatus[] | ListEnumCategoryStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CategoryStatus[] | ListEnumCategoryStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCategoryStatusWithAggregatesFilter<$PrismaModel> | $Enums.CategoryStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCategoryStatusFilter<$PrismaModel>
    _max?: NestedEnumCategoryStatusFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumProductTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ProductType | EnumProductTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ProductType[] | ListEnumProductTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProductType[] | ListEnumProductTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumProductTypeFilter<$PrismaModel> | $Enums.ProductType
  }

  export type NestedEnumCurrencyFilter<$PrismaModel = never> = {
    equals?: $Enums.Currency | EnumCurrencyFieldRefInput<$PrismaModel>
    in?: $Enums.Currency[] | ListEnumCurrencyFieldRefInput<$PrismaModel>
    notIn?: $Enums.Currency[] | ListEnumCurrencyFieldRefInput<$PrismaModel>
    not?: NestedEnumCurrencyFilter<$PrismaModel> | $Enums.Currency
  }

  export type NestedEnumProductTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProductType | EnumProductTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ProductType[] | ListEnumProductTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProductType[] | ListEnumProductTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumProductTypeWithAggregatesFilter<$PrismaModel> | $Enums.ProductType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProductTypeFilter<$PrismaModel>
    _max?: NestedEnumProductTypeFilter<$PrismaModel>
  }

  export type NestedEnumCurrencyWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Currency | EnumCurrencyFieldRefInput<$PrismaModel>
    in?: $Enums.Currency[] | ListEnumCurrencyFieldRefInput<$PrismaModel>
    notIn?: $Enums.Currency[] | ListEnumCurrencyFieldRefInput<$PrismaModel>
    not?: NestedEnumCurrencyWithAggregatesFilter<$PrismaModel> | $Enums.Currency
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCurrencyFilter<$PrismaModel>
    _max?: NestedEnumCurrencyFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedEnumBookingStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.BookingStatus | EnumBookingStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BookingStatus[] | ListEnumBookingStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.BookingStatus[] | ListEnumBookingStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumBookingStatusFilter<$PrismaModel> | $Enums.BookingStatus
  }

  export type NestedEnumPaymentMethodNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel> | null
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel> | null
    not?: NestedEnumPaymentMethodNullableFilter<$PrismaModel> | $Enums.PaymentMethod | null
    isSet?: boolean
  }

  export type NestedEnumPaymentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatusFilter<$PrismaModel> | $Enums.PaymentStatus
  }

  export type NestedEnumBookingStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BookingStatus | EnumBookingStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BookingStatus[] | ListEnumBookingStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.BookingStatus[] | ListEnumBookingStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumBookingStatusWithAggregatesFilter<$PrismaModel> | $Enums.BookingStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBookingStatusFilter<$PrismaModel>
    _max?: NestedEnumBookingStatusFilter<$PrismaModel>
  }

  export type NestedEnumPaymentMethodNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentMethod | EnumPaymentMethodFieldRefInput<$PrismaModel> | null
    in?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.PaymentMethod[] | ListEnumPaymentMethodFieldRefInput<$PrismaModel> | null
    not?: NestedEnumPaymentMethodNullableWithAggregatesFilter<$PrismaModel> | $Enums.PaymentMethod | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumPaymentMethodNullableFilter<$PrismaModel>
    _max?: NestedEnumPaymentMethodNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type NestedEnumPaymentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatusWithAggregatesFilter<$PrismaModel> | $Enums.PaymentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentStatusFilter<$PrismaModel>
    _max?: NestedEnumPaymentStatusFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
    isSet?: boolean
  }
  export type NestedJsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
  }

  export type NestedEnumComplaintCategoryFilter<$PrismaModel = never> = {
    equals?: $Enums.ComplaintCategory | EnumComplaintCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.ComplaintCategory[] | ListEnumComplaintCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.ComplaintCategory[] | ListEnumComplaintCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumComplaintCategoryFilter<$PrismaModel> | $Enums.ComplaintCategory
  }

  export type NestedEnumComplaintPriorityFilter<$PrismaModel = never> = {
    equals?: $Enums.ComplaintPriority | EnumComplaintPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.ComplaintPriority[] | ListEnumComplaintPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.ComplaintPriority[] | ListEnumComplaintPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumComplaintPriorityFilter<$PrismaModel> | $Enums.ComplaintPriority
  }

  export type NestedEnumComplaintStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ComplaintStatus | EnumComplaintStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ComplaintStatus[] | ListEnumComplaintStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ComplaintStatus[] | ListEnumComplaintStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumComplaintStatusFilter<$PrismaModel> | $Enums.ComplaintStatus
  }

  export type NestedEnumComplaintCategoryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ComplaintCategory | EnumComplaintCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.ComplaintCategory[] | ListEnumComplaintCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.ComplaintCategory[] | ListEnumComplaintCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumComplaintCategoryWithAggregatesFilter<$PrismaModel> | $Enums.ComplaintCategory
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumComplaintCategoryFilter<$PrismaModel>
    _max?: NestedEnumComplaintCategoryFilter<$PrismaModel>
  }

  export type NestedEnumComplaintPriorityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ComplaintPriority | EnumComplaintPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.ComplaintPriority[] | ListEnumComplaintPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.ComplaintPriority[] | ListEnumComplaintPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumComplaintPriorityWithAggregatesFilter<$PrismaModel> | $Enums.ComplaintPriority
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumComplaintPriorityFilter<$PrismaModel>
    _max?: NestedEnumComplaintPriorityFilter<$PrismaModel>
  }

  export type NestedEnumComplaintStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ComplaintStatus | EnumComplaintStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ComplaintStatus[] | ListEnumComplaintStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ComplaintStatus[] | ListEnumComplaintStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumComplaintStatusWithAggregatesFilter<$PrismaModel> | $Enums.ComplaintStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumComplaintStatusFilter<$PrismaModel>
    _max?: NestedEnumComplaintStatusFilter<$PrismaModel>
  }

  export type BookingCreateWithoutUserInput = {
    id?: string
    reference: string
    status?: $Enums.BookingStatus
    paymentMethod?: $Enums.PaymentMethod | null
    paymentStatus?: $Enums.PaymentStatus
    paymentIntentId?: string | null
    paymentGateway?: string | null
    gatewayReference?: string | null
    currency?: $Enums.Currency
    totalNet: number
    totalMarkup: number
    totalGross: number
    supplierRef?: string | null
    voucherUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    passengerCount?: number
    leadPassenger?: InputJsonValue | null
    externalBookingId?: string | null
    apiResponse?: InputJsonValue | null
    apiCalledAt?: Date | string | null
    syncedAt?: Date | string | null
    b2bAccount?: B2BAccountCreateNestedOneWithoutBookingsInput
    items?: BookingItemCreateNestedManyWithoutBookingInput
    paymentTransactions?: PaymentTransactionCreateNestedManyWithoutBookingInput
    billingRecords?: BillingRecordCreateNestedManyWithoutBookingInput
    complaints?: ComplaintCreateNestedManyWithoutBookingInput
  }

  export type BookingUncheckedCreateWithoutUserInput = {
    id?: string
    reference: string
    b2bAccountId?: string | null
    status?: $Enums.BookingStatus
    paymentMethod?: $Enums.PaymentMethod | null
    paymentStatus?: $Enums.PaymentStatus
    paymentIntentId?: string | null
    paymentGateway?: string | null
    gatewayReference?: string | null
    currency?: $Enums.Currency
    totalNet: number
    totalMarkup: number
    totalGross: number
    supplierRef?: string | null
    voucherUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    passengerCount?: number
    leadPassenger?: InputJsonValue | null
    externalBookingId?: string | null
    apiResponse?: InputJsonValue | null
    apiCalledAt?: Date | string | null
    syncedAt?: Date | string | null
    items?: BookingItemUncheckedCreateNestedManyWithoutBookingInput
    paymentTransactions?: PaymentTransactionUncheckedCreateNestedManyWithoutBookingInput
    billingRecords?: BillingRecordUncheckedCreateNestedManyWithoutBookingInput
    complaints?: ComplaintUncheckedCreateNestedManyWithoutBookingInput
  }

  export type BookingCreateOrConnectWithoutUserInput = {
    where: BookingWhereUniqueInput
    create: XOR<BookingCreateWithoutUserInput, BookingUncheckedCreateWithoutUserInput>
  }

  export type BookingCreateManyUserInputEnvelope = {
    data: BookingCreateManyUserInput | BookingCreateManyUserInput[]
  }

  export type ProductCreateWithoutCreatedByInput = {
    id?: string
    name: string
    slug: string
    type: $Enums.ProductType
    shortDesc?: string | null
    longDesc?: string | null
    baseCurrency?: $Enums.Currency
    basePrice: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    externalIds?: InputJsonValue | null
    images?: ProductImageCreateNestedManyWithoutProductInput
    category: CategoryCreateNestedOneWithoutProductsInput
    markupRules?: MarkupRuleCreateNestedManyWithoutProductInput
    bookingItems?: BookingItemCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutCreatedByInput = {
    id?: string
    name: string
    slug: string
    type: $Enums.ProductType
    shortDesc?: string | null
    longDesc?: string | null
    baseCurrency?: $Enums.Currency
    basePrice: number
    isActive?: boolean
    categoryId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    externalIds?: InputJsonValue | null
    images?: ProductImageUncheckedCreateNestedManyWithoutProductInput
    markupRules?: MarkupRuleUncheckedCreateNestedManyWithoutProductInput
    bookingItems?: BookingItemUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutCreatedByInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutCreatedByInput, ProductUncheckedCreateWithoutCreatedByInput>
  }

  export type ProductCreateManyCreatedByInputEnvelope = {
    data: ProductCreateManyCreatedByInput | ProductCreateManyCreatedByInput[]
  }

  export type B2BAccountCreateWithoutUserInput = {
    id?: string
    name: string
    code: string
    defaultMarkup?: number
    currency?: $Enums.Currency
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    markupRules?: MarkupRuleCreateNestedManyWithoutB2bAccountInput
    bookings?: BookingCreateNestedManyWithoutB2bAccountInput
  }

  export type B2BAccountUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    code: string
    defaultMarkup?: number
    currency?: $Enums.Currency
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    markupRules?: MarkupRuleUncheckedCreateNestedManyWithoutB2bAccountInput
    bookings?: BookingUncheckedCreateNestedManyWithoutB2bAccountInput
  }

  export type B2BAccountCreateOrConnectWithoutUserInput = {
    where: B2BAccountWhereUniqueInput
    create: XOR<B2BAccountCreateWithoutUserInput, B2BAccountUncheckedCreateWithoutUserInput>
  }

  export type B2BAccountCreateManyUserInputEnvelope = {
    data: B2BAccountCreateManyUserInput | B2BAccountCreateManyUserInput[]
  }

  export type UserCreateWithoutAccountManagerInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phoneNumber: string
    dateOfBirth?: Date | string | null
    nationality: string
    password: string
    role?: $Enums.Role
    preferredLanguage?: string
    companyName?: string | null
    businessLicense?: string | null
    markupType?: string | null
    markupValue?: number | null
    isActive?: boolean
    emailVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    metadata?: InputJsonValue | null
    bookings?: BookingCreateNestedManyWithoutUserInput
    createdProducts?: ProductCreateNestedManyWithoutCreatedByInput
    b2bAccounts?: B2BAccountCreateNestedManyWithoutUserInput
    managedUsers?: UserCreateNestedManyWithoutAccountManagerInput
    billingRecords?: BillingRecordCreateNestedManyWithoutUserInput
    complaints?: ComplaintCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAccountManagerInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phoneNumber: string
    dateOfBirth?: Date | string | null
    nationality: string
    password: string
    role?: $Enums.Role
    preferredLanguage?: string
    companyName?: string | null
    businessLicense?: string | null
    markupType?: string | null
    markupValue?: number | null
    isActive?: boolean
    emailVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    metadata?: InputJsonValue | null
    bookings?: BookingUncheckedCreateNestedManyWithoutUserInput
    createdProducts?: ProductUncheckedCreateNestedManyWithoutCreatedByInput
    b2bAccounts?: B2BAccountUncheckedCreateNestedManyWithoutUserInput
    managedUsers?: UserUncheckedCreateNestedManyWithoutAccountManagerInput
    billingRecords?: BillingRecordUncheckedCreateNestedManyWithoutUserInput
    complaints?: ComplaintUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAccountManagerInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAccountManagerInput, UserUncheckedCreateWithoutAccountManagerInput>
  }

  export type UserCreateManyAccountManagerInputEnvelope = {
    data: UserCreateManyAccountManagerInput | UserCreateManyAccountManagerInput[]
  }

  export type UserCreateWithoutManagedUsersInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phoneNumber: string
    dateOfBirth?: Date | string | null
    nationality: string
    password: string
    role?: $Enums.Role
    preferredLanguage?: string
    companyName?: string | null
    businessLicense?: string | null
    markupType?: string | null
    markupValue?: number | null
    isActive?: boolean
    emailVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    metadata?: InputJsonValue | null
    bookings?: BookingCreateNestedManyWithoutUserInput
    createdProducts?: ProductCreateNestedManyWithoutCreatedByInput
    b2bAccounts?: B2BAccountCreateNestedManyWithoutUserInput
    accountManager?: UserCreateNestedOneWithoutManagedUsersInput
    billingRecords?: BillingRecordCreateNestedManyWithoutUserInput
    complaints?: ComplaintCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutManagedUsersInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phoneNumber: string
    dateOfBirth?: Date | string | null
    nationality: string
    password: string
    role?: $Enums.Role
    preferredLanguage?: string
    companyName?: string | null
    businessLicense?: string | null
    markupType?: string | null
    markupValue?: number | null
    isActive?: boolean
    emailVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    metadata?: InputJsonValue | null
    accountManagerId?: string | null
    bookings?: BookingUncheckedCreateNestedManyWithoutUserInput
    createdProducts?: ProductUncheckedCreateNestedManyWithoutCreatedByInput
    b2bAccounts?: B2BAccountUncheckedCreateNestedManyWithoutUserInput
    billingRecords?: BillingRecordUncheckedCreateNestedManyWithoutUserInput
    complaints?: ComplaintUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutManagedUsersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutManagedUsersInput, UserUncheckedCreateWithoutManagedUsersInput>
  }

  export type BillingRecordCreateWithoutUserInput = {
    id?: string
    planName?: string | null
    duration?: number | null
    price: number
    paymentSessionId?: string | null
    purchasedAt?: Date | string
    booking: BookingCreateNestedOneWithoutBillingRecordsInput
  }

  export type BillingRecordUncheckedCreateWithoutUserInput = {
    id?: string
    bookingId: string
    planName?: string | null
    duration?: number | null
    price: number
    paymentSessionId?: string | null
    purchasedAt?: Date | string
  }

  export type BillingRecordCreateOrConnectWithoutUserInput = {
    where: BillingRecordWhereUniqueInput
    create: XOR<BillingRecordCreateWithoutUserInput, BillingRecordUncheckedCreateWithoutUserInput>
  }

  export type BillingRecordCreateManyUserInputEnvelope = {
    data: BillingRecordCreateManyUserInput | BillingRecordCreateManyUserInput[]
  }

  export type ComplaintCreateWithoutUserInput = {
    id?: string
    subject: string
    category: $Enums.ComplaintCategory
    priority?: $Enums.ComplaintPriority
    status?: $Enums.ComplaintStatus
    tourId?: string | null
    tourName?: string | null
    description: string
    expectedOutcome?: string | null
    refundAmount?: number | null
    contactEmail: string
    contactPhone: string
    preferredContactMethod?: string | null
    attachments?: InputJsonValue | null
    adminResponse?: string | null
    resolvedAt?: Date | string | null
    assignedTo?: string | null
    rating?: number | null
    ratingComment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    booking?: BookingCreateNestedOneWithoutComplaintsInput
    messages?: ComplaintMessageCreateNestedManyWithoutComplaintInput
  }

  export type ComplaintUncheckedCreateWithoutUserInput = {
    id?: string
    subject: string
    category: $Enums.ComplaintCategory
    priority?: $Enums.ComplaintPriority
    status?: $Enums.ComplaintStatus
    bookingId?: string | null
    tourId?: string | null
    tourName?: string | null
    description: string
    expectedOutcome?: string | null
    refundAmount?: number | null
    contactEmail: string
    contactPhone: string
    preferredContactMethod?: string | null
    attachments?: InputJsonValue | null
    adminResponse?: string | null
    resolvedAt?: Date | string | null
    assignedTo?: string | null
    rating?: number | null
    ratingComment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: ComplaintMessageUncheckedCreateNestedManyWithoutComplaintInput
  }

  export type ComplaintCreateOrConnectWithoutUserInput = {
    where: ComplaintWhereUniqueInput
    create: XOR<ComplaintCreateWithoutUserInput, ComplaintUncheckedCreateWithoutUserInput>
  }

  export type ComplaintCreateManyUserInputEnvelope = {
    data: ComplaintCreateManyUserInput | ComplaintCreateManyUserInput[]
  }

  export type BookingUpsertWithWhereUniqueWithoutUserInput = {
    where: BookingWhereUniqueInput
    update: XOR<BookingUpdateWithoutUserInput, BookingUncheckedUpdateWithoutUserInput>
    create: XOR<BookingCreateWithoutUserInput, BookingUncheckedCreateWithoutUserInput>
  }

  export type BookingUpdateWithWhereUniqueWithoutUserInput = {
    where: BookingWhereUniqueInput
    data: XOR<BookingUpdateWithoutUserInput, BookingUncheckedUpdateWithoutUserInput>
  }

  export type BookingUpdateManyWithWhereWithoutUserInput = {
    where: BookingScalarWhereInput
    data: XOR<BookingUpdateManyMutationInput, BookingUncheckedUpdateManyWithoutUserInput>
  }

  export type BookingScalarWhereInput = {
    AND?: BookingScalarWhereInput | BookingScalarWhereInput[]
    OR?: BookingScalarWhereInput[]
    NOT?: BookingScalarWhereInput | BookingScalarWhereInput[]
    id?: StringFilter<"Booking"> | string
    reference?: StringFilter<"Booking"> | string
    userId?: StringNullableFilter<"Booking"> | string | null
    b2bAccountId?: StringNullableFilter<"Booking"> | string | null
    status?: EnumBookingStatusFilter<"Booking"> | $Enums.BookingStatus
    paymentMethod?: EnumPaymentMethodNullableFilter<"Booking"> | $Enums.PaymentMethod | null
    paymentStatus?: EnumPaymentStatusFilter<"Booking"> | $Enums.PaymentStatus
    paymentIntentId?: StringNullableFilter<"Booking"> | string | null
    paymentGateway?: StringNullableFilter<"Booking"> | string | null
    gatewayReference?: StringNullableFilter<"Booking"> | string | null
    currency?: EnumCurrencyFilter<"Booking"> | $Enums.Currency
    totalNet?: FloatFilter<"Booking"> | number
    totalMarkup?: FloatFilter<"Booking"> | number
    totalGross?: FloatFilter<"Booking"> | number
    supplierRef?: StringNullableFilter<"Booking"> | string | null
    voucherUrl?: StringNullableFilter<"Booking"> | string | null
    createdAt?: DateTimeFilter<"Booking"> | Date | string
    updatedAt?: DateTimeFilter<"Booking"> | Date | string
    passengerCount?: IntFilter<"Booking"> | number
    leadPassenger?: JsonNullableFilter<"Booking">
    externalBookingId?: StringNullableFilter<"Booking"> | string | null
    apiResponse?: JsonNullableFilter<"Booking">
    apiCalledAt?: DateTimeNullableFilter<"Booking"> | Date | string | null
    syncedAt?: DateTimeNullableFilter<"Booking"> | Date | string | null
  }

  export type ProductUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: ProductWhereUniqueInput
    update: XOR<ProductUpdateWithoutCreatedByInput, ProductUncheckedUpdateWithoutCreatedByInput>
    create: XOR<ProductCreateWithoutCreatedByInput, ProductUncheckedCreateWithoutCreatedByInput>
  }

  export type ProductUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: ProductWhereUniqueInput
    data: XOR<ProductUpdateWithoutCreatedByInput, ProductUncheckedUpdateWithoutCreatedByInput>
  }

  export type ProductUpdateManyWithWhereWithoutCreatedByInput = {
    where: ProductScalarWhereInput
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type ProductScalarWhereInput = {
    AND?: ProductScalarWhereInput | ProductScalarWhereInput[]
    OR?: ProductScalarWhereInput[]
    NOT?: ProductScalarWhereInput | ProductScalarWhereInput[]
    id?: StringFilter<"Product"> | string
    name?: StringFilter<"Product"> | string
    slug?: StringFilter<"Product"> | string
    type?: EnumProductTypeFilter<"Product"> | $Enums.ProductType
    shortDesc?: StringNullableFilter<"Product"> | string | null
    longDesc?: StringNullableFilter<"Product"> | string | null
    baseCurrency?: EnumCurrencyFilter<"Product"> | $Enums.Currency
    basePrice?: FloatFilter<"Product"> | number
    isActive?: BoolFilter<"Product"> | boolean
    categoryId?: StringFilter<"Product"> | string
    createdAt?: DateTimeFilter<"Product"> | Date | string
    updatedAt?: DateTimeFilter<"Product"> | Date | string
    createdById?: StringNullableFilter<"Product"> | string | null
    externalIds?: JsonNullableFilter<"Product">
  }

  export type B2BAccountUpsertWithWhereUniqueWithoutUserInput = {
    where: B2BAccountWhereUniqueInput
    update: XOR<B2BAccountUpdateWithoutUserInput, B2BAccountUncheckedUpdateWithoutUserInput>
    create: XOR<B2BAccountCreateWithoutUserInput, B2BAccountUncheckedCreateWithoutUserInput>
  }

  export type B2BAccountUpdateWithWhereUniqueWithoutUserInput = {
    where: B2BAccountWhereUniqueInput
    data: XOR<B2BAccountUpdateWithoutUserInput, B2BAccountUncheckedUpdateWithoutUserInput>
  }

  export type B2BAccountUpdateManyWithWhereWithoutUserInput = {
    where: B2BAccountScalarWhereInput
    data: XOR<B2BAccountUpdateManyMutationInput, B2BAccountUncheckedUpdateManyWithoutUserInput>
  }

  export type B2BAccountScalarWhereInput = {
    AND?: B2BAccountScalarWhereInput | B2BAccountScalarWhereInput[]
    OR?: B2BAccountScalarWhereInput[]
    NOT?: B2BAccountScalarWhereInput | B2BAccountScalarWhereInput[]
    id?: StringFilter<"B2BAccount"> | string
    name?: StringFilter<"B2BAccount"> | string
    code?: StringFilter<"B2BAccount"> | string
    userId?: StringNullableFilter<"B2BAccount"> | string | null
    defaultMarkup?: FloatFilter<"B2BAccount"> | number
    currency?: EnumCurrencyFilter<"B2BAccount"> | $Enums.Currency
    isActive?: BoolFilter<"B2BAccount"> | boolean
    createdAt?: DateTimeFilter<"B2BAccount"> | Date | string
    updatedAt?: DateTimeFilter<"B2BAccount"> | Date | string
  }

  export type UserUpsertWithWhereUniqueWithoutAccountManagerInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutAccountManagerInput, UserUncheckedUpdateWithoutAccountManagerInput>
    create: XOR<UserCreateWithoutAccountManagerInput, UserUncheckedCreateWithoutAccountManagerInput>
  }

  export type UserUpdateWithWhereUniqueWithoutAccountManagerInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutAccountManagerInput, UserUncheckedUpdateWithoutAccountManagerInput>
  }

  export type UserUpdateManyWithWhereWithoutAccountManagerInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutAccountManagerInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: StringFilter<"User"> | string
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    phoneNumber?: StringFilter<"User"> | string
    dateOfBirth?: DateTimeNullableFilter<"User"> | Date | string | null
    nationality?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    preferredLanguage?: StringFilter<"User"> | string
    companyName?: StringNullableFilter<"User"> | string | null
    businessLicense?: StringNullableFilter<"User"> | string | null
    markupType?: StringNullableFilter<"User"> | string | null
    markupValue?: FloatNullableFilter<"User"> | number | null
    isActive?: BoolFilter<"User"> | boolean
    emailVerified?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    metadata?: JsonNullableFilter<"User">
    accountManagerId?: StringNullableFilter<"User"> | string | null
  }

  export type UserUpsertWithoutManagedUsersInput = {
    update: XOR<UserUpdateWithoutManagedUsersInput, UserUncheckedUpdateWithoutManagedUsersInput>
    create: XOR<UserCreateWithoutManagedUsersInput, UserUncheckedCreateWithoutManagedUsersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutManagedUsersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutManagedUsersInput, UserUncheckedUpdateWithoutManagedUsersInput>
  }

  export type UserUpdateWithoutManagedUsersInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nationality?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    businessLicense?: NullableStringFieldUpdateOperationsInput | string | null
    markupType?: NullableStringFieldUpdateOperationsInput | string | null
    markupValue?: NullableFloatFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: InputJsonValue | InputJsonValue | null
    bookings?: BookingUpdateManyWithoutUserNestedInput
    createdProducts?: ProductUpdateManyWithoutCreatedByNestedInput
    b2bAccounts?: B2BAccountUpdateManyWithoutUserNestedInput
    accountManager?: UserUpdateOneWithoutManagedUsersNestedInput
    billingRecords?: BillingRecordUpdateManyWithoutUserNestedInput
    complaints?: ComplaintUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutManagedUsersInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nationality?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    businessLicense?: NullableStringFieldUpdateOperationsInput | string | null
    markupType?: NullableStringFieldUpdateOperationsInput | string | null
    markupValue?: NullableFloatFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: InputJsonValue | InputJsonValue | null
    accountManagerId?: NullableStringFieldUpdateOperationsInput | string | null
    bookings?: BookingUncheckedUpdateManyWithoutUserNestedInput
    createdProducts?: ProductUncheckedUpdateManyWithoutCreatedByNestedInput
    b2bAccounts?: B2BAccountUncheckedUpdateManyWithoutUserNestedInput
    billingRecords?: BillingRecordUncheckedUpdateManyWithoutUserNestedInput
    complaints?: ComplaintUncheckedUpdateManyWithoutUserNestedInput
  }

  export type BillingRecordUpsertWithWhereUniqueWithoutUserInput = {
    where: BillingRecordWhereUniqueInput
    update: XOR<BillingRecordUpdateWithoutUserInput, BillingRecordUncheckedUpdateWithoutUserInput>
    create: XOR<BillingRecordCreateWithoutUserInput, BillingRecordUncheckedCreateWithoutUserInput>
  }

  export type BillingRecordUpdateWithWhereUniqueWithoutUserInput = {
    where: BillingRecordWhereUniqueInput
    data: XOR<BillingRecordUpdateWithoutUserInput, BillingRecordUncheckedUpdateWithoutUserInput>
  }

  export type BillingRecordUpdateManyWithWhereWithoutUserInput = {
    where: BillingRecordScalarWhereInput
    data: XOR<BillingRecordUpdateManyMutationInput, BillingRecordUncheckedUpdateManyWithoutUserInput>
  }

  export type BillingRecordScalarWhereInput = {
    AND?: BillingRecordScalarWhereInput | BillingRecordScalarWhereInput[]
    OR?: BillingRecordScalarWhereInput[]
    NOT?: BillingRecordScalarWhereInput | BillingRecordScalarWhereInput[]
    id?: StringFilter<"BillingRecord"> | string
    userId?: StringFilter<"BillingRecord"> | string
    bookingId?: StringFilter<"BillingRecord"> | string
    planName?: StringNullableFilter<"BillingRecord"> | string | null
    duration?: IntNullableFilter<"BillingRecord"> | number | null
    price?: FloatFilter<"BillingRecord"> | number
    paymentSessionId?: StringNullableFilter<"BillingRecord"> | string | null
    purchasedAt?: DateTimeFilter<"BillingRecord"> | Date | string
  }

  export type ComplaintUpsertWithWhereUniqueWithoutUserInput = {
    where: ComplaintWhereUniqueInput
    update: XOR<ComplaintUpdateWithoutUserInput, ComplaintUncheckedUpdateWithoutUserInput>
    create: XOR<ComplaintCreateWithoutUserInput, ComplaintUncheckedCreateWithoutUserInput>
  }

  export type ComplaintUpdateWithWhereUniqueWithoutUserInput = {
    where: ComplaintWhereUniqueInput
    data: XOR<ComplaintUpdateWithoutUserInput, ComplaintUncheckedUpdateWithoutUserInput>
  }

  export type ComplaintUpdateManyWithWhereWithoutUserInput = {
    where: ComplaintScalarWhereInput
    data: XOR<ComplaintUpdateManyMutationInput, ComplaintUncheckedUpdateManyWithoutUserInput>
  }

  export type ComplaintScalarWhereInput = {
    AND?: ComplaintScalarWhereInput | ComplaintScalarWhereInput[]
    OR?: ComplaintScalarWhereInput[]
    NOT?: ComplaintScalarWhereInput | ComplaintScalarWhereInput[]
    id?: StringFilter<"Complaint"> | string
    userId?: StringFilter<"Complaint"> | string
    subject?: StringFilter<"Complaint"> | string
    category?: EnumComplaintCategoryFilter<"Complaint"> | $Enums.ComplaintCategory
    priority?: EnumComplaintPriorityFilter<"Complaint"> | $Enums.ComplaintPriority
    status?: EnumComplaintStatusFilter<"Complaint"> | $Enums.ComplaintStatus
    bookingId?: StringNullableFilter<"Complaint"> | string | null
    tourId?: StringNullableFilter<"Complaint"> | string | null
    tourName?: StringNullableFilter<"Complaint"> | string | null
    description?: StringFilter<"Complaint"> | string
    expectedOutcome?: StringNullableFilter<"Complaint"> | string | null
    refundAmount?: FloatNullableFilter<"Complaint"> | number | null
    contactEmail?: StringFilter<"Complaint"> | string
    contactPhone?: StringFilter<"Complaint"> | string
    preferredContactMethod?: StringNullableFilter<"Complaint"> | string | null
    attachments?: JsonNullableFilter<"Complaint">
    adminResponse?: StringNullableFilter<"Complaint"> | string | null
    resolvedAt?: DateTimeNullableFilter<"Complaint"> | Date | string | null
    assignedTo?: StringNullableFilter<"Complaint"> | string | null
    rating?: IntNullableFilter<"Complaint"> | number | null
    ratingComment?: StringNullableFilter<"Complaint"> | string | null
    createdAt?: DateTimeFilter<"Complaint"> | Date | string
    updatedAt?: DateTimeFilter<"Complaint"> | Date | string
  }

  export type ProductCreateWithoutCategoryInput = {
    id?: string
    name: string
    slug: string
    type: $Enums.ProductType
    shortDesc?: string | null
    longDesc?: string | null
    baseCurrency?: $Enums.Currency
    basePrice: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    externalIds?: InputJsonValue | null
    images?: ProductImageCreateNestedManyWithoutProductInput
    createdBy?: UserCreateNestedOneWithoutCreatedProductsInput
    markupRules?: MarkupRuleCreateNestedManyWithoutProductInput
    bookingItems?: BookingItemCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutCategoryInput = {
    id?: string
    name: string
    slug: string
    type: $Enums.ProductType
    shortDesc?: string | null
    longDesc?: string | null
    baseCurrency?: $Enums.Currency
    basePrice: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    externalIds?: InputJsonValue | null
    images?: ProductImageUncheckedCreateNestedManyWithoutProductInput
    markupRules?: MarkupRuleUncheckedCreateNestedManyWithoutProductInput
    bookingItems?: BookingItemUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutCategoryInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutCategoryInput, ProductUncheckedCreateWithoutCategoryInput>
  }

  export type ProductCreateManyCategoryInputEnvelope = {
    data: ProductCreateManyCategoryInput | ProductCreateManyCategoryInput[]
  }

  export type ProductUpsertWithWhereUniqueWithoutCategoryInput = {
    where: ProductWhereUniqueInput
    update: XOR<ProductUpdateWithoutCategoryInput, ProductUncheckedUpdateWithoutCategoryInput>
    create: XOR<ProductCreateWithoutCategoryInput, ProductUncheckedCreateWithoutCategoryInput>
  }

  export type ProductUpdateWithWhereUniqueWithoutCategoryInput = {
    where: ProductWhereUniqueInput
    data: XOR<ProductUpdateWithoutCategoryInput, ProductUncheckedUpdateWithoutCategoryInput>
  }

  export type ProductUpdateManyWithWhereWithoutCategoryInput = {
    where: ProductScalarWhereInput
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyWithoutCategoryInput>
  }

  export type ProductImageCreateWithoutProductInput = {
    id?: string
    url: string
    alt?: string | null
  }

  export type ProductImageUncheckedCreateWithoutProductInput = {
    id?: string
    url: string
    alt?: string | null
  }

  export type ProductImageCreateOrConnectWithoutProductInput = {
    where: ProductImageWhereUniqueInput
    create: XOR<ProductImageCreateWithoutProductInput, ProductImageUncheckedCreateWithoutProductInput>
  }

  export type ProductImageCreateManyProductInputEnvelope = {
    data: ProductImageCreateManyProductInput | ProductImageCreateManyProductInput[]
  }

  export type CategoryCreateWithoutProductsInput = {
    id?: string
    name: string
    description: string
    slug: string
    icon?: string | null
    status?: $Enums.CategoryStatus
    displayOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CategoryUncheckedCreateWithoutProductsInput = {
    id?: string
    name: string
    description: string
    slug: string
    icon?: string | null
    status?: $Enums.CategoryStatus
    displayOrder?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CategoryCreateOrConnectWithoutProductsInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutProductsInput, CategoryUncheckedCreateWithoutProductsInput>
  }

  export type UserCreateWithoutCreatedProductsInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phoneNumber: string
    dateOfBirth?: Date | string | null
    nationality: string
    password: string
    role?: $Enums.Role
    preferredLanguage?: string
    companyName?: string | null
    businessLicense?: string | null
    markupType?: string | null
    markupValue?: number | null
    isActive?: boolean
    emailVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    metadata?: InputJsonValue | null
    bookings?: BookingCreateNestedManyWithoutUserInput
    b2bAccounts?: B2BAccountCreateNestedManyWithoutUserInput
    managedUsers?: UserCreateNestedManyWithoutAccountManagerInput
    accountManager?: UserCreateNestedOneWithoutManagedUsersInput
    billingRecords?: BillingRecordCreateNestedManyWithoutUserInput
    complaints?: ComplaintCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCreatedProductsInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phoneNumber: string
    dateOfBirth?: Date | string | null
    nationality: string
    password: string
    role?: $Enums.Role
    preferredLanguage?: string
    companyName?: string | null
    businessLicense?: string | null
    markupType?: string | null
    markupValue?: number | null
    isActive?: boolean
    emailVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    metadata?: InputJsonValue | null
    accountManagerId?: string | null
    bookings?: BookingUncheckedCreateNestedManyWithoutUserInput
    b2bAccounts?: B2BAccountUncheckedCreateNestedManyWithoutUserInput
    managedUsers?: UserUncheckedCreateNestedManyWithoutAccountManagerInput
    billingRecords?: BillingRecordUncheckedCreateNestedManyWithoutUserInput
    complaints?: ComplaintUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCreatedProductsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedProductsInput, UserUncheckedCreateWithoutCreatedProductsInput>
  }

  export type MarkupRuleCreateWithoutProductInput = {
    id?: string
    percentage: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    b2bAccount?: B2BAccountCreateNestedOneWithoutMarkupRulesInput
  }

  export type MarkupRuleUncheckedCreateWithoutProductInput = {
    id?: string
    b2bAccountId?: string | null
    percentage: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
  }

  export type MarkupRuleCreateOrConnectWithoutProductInput = {
    where: MarkupRuleWhereUniqueInput
    create: XOR<MarkupRuleCreateWithoutProductInput, MarkupRuleUncheckedCreateWithoutProductInput>
  }

  export type MarkupRuleCreateManyProductInputEnvelope = {
    data: MarkupRuleCreateManyProductInput | MarkupRuleCreateManyProductInput[]
  }

  export type BookingItemCreateWithoutProductInput = {
    id?: string
    name: string
    date?: Date | string | null
    quantity?: number
    unitNet: number
    unitGross: number
    subtotalNet: number
    subtotalGross: number
    booking: BookingCreateNestedOneWithoutItemsInput
  }

  export type BookingItemUncheckedCreateWithoutProductInput = {
    id?: string
    bookingId: string
    name: string
    date?: Date | string | null
    quantity?: number
    unitNet: number
    unitGross: number
    subtotalNet: number
    subtotalGross: number
  }

  export type BookingItemCreateOrConnectWithoutProductInput = {
    where: BookingItemWhereUniqueInput
    create: XOR<BookingItemCreateWithoutProductInput, BookingItemUncheckedCreateWithoutProductInput>
  }

  export type BookingItemCreateManyProductInputEnvelope = {
    data: BookingItemCreateManyProductInput | BookingItemCreateManyProductInput[]
  }

  export type ProductImageUpsertWithWhereUniqueWithoutProductInput = {
    where: ProductImageWhereUniqueInput
    update: XOR<ProductImageUpdateWithoutProductInput, ProductImageUncheckedUpdateWithoutProductInput>
    create: XOR<ProductImageCreateWithoutProductInput, ProductImageUncheckedCreateWithoutProductInput>
  }

  export type ProductImageUpdateWithWhereUniqueWithoutProductInput = {
    where: ProductImageWhereUniqueInput
    data: XOR<ProductImageUpdateWithoutProductInput, ProductImageUncheckedUpdateWithoutProductInput>
  }

  export type ProductImageUpdateManyWithWhereWithoutProductInput = {
    where: ProductImageScalarWhereInput
    data: XOR<ProductImageUpdateManyMutationInput, ProductImageUncheckedUpdateManyWithoutProductInput>
  }

  export type ProductImageScalarWhereInput = {
    AND?: ProductImageScalarWhereInput | ProductImageScalarWhereInput[]
    OR?: ProductImageScalarWhereInput[]
    NOT?: ProductImageScalarWhereInput | ProductImageScalarWhereInput[]
    id?: StringFilter<"ProductImage"> | string
    url?: StringFilter<"ProductImage"> | string
    alt?: StringNullableFilter<"ProductImage"> | string | null
    productId?: StringFilter<"ProductImage"> | string
  }

  export type CategoryUpsertWithoutProductsInput = {
    update: XOR<CategoryUpdateWithoutProductsInput, CategoryUncheckedUpdateWithoutProductsInput>
    create: XOR<CategoryCreateWithoutProductsInput, CategoryUncheckedCreateWithoutProductsInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutProductsInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutProductsInput, CategoryUncheckedUpdateWithoutProductsInput>
  }

  export type CategoryUpdateWithoutProductsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCategoryStatusFieldUpdateOperationsInput | $Enums.CategoryStatus
    displayOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryUncheckedUpdateWithoutProductsInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCategoryStatusFieldUpdateOperationsInput | $Enums.CategoryStatus
    displayOrder?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutCreatedProductsInput = {
    update: XOR<UserUpdateWithoutCreatedProductsInput, UserUncheckedUpdateWithoutCreatedProductsInput>
    create: XOR<UserCreateWithoutCreatedProductsInput, UserUncheckedCreateWithoutCreatedProductsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedProductsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedProductsInput, UserUncheckedUpdateWithoutCreatedProductsInput>
  }

  export type UserUpdateWithoutCreatedProductsInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nationality?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    businessLicense?: NullableStringFieldUpdateOperationsInput | string | null
    markupType?: NullableStringFieldUpdateOperationsInput | string | null
    markupValue?: NullableFloatFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: InputJsonValue | InputJsonValue | null
    bookings?: BookingUpdateManyWithoutUserNestedInput
    b2bAccounts?: B2BAccountUpdateManyWithoutUserNestedInput
    managedUsers?: UserUpdateManyWithoutAccountManagerNestedInput
    accountManager?: UserUpdateOneWithoutManagedUsersNestedInput
    billingRecords?: BillingRecordUpdateManyWithoutUserNestedInput
    complaints?: ComplaintUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedProductsInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nationality?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    businessLicense?: NullableStringFieldUpdateOperationsInput | string | null
    markupType?: NullableStringFieldUpdateOperationsInput | string | null
    markupValue?: NullableFloatFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: InputJsonValue | InputJsonValue | null
    accountManagerId?: NullableStringFieldUpdateOperationsInput | string | null
    bookings?: BookingUncheckedUpdateManyWithoutUserNestedInput
    b2bAccounts?: B2BAccountUncheckedUpdateManyWithoutUserNestedInput
    managedUsers?: UserUncheckedUpdateManyWithoutAccountManagerNestedInput
    billingRecords?: BillingRecordUncheckedUpdateManyWithoutUserNestedInput
    complaints?: ComplaintUncheckedUpdateManyWithoutUserNestedInput
  }

  export type MarkupRuleUpsertWithWhereUniqueWithoutProductInput = {
    where: MarkupRuleWhereUniqueInput
    update: XOR<MarkupRuleUpdateWithoutProductInput, MarkupRuleUncheckedUpdateWithoutProductInput>
    create: XOR<MarkupRuleCreateWithoutProductInput, MarkupRuleUncheckedCreateWithoutProductInput>
  }

  export type MarkupRuleUpdateWithWhereUniqueWithoutProductInput = {
    where: MarkupRuleWhereUniqueInput
    data: XOR<MarkupRuleUpdateWithoutProductInput, MarkupRuleUncheckedUpdateWithoutProductInput>
  }

  export type MarkupRuleUpdateManyWithWhereWithoutProductInput = {
    where: MarkupRuleScalarWhereInput
    data: XOR<MarkupRuleUpdateManyMutationInput, MarkupRuleUncheckedUpdateManyWithoutProductInput>
  }

  export type MarkupRuleScalarWhereInput = {
    AND?: MarkupRuleScalarWhereInput | MarkupRuleScalarWhereInput[]
    OR?: MarkupRuleScalarWhereInput[]
    NOT?: MarkupRuleScalarWhereInput | MarkupRuleScalarWhereInput[]
    id?: StringFilter<"MarkupRule"> | string
    b2bAccountId?: StringNullableFilter<"MarkupRule"> | string | null
    productId?: StringNullableFilter<"MarkupRule"> | string | null
    percentage?: FloatFilter<"MarkupRule"> | number
    createdAt?: DateTimeFilter<"MarkupRule"> | Date | string
    updatedAt?: DateTimeFilter<"MarkupRule"> | Date | string
    isActive?: BoolFilter<"MarkupRule"> | boolean
  }

  export type BookingItemUpsertWithWhereUniqueWithoutProductInput = {
    where: BookingItemWhereUniqueInput
    update: XOR<BookingItemUpdateWithoutProductInput, BookingItemUncheckedUpdateWithoutProductInput>
    create: XOR<BookingItemCreateWithoutProductInput, BookingItemUncheckedCreateWithoutProductInput>
  }

  export type BookingItemUpdateWithWhereUniqueWithoutProductInput = {
    where: BookingItemWhereUniqueInput
    data: XOR<BookingItemUpdateWithoutProductInput, BookingItemUncheckedUpdateWithoutProductInput>
  }

  export type BookingItemUpdateManyWithWhereWithoutProductInput = {
    where: BookingItemScalarWhereInput
    data: XOR<BookingItemUpdateManyMutationInput, BookingItemUncheckedUpdateManyWithoutProductInput>
  }

  export type BookingItemScalarWhereInput = {
    AND?: BookingItemScalarWhereInput | BookingItemScalarWhereInput[]
    OR?: BookingItemScalarWhereInput[]
    NOT?: BookingItemScalarWhereInput | BookingItemScalarWhereInput[]
    id?: StringFilter<"BookingItem"> | string
    bookingId?: StringFilter<"BookingItem"> | string
    productId?: StringNullableFilter<"BookingItem"> | string | null
    name?: StringFilter<"BookingItem"> | string
    date?: DateTimeNullableFilter<"BookingItem"> | Date | string | null
    quantity?: IntFilter<"BookingItem"> | number
    unitNet?: FloatFilter<"BookingItem"> | number
    unitGross?: FloatFilter<"BookingItem"> | number
    subtotalNet?: FloatFilter<"BookingItem"> | number
    subtotalGross?: FloatFilter<"BookingItem"> | number
  }

  export type ProductCreateWithoutImagesInput = {
    id?: string
    name: string
    slug: string
    type: $Enums.ProductType
    shortDesc?: string | null
    longDesc?: string | null
    baseCurrency?: $Enums.Currency
    basePrice: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    externalIds?: InputJsonValue | null
    category: CategoryCreateNestedOneWithoutProductsInput
    createdBy?: UserCreateNestedOneWithoutCreatedProductsInput
    markupRules?: MarkupRuleCreateNestedManyWithoutProductInput
    bookingItems?: BookingItemCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutImagesInput = {
    id?: string
    name: string
    slug: string
    type: $Enums.ProductType
    shortDesc?: string | null
    longDesc?: string | null
    baseCurrency?: $Enums.Currency
    basePrice: number
    isActive?: boolean
    categoryId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    externalIds?: InputJsonValue | null
    markupRules?: MarkupRuleUncheckedCreateNestedManyWithoutProductInput
    bookingItems?: BookingItemUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutImagesInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutImagesInput, ProductUncheckedCreateWithoutImagesInput>
  }

  export type ProductUpsertWithoutImagesInput = {
    update: XOR<ProductUpdateWithoutImagesInput, ProductUncheckedUpdateWithoutImagesInput>
    create: XOR<ProductCreateWithoutImagesInput, ProductUncheckedCreateWithoutImagesInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutImagesInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutImagesInput, ProductUncheckedUpdateWithoutImagesInput>
  }

  export type ProductUpdateWithoutImagesInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    type?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    longDesc?: NullableStringFieldUpdateOperationsInput | string | null
    baseCurrency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    basePrice?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    externalIds?: InputJsonValue | InputJsonValue | null
    category?: CategoryUpdateOneRequiredWithoutProductsNestedInput
    createdBy?: UserUpdateOneWithoutCreatedProductsNestedInput
    markupRules?: MarkupRuleUpdateManyWithoutProductNestedInput
    bookingItems?: BookingItemUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutImagesInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    type?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    longDesc?: NullableStringFieldUpdateOperationsInput | string | null
    baseCurrency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    basePrice?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    categoryId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    externalIds?: InputJsonValue | InputJsonValue | null
    markupRules?: MarkupRuleUncheckedUpdateManyWithoutProductNestedInput
    bookingItems?: BookingItemUncheckedUpdateManyWithoutProductNestedInput
  }

  export type UserCreateWithoutB2bAccountsInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phoneNumber: string
    dateOfBirth?: Date | string | null
    nationality: string
    password: string
    role?: $Enums.Role
    preferredLanguage?: string
    companyName?: string | null
    businessLicense?: string | null
    markupType?: string | null
    markupValue?: number | null
    isActive?: boolean
    emailVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    metadata?: InputJsonValue | null
    bookings?: BookingCreateNestedManyWithoutUserInput
    createdProducts?: ProductCreateNestedManyWithoutCreatedByInput
    managedUsers?: UserCreateNestedManyWithoutAccountManagerInput
    accountManager?: UserCreateNestedOneWithoutManagedUsersInput
    billingRecords?: BillingRecordCreateNestedManyWithoutUserInput
    complaints?: ComplaintCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutB2bAccountsInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phoneNumber: string
    dateOfBirth?: Date | string | null
    nationality: string
    password: string
    role?: $Enums.Role
    preferredLanguage?: string
    companyName?: string | null
    businessLicense?: string | null
    markupType?: string | null
    markupValue?: number | null
    isActive?: boolean
    emailVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    metadata?: InputJsonValue | null
    accountManagerId?: string | null
    bookings?: BookingUncheckedCreateNestedManyWithoutUserInput
    createdProducts?: ProductUncheckedCreateNestedManyWithoutCreatedByInput
    managedUsers?: UserUncheckedCreateNestedManyWithoutAccountManagerInput
    billingRecords?: BillingRecordUncheckedCreateNestedManyWithoutUserInput
    complaints?: ComplaintUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutB2bAccountsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutB2bAccountsInput, UserUncheckedCreateWithoutB2bAccountsInput>
  }

  export type MarkupRuleCreateWithoutB2bAccountInput = {
    id?: string
    percentage: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    product?: ProductCreateNestedOneWithoutMarkupRulesInput
  }

  export type MarkupRuleUncheckedCreateWithoutB2bAccountInput = {
    id?: string
    productId?: string | null
    percentage: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
  }

  export type MarkupRuleCreateOrConnectWithoutB2bAccountInput = {
    where: MarkupRuleWhereUniqueInput
    create: XOR<MarkupRuleCreateWithoutB2bAccountInput, MarkupRuleUncheckedCreateWithoutB2bAccountInput>
  }

  export type MarkupRuleCreateManyB2bAccountInputEnvelope = {
    data: MarkupRuleCreateManyB2bAccountInput | MarkupRuleCreateManyB2bAccountInput[]
  }

  export type BookingCreateWithoutB2bAccountInput = {
    id?: string
    reference: string
    status?: $Enums.BookingStatus
    paymentMethod?: $Enums.PaymentMethod | null
    paymentStatus?: $Enums.PaymentStatus
    paymentIntentId?: string | null
    paymentGateway?: string | null
    gatewayReference?: string | null
    currency?: $Enums.Currency
    totalNet: number
    totalMarkup: number
    totalGross: number
    supplierRef?: string | null
    voucherUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    passengerCount?: number
    leadPassenger?: InputJsonValue | null
    externalBookingId?: string | null
    apiResponse?: InputJsonValue | null
    apiCalledAt?: Date | string | null
    syncedAt?: Date | string | null
    user?: UserCreateNestedOneWithoutBookingsInput
    items?: BookingItemCreateNestedManyWithoutBookingInput
    paymentTransactions?: PaymentTransactionCreateNestedManyWithoutBookingInput
    billingRecords?: BillingRecordCreateNestedManyWithoutBookingInput
    complaints?: ComplaintCreateNestedManyWithoutBookingInput
  }

  export type BookingUncheckedCreateWithoutB2bAccountInput = {
    id?: string
    reference: string
    userId?: string | null
    status?: $Enums.BookingStatus
    paymentMethod?: $Enums.PaymentMethod | null
    paymentStatus?: $Enums.PaymentStatus
    paymentIntentId?: string | null
    paymentGateway?: string | null
    gatewayReference?: string | null
    currency?: $Enums.Currency
    totalNet: number
    totalMarkup: number
    totalGross: number
    supplierRef?: string | null
    voucherUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    passengerCount?: number
    leadPassenger?: InputJsonValue | null
    externalBookingId?: string | null
    apiResponse?: InputJsonValue | null
    apiCalledAt?: Date | string | null
    syncedAt?: Date | string | null
    items?: BookingItemUncheckedCreateNestedManyWithoutBookingInput
    paymentTransactions?: PaymentTransactionUncheckedCreateNestedManyWithoutBookingInput
    billingRecords?: BillingRecordUncheckedCreateNestedManyWithoutBookingInput
    complaints?: ComplaintUncheckedCreateNestedManyWithoutBookingInput
  }

  export type BookingCreateOrConnectWithoutB2bAccountInput = {
    where: BookingWhereUniqueInput
    create: XOR<BookingCreateWithoutB2bAccountInput, BookingUncheckedCreateWithoutB2bAccountInput>
  }

  export type BookingCreateManyB2bAccountInputEnvelope = {
    data: BookingCreateManyB2bAccountInput | BookingCreateManyB2bAccountInput[]
  }

  export type UserUpsertWithoutB2bAccountsInput = {
    update: XOR<UserUpdateWithoutB2bAccountsInput, UserUncheckedUpdateWithoutB2bAccountsInput>
    create: XOR<UserCreateWithoutB2bAccountsInput, UserUncheckedCreateWithoutB2bAccountsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutB2bAccountsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutB2bAccountsInput, UserUncheckedUpdateWithoutB2bAccountsInput>
  }

  export type UserUpdateWithoutB2bAccountsInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nationality?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    businessLicense?: NullableStringFieldUpdateOperationsInput | string | null
    markupType?: NullableStringFieldUpdateOperationsInput | string | null
    markupValue?: NullableFloatFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: InputJsonValue | InputJsonValue | null
    bookings?: BookingUpdateManyWithoutUserNestedInput
    createdProducts?: ProductUpdateManyWithoutCreatedByNestedInput
    managedUsers?: UserUpdateManyWithoutAccountManagerNestedInput
    accountManager?: UserUpdateOneWithoutManagedUsersNestedInput
    billingRecords?: BillingRecordUpdateManyWithoutUserNestedInput
    complaints?: ComplaintUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutB2bAccountsInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nationality?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    businessLicense?: NullableStringFieldUpdateOperationsInput | string | null
    markupType?: NullableStringFieldUpdateOperationsInput | string | null
    markupValue?: NullableFloatFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: InputJsonValue | InputJsonValue | null
    accountManagerId?: NullableStringFieldUpdateOperationsInput | string | null
    bookings?: BookingUncheckedUpdateManyWithoutUserNestedInput
    createdProducts?: ProductUncheckedUpdateManyWithoutCreatedByNestedInput
    managedUsers?: UserUncheckedUpdateManyWithoutAccountManagerNestedInput
    billingRecords?: BillingRecordUncheckedUpdateManyWithoutUserNestedInput
    complaints?: ComplaintUncheckedUpdateManyWithoutUserNestedInput
  }

  export type MarkupRuleUpsertWithWhereUniqueWithoutB2bAccountInput = {
    where: MarkupRuleWhereUniqueInput
    update: XOR<MarkupRuleUpdateWithoutB2bAccountInput, MarkupRuleUncheckedUpdateWithoutB2bAccountInput>
    create: XOR<MarkupRuleCreateWithoutB2bAccountInput, MarkupRuleUncheckedCreateWithoutB2bAccountInput>
  }

  export type MarkupRuleUpdateWithWhereUniqueWithoutB2bAccountInput = {
    where: MarkupRuleWhereUniqueInput
    data: XOR<MarkupRuleUpdateWithoutB2bAccountInput, MarkupRuleUncheckedUpdateWithoutB2bAccountInput>
  }

  export type MarkupRuleUpdateManyWithWhereWithoutB2bAccountInput = {
    where: MarkupRuleScalarWhereInput
    data: XOR<MarkupRuleUpdateManyMutationInput, MarkupRuleUncheckedUpdateManyWithoutB2bAccountInput>
  }

  export type BookingUpsertWithWhereUniqueWithoutB2bAccountInput = {
    where: BookingWhereUniqueInput
    update: XOR<BookingUpdateWithoutB2bAccountInput, BookingUncheckedUpdateWithoutB2bAccountInput>
    create: XOR<BookingCreateWithoutB2bAccountInput, BookingUncheckedCreateWithoutB2bAccountInput>
  }

  export type BookingUpdateWithWhereUniqueWithoutB2bAccountInput = {
    where: BookingWhereUniqueInput
    data: XOR<BookingUpdateWithoutB2bAccountInput, BookingUncheckedUpdateWithoutB2bAccountInput>
  }

  export type BookingUpdateManyWithWhereWithoutB2bAccountInput = {
    where: BookingScalarWhereInput
    data: XOR<BookingUpdateManyMutationInput, BookingUncheckedUpdateManyWithoutB2bAccountInput>
  }

  export type B2BAccountCreateWithoutMarkupRulesInput = {
    id?: string
    name: string
    code: string
    defaultMarkup?: number
    currency?: $Enums.Currency
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutB2bAccountsInput
    bookings?: BookingCreateNestedManyWithoutB2bAccountInput
  }

  export type B2BAccountUncheckedCreateWithoutMarkupRulesInput = {
    id?: string
    name: string
    code: string
    userId?: string | null
    defaultMarkup?: number
    currency?: $Enums.Currency
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    bookings?: BookingUncheckedCreateNestedManyWithoutB2bAccountInput
  }

  export type B2BAccountCreateOrConnectWithoutMarkupRulesInput = {
    where: B2BAccountWhereUniqueInput
    create: XOR<B2BAccountCreateWithoutMarkupRulesInput, B2BAccountUncheckedCreateWithoutMarkupRulesInput>
  }

  export type ProductCreateWithoutMarkupRulesInput = {
    id?: string
    name: string
    slug: string
    type: $Enums.ProductType
    shortDesc?: string | null
    longDesc?: string | null
    baseCurrency?: $Enums.Currency
    basePrice: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    externalIds?: InputJsonValue | null
    images?: ProductImageCreateNestedManyWithoutProductInput
    category: CategoryCreateNestedOneWithoutProductsInput
    createdBy?: UserCreateNestedOneWithoutCreatedProductsInput
    bookingItems?: BookingItemCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutMarkupRulesInput = {
    id?: string
    name: string
    slug: string
    type: $Enums.ProductType
    shortDesc?: string | null
    longDesc?: string | null
    baseCurrency?: $Enums.Currency
    basePrice: number
    isActive?: boolean
    categoryId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    externalIds?: InputJsonValue | null
    images?: ProductImageUncheckedCreateNestedManyWithoutProductInput
    bookingItems?: BookingItemUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutMarkupRulesInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutMarkupRulesInput, ProductUncheckedCreateWithoutMarkupRulesInput>
  }

  export type B2BAccountUpsertWithoutMarkupRulesInput = {
    update: XOR<B2BAccountUpdateWithoutMarkupRulesInput, B2BAccountUncheckedUpdateWithoutMarkupRulesInput>
    create: XOR<B2BAccountCreateWithoutMarkupRulesInput, B2BAccountUncheckedCreateWithoutMarkupRulesInput>
    where?: B2BAccountWhereInput
  }

  export type B2BAccountUpdateToOneWithWhereWithoutMarkupRulesInput = {
    where?: B2BAccountWhereInput
    data: XOR<B2BAccountUpdateWithoutMarkupRulesInput, B2BAccountUncheckedUpdateWithoutMarkupRulesInput>
  }

  export type B2BAccountUpdateWithoutMarkupRulesInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    defaultMarkup?: FloatFieldUpdateOperationsInput | number
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutB2bAccountsNestedInput
    bookings?: BookingUpdateManyWithoutB2bAccountNestedInput
  }

  export type B2BAccountUncheckedUpdateWithoutMarkupRulesInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    defaultMarkup?: FloatFieldUpdateOperationsInput | number
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bookings?: BookingUncheckedUpdateManyWithoutB2bAccountNestedInput
  }

  export type ProductUpsertWithoutMarkupRulesInput = {
    update: XOR<ProductUpdateWithoutMarkupRulesInput, ProductUncheckedUpdateWithoutMarkupRulesInput>
    create: XOR<ProductCreateWithoutMarkupRulesInput, ProductUncheckedCreateWithoutMarkupRulesInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutMarkupRulesInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutMarkupRulesInput, ProductUncheckedUpdateWithoutMarkupRulesInput>
  }

  export type ProductUpdateWithoutMarkupRulesInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    type?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    longDesc?: NullableStringFieldUpdateOperationsInput | string | null
    baseCurrency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    basePrice?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    externalIds?: InputJsonValue | InputJsonValue | null
    images?: ProductImageUpdateManyWithoutProductNestedInput
    category?: CategoryUpdateOneRequiredWithoutProductsNestedInput
    createdBy?: UserUpdateOneWithoutCreatedProductsNestedInput
    bookingItems?: BookingItemUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutMarkupRulesInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    type?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    longDesc?: NullableStringFieldUpdateOperationsInput | string | null
    baseCurrency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    basePrice?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    categoryId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    externalIds?: InputJsonValue | InputJsonValue | null
    images?: ProductImageUncheckedUpdateManyWithoutProductNestedInput
    bookingItems?: BookingItemUncheckedUpdateManyWithoutProductNestedInput
  }

  export type UserCreateWithoutBookingsInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phoneNumber: string
    dateOfBirth?: Date | string | null
    nationality: string
    password: string
    role?: $Enums.Role
    preferredLanguage?: string
    companyName?: string | null
    businessLicense?: string | null
    markupType?: string | null
    markupValue?: number | null
    isActive?: boolean
    emailVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    metadata?: InputJsonValue | null
    createdProducts?: ProductCreateNestedManyWithoutCreatedByInput
    b2bAccounts?: B2BAccountCreateNestedManyWithoutUserInput
    managedUsers?: UserCreateNestedManyWithoutAccountManagerInput
    accountManager?: UserCreateNestedOneWithoutManagedUsersInput
    billingRecords?: BillingRecordCreateNestedManyWithoutUserInput
    complaints?: ComplaintCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutBookingsInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phoneNumber: string
    dateOfBirth?: Date | string | null
    nationality: string
    password: string
    role?: $Enums.Role
    preferredLanguage?: string
    companyName?: string | null
    businessLicense?: string | null
    markupType?: string | null
    markupValue?: number | null
    isActive?: boolean
    emailVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    metadata?: InputJsonValue | null
    accountManagerId?: string | null
    createdProducts?: ProductUncheckedCreateNestedManyWithoutCreatedByInput
    b2bAccounts?: B2BAccountUncheckedCreateNestedManyWithoutUserInput
    managedUsers?: UserUncheckedCreateNestedManyWithoutAccountManagerInput
    billingRecords?: BillingRecordUncheckedCreateNestedManyWithoutUserInput
    complaints?: ComplaintUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutBookingsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBookingsInput, UserUncheckedCreateWithoutBookingsInput>
  }

  export type B2BAccountCreateWithoutBookingsInput = {
    id?: string
    name: string
    code: string
    defaultMarkup?: number
    currency?: $Enums.Currency
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutB2bAccountsInput
    markupRules?: MarkupRuleCreateNestedManyWithoutB2bAccountInput
  }

  export type B2BAccountUncheckedCreateWithoutBookingsInput = {
    id?: string
    name: string
    code: string
    userId?: string | null
    defaultMarkup?: number
    currency?: $Enums.Currency
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    markupRules?: MarkupRuleUncheckedCreateNestedManyWithoutB2bAccountInput
  }

  export type B2BAccountCreateOrConnectWithoutBookingsInput = {
    where: B2BAccountWhereUniqueInput
    create: XOR<B2BAccountCreateWithoutBookingsInput, B2BAccountUncheckedCreateWithoutBookingsInput>
  }

  export type BookingItemCreateWithoutBookingInput = {
    id?: string
    name: string
    date?: Date | string | null
    quantity?: number
    unitNet: number
    unitGross: number
    subtotalNet: number
    subtotalGross: number
    product?: ProductCreateNestedOneWithoutBookingItemsInput
  }

  export type BookingItemUncheckedCreateWithoutBookingInput = {
    id?: string
    productId?: string | null
    name: string
    date?: Date | string | null
    quantity?: number
    unitNet: number
    unitGross: number
    subtotalNet: number
    subtotalGross: number
  }

  export type BookingItemCreateOrConnectWithoutBookingInput = {
    where: BookingItemWhereUniqueInput
    create: XOR<BookingItemCreateWithoutBookingInput, BookingItemUncheckedCreateWithoutBookingInput>
  }

  export type BookingItemCreateManyBookingInputEnvelope = {
    data: BookingItemCreateManyBookingInput | BookingItemCreateManyBookingInput[]
  }

  export type PaymentTransactionCreateWithoutBookingInput = {
    id?: string
    paymentIntentId: string
    amount: number
    currency?: $Enums.Currency
    status: $Enums.PaymentStatus
    gatewayResponse?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentTransactionUncheckedCreateWithoutBookingInput = {
    id?: string
    paymentIntentId: string
    amount: number
    currency?: $Enums.Currency
    status: $Enums.PaymentStatus
    gatewayResponse?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentTransactionCreateOrConnectWithoutBookingInput = {
    where: PaymentTransactionWhereUniqueInput
    create: XOR<PaymentTransactionCreateWithoutBookingInput, PaymentTransactionUncheckedCreateWithoutBookingInput>
  }

  export type PaymentTransactionCreateManyBookingInputEnvelope = {
    data: PaymentTransactionCreateManyBookingInput | PaymentTransactionCreateManyBookingInput[]
  }

  export type BillingRecordCreateWithoutBookingInput = {
    id?: string
    planName?: string | null
    duration?: number | null
    price: number
    paymentSessionId?: string | null
    purchasedAt?: Date | string
    user: UserCreateNestedOneWithoutBillingRecordsInput
  }

  export type BillingRecordUncheckedCreateWithoutBookingInput = {
    id?: string
    userId: string
    planName?: string | null
    duration?: number | null
    price: number
    paymentSessionId?: string | null
    purchasedAt?: Date | string
  }

  export type BillingRecordCreateOrConnectWithoutBookingInput = {
    where: BillingRecordWhereUniqueInput
    create: XOR<BillingRecordCreateWithoutBookingInput, BillingRecordUncheckedCreateWithoutBookingInput>
  }

  export type BillingRecordCreateManyBookingInputEnvelope = {
    data: BillingRecordCreateManyBookingInput | BillingRecordCreateManyBookingInput[]
  }

  export type ComplaintCreateWithoutBookingInput = {
    id?: string
    subject: string
    category: $Enums.ComplaintCategory
    priority?: $Enums.ComplaintPriority
    status?: $Enums.ComplaintStatus
    tourId?: string | null
    tourName?: string | null
    description: string
    expectedOutcome?: string | null
    refundAmount?: number | null
    contactEmail: string
    contactPhone: string
    preferredContactMethod?: string | null
    attachments?: InputJsonValue | null
    adminResponse?: string | null
    resolvedAt?: Date | string | null
    assignedTo?: string | null
    rating?: number | null
    ratingComment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutComplaintsInput
    messages?: ComplaintMessageCreateNestedManyWithoutComplaintInput
  }

  export type ComplaintUncheckedCreateWithoutBookingInput = {
    id?: string
    userId: string
    subject: string
    category: $Enums.ComplaintCategory
    priority?: $Enums.ComplaintPriority
    status?: $Enums.ComplaintStatus
    tourId?: string | null
    tourName?: string | null
    description: string
    expectedOutcome?: string | null
    refundAmount?: number | null
    contactEmail: string
    contactPhone: string
    preferredContactMethod?: string | null
    attachments?: InputJsonValue | null
    adminResponse?: string | null
    resolvedAt?: Date | string | null
    assignedTo?: string | null
    rating?: number | null
    ratingComment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    messages?: ComplaintMessageUncheckedCreateNestedManyWithoutComplaintInput
  }

  export type ComplaintCreateOrConnectWithoutBookingInput = {
    where: ComplaintWhereUniqueInput
    create: XOR<ComplaintCreateWithoutBookingInput, ComplaintUncheckedCreateWithoutBookingInput>
  }

  export type ComplaintCreateManyBookingInputEnvelope = {
    data: ComplaintCreateManyBookingInput | ComplaintCreateManyBookingInput[]
  }

  export type UserUpsertWithoutBookingsInput = {
    update: XOR<UserUpdateWithoutBookingsInput, UserUncheckedUpdateWithoutBookingsInput>
    create: XOR<UserCreateWithoutBookingsInput, UserUncheckedCreateWithoutBookingsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutBookingsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutBookingsInput, UserUncheckedUpdateWithoutBookingsInput>
  }

  export type UserUpdateWithoutBookingsInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nationality?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    businessLicense?: NullableStringFieldUpdateOperationsInput | string | null
    markupType?: NullableStringFieldUpdateOperationsInput | string | null
    markupValue?: NullableFloatFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: InputJsonValue | InputJsonValue | null
    createdProducts?: ProductUpdateManyWithoutCreatedByNestedInput
    b2bAccounts?: B2BAccountUpdateManyWithoutUserNestedInput
    managedUsers?: UserUpdateManyWithoutAccountManagerNestedInput
    accountManager?: UserUpdateOneWithoutManagedUsersNestedInput
    billingRecords?: BillingRecordUpdateManyWithoutUserNestedInput
    complaints?: ComplaintUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutBookingsInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nationality?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    businessLicense?: NullableStringFieldUpdateOperationsInput | string | null
    markupType?: NullableStringFieldUpdateOperationsInput | string | null
    markupValue?: NullableFloatFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: InputJsonValue | InputJsonValue | null
    accountManagerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdProducts?: ProductUncheckedUpdateManyWithoutCreatedByNestedInput
    b2bAccounts?: B2BAccountUncheckedUpdateManyWithoutUserNestedInput
    managedUsers?: UserUncheckedUpdateManyWithoutAccountManagerNestedInput
    billingRecords?: BillingRecordUncheckedUpdateManyWithoutUserNestedInput
    complaints?: ComplaintUncheckedUpdateManyWithoutUserNestedInput
  }

  export type B2BAccountUpsertWithoutBookingsInput = {
    update: XOR<B2BAccountUpdateWithoutBookingsInput, B2BAccountUncheckedUpdateWithoutBookingsInput>
    create: XOR<B2BAccountCreateWithoutBookingsInput, B2BAccountUncheckedCreateWithoutBookingsInput>
    where?: B2BAccountWhereInput
  }

  export type B2BAccountUpdateToOneWithWhereWithoutBookingsInput = {
    where?: B2BAccountWhereInput
    data: XOR<B2BAccountUpdateWithoutBookingsInput, B2BAccountUncheckedUpdateWithoutBookingsInput>
  }

  export type B2BAccountUpdateWithoutBookingsInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    defaultMarkup?: FloatFieldUpdateOperationsInput | number
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutB2bAccountsNestedInput
    markupRules?: MarkupRuleUpdateManyWithoutB2bAccountNestedInput
  }

  export type B2BAccountUncheckedUpdateWithoutBookingsInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    defaultMarkup?: FloatFieldUpdateOperationsInput | number
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    markupRules?: MarkupRuleUncheckedUpdateManyWithoutB2bAccountNestedInput
  }

  export type BookingItemUpsertWithWhereUniqueWithoutBookingInput = {
    where: BookingItemWhereUniqueInput
    update: XOR<BookingItemUpdateWithoutBookingInput, BookingItemUncheckedUpdateWithoutBookingInput>
    create: XOR<BookingItemCreateWithoutBookingInput, BookingItemUncheckedCreateWithoutBookingInput>
  }

  export type BookingItemUpdateWithWhereUniqueWithoutBookingInput = {
    where: BookingItemWhereUniqueInput
    data: XOR<BookingItemUpdateWithoutBookingInput, BookingItemUncheckedUpdateWithoutBookingInput>
  }

  export type BookingItemUpdateManyWithWhereWithoutBookingInput = {
    where: BookingItemScalarWhereInput
    data: XOR<BookingItemUpdateManyMutationInput, BookingItemUncheckedUpdateManyWithoutBookingInput>
  }

  export type PaymentTransactionUpsertWithWhereUniqueWithoutBookingInput = {
    where: PaymentTransactionWhereUniqueInput
    update: XOR<PaymentTransactionUpdateWithoutBookingInput, PaymentTransactionUncheckedUpdateWithoutBookingInput>
    create: XOR<PaymentTransactionCreateWithoutBookingInput, PaymentTransactionUncheckedCreateWithoutBookingInput>
  }

  export type PaymentTransactionUpdateWithWhereUniqueWithoutBookingInput = {
    where: PaymentTransactionWhereUniqueInput
    data: XOR<PaymentTransactionUpdateWithoutBookingInput, PaymentTransactionUncheckedUpdateWithoutBookingInput>
  }

  export type PaymentTransactionUpdateManyWithWhereWithoutBookingInput = {
    where: PaymentTransactionScalarWhereInput
    data: XOR<PaymentTransactionUpdateManyMutationInput, PaymentTransactionUncheckedUpdateManyWithoutBookingInput>
  }

  export type PaymentTransactionScalarWhereInput = {
    AND?: PaymentTransactionScalarWhereInput | PaymentTransactionScalarWhereInput[]
    OR?: PaymentTransactionScalarWhereInput[]
    NOT?: PaymentTransactionScalarWhereInput | PaymentTransactionScalarWhereInput[]
    id?: StringFilter<"PaymentTransaction"> | string
    bookingId?: StringFilter<"PaymentTransaction"> | string
    paymentIntentId?: StringFilter<"PaymentTransaction"> | string
    amount?: FloatFilter<"PaymentTransaction"> | number
    currency?: EnumCurrencyFilter<"PaymentTransaction"> | $Enums.Currency
    status?: EnumPaymentStatusFilter<"PaymentTransaction"> | $Enums.PaymentStatus
    gatewayResponse?: JsonNullableFilter<"PaymentTransaction">
    createdAt?: DateTimeFilter<"PaymentTransaction"> | Date | string
    updatedAt?: DateTimeFilter<"PaymentTransaction"> | Date | string
  }

  export type BillingRecordUpsertWithWhereUniqueWithoutBookingInput = {
    where: BillingRecordWhereUniqueInput
    update: XOR<BillingRecordUpdateWithoutBookingInput, BillingRecordUncheckedUpdateWithoutBookingInput>
    create: XOR<BillingRecordCreateWithoutBookingInput, BillingRecordUncheckedCreateWithoutBookingInput>
  }

  export type BillingRecordUpdateWithWhereUniqueWithoutBookingInput = {
    where: BillingRecordWhereUniqueInput
    data: XOR<BillingRecordUpdateWithoutBookingInput, BillingRecordUncheckedUpdateWithoutBookingInput>
  }

  export type BillingRecordUpdateManyWithWhereWithoutBookingInput = {
    where: BillingRecordScalarWhereInput
    data: XOR<BillingRecordUpdateManyMutationInput, BillingRecordUncheckedUpdateManyWithoutBookingInput>
  }

  export type ComplaintUpsertWithWhereUniqueWithoutBookingInput = {
    where: ComplaintWhereUniqueInput
    update: XOR<ComplaintUpdateWithoutBookingInput, ComplaintUncheckedUpdateWithoutBookingInput>
    create: XOR<ComplaintCreateWithoutBookingInput, ComplaintUncheckedCreateWithoutBookingInput>
  }

  export type ComplaintUpdateWithWhereUniqueWithoutBookingInput = {
    where: ComplaintWhereUniqueInput
    data: XOR<ComplaintUpdateWithoutBookingInput, ComplaintUncheckedUpdateWithoutBookingInput>
  }

  export type ComplaintUpdateManyWithWhereWithoutBookingInput = {
    where: ComplaintScalarWhereInput
    data: XOR<ComplaintUpdateManyMutationInput, ComplaintUncheckedUpdateManyWithoutBookingInput>
  }

  export type BookingCreateWithoutItemsInput = {
    id?: string
    reference: string
    status?: $Enums.BookingStatus
    paymentMethod?: $Enums.PaymentMethod | null
    paymentStatus?: $Enums.PaymentStatus
    paymentIntentId?: string | null
    paymentGateway?: string | null
    gatewayReference?: string | null
    currency?: $Enums.Currency
    totalNet: number
    totalMarkup: number
    totalGross: number
    supplierRef?: string | null
    voucherUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    passengerCount?: number
    leadPassenger?: InputJsonValue | null
    externalBookingId?: string | null
    apiResponse?: InputJsonValue | null
    apiCalledAt?: Date | string | null
    syncedAt?: Date | string | null
    user?: UserCreateNestedOneWithoutBookingsInput
    b2bAccount?: B2BAccountCreateNestedOneWithoutBookingsInput
    paymentTransactions?: PaymentTransactionCreateNestedManyWithoutBookingInput
    billingRecords?: BillingRecordCreateNestedManyWithoutBookingInput
    complaints?: ComplaintCreateNestedManyWithoutBookingInput
  }

  export type BookingUncheckedCreateWithoutItemsInput = {
    id?: string
    reference: string
    userId?: string | null
    b2bAccountId?: string | null
    status?: $Enums.BookingStatus
    paymentMethod?: $Enums.PaymentMethod | null
    paymentStatus?: $Enums.PaymentStatus
    paymentIntentId?: string | null
    paymentGateway?: string | null
    gatewayReference?: string | null
    currency?: $Enums.Currency
    totalNet: number
    totalMarkup: number
    totalGross: number
    supplierRef?: string | null
    voucherUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    passengerCount?: number
    leadPassenger?: InputJsonValue | null
    externalBookingId?: string | null
    apiResponse?: InputJsonValue | null
    apiCalledAt?: Date | string | null
    syncedAt?: Date | string | null
    paymentTransactions?: PaymentTransactionUncheckedCreateNestedManyWithoutBookingInput
    billingRecords?: BillingRecordUncheckedCreateNestedManyWithoutBookingInput
    complaints?: ComplaintUncheckedCreateNestedManyWithoutBookingInput
  }

  export type BookingCreateOrConnectWithoutItemsInput = {
    where: BookingWhereUniqueInput
    create: XOR<BookingCreateWithoutItemsInput, BookingUncheckedCreateWithoutItemsInput>
  }

  export type ProductCreateWithoutBookingItemsInput = {
    id?: string
    name: string
    slug: string
    type: $Enums.ProductType
    shortDesc?: string | null
    longDesc?: string | null
    baseCurrency?: $Enums.Currency
    basePrice: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    externalIds?: InputJsonValue | null
    images?: ProductImageCreateNestedManyWithoutProductInput
    category: CategoryCreateNestedOneWithoutProductsInput
    createdBy?: UserCreateNestedOneWithoutCreatedProductsInput
    markupRules?: MarkupRuleCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutBookingItemsInput = {
    id?: string
    name: string
    slug: string
    type: $Enums.ProductType
    shortDesc?: string | null
    longDesc?: string | null
    baseCurrency?: $Enums.Currency
    basePrice: number
    isActive?: boolean
    categoryId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    externalIds?: InputJsonValue | null
    images?: ProductImageUncheckedCreateNestedManyWithoutProductInput
    markupRules?: MarkupRuleUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutBookingItemsInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutBookingItemsInput, ProductUncheckedCreateWithoutBookingItemsInput>
  }

  export type BookingUpsertWithoutItemsInput = {
    update: XOR<BookingUpdateWithoutItemsInput, BookingUncheckedUpdateWithoutItemsInput>
    create: XOR<BookingCreateWithoutItemsInput, BookingUncheckedCreateWithoutItemsInput>
    where?: BookingWhereInput
  }

  export type BookingUpdateToOneWithWhereWithoutItemsInput = {
    where?: BookingWhereInput
    data: XOR<BookingUpdateWithoutItemsInput, BookingUncheckedUpdateWithoutItemsInput>
  }

  export type BookingUpdateWithoutItemsInput = {
    reference?: StringFieldUpdateOperationsInput | string
    status?: EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus
    paymentMethod?: NullableEnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod | null
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    paymentIntentId?: NullableStringFieldUpdateOperationsInput | string | null
    paymentGateway?: NullableStringFieldUpdateOperationsInput | string | null
    gatewayReference?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    totalNet?: FloatFieldUpdateOperationsInput | number
    totalMarkup?: FloatFieldUpdateOperationsInput | number
    totalGross?: FloatFieldUpdateOperationsInput | number
    supplierRef?: NullableStringFieldUpdateOperationsInput | string | null
    voucherUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passengerCount?: IntFieldUpdateOperationsInput | number
    leadPassenger?: InputJsonValue | InputJsonValue | null
    externalBookingId?: NullableStringFieldUpdateOperationsInput | string | null
    apiResponse?: InputJsonValue | InputJsonValue | null
    apiCalledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneWithoutBookingsNestedInput
    b2bAccount?: B2BAccountUpdateOneWithoutBookingsNestedInput
    paymentTransactions?: PaymentTransactionUpdateManyWithoutBookingNestedInput
    billingRecords?: BillingRecordUpdateManyWithoutBookingNestedInput
    complaints?: ComplaintUpdateManyWithoutBookingNestedInput
  }

  export type BookingUncheckedUpdateWithoutItemsInput = {
    reference?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    b2bAccountId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus
    paymentMethod?: NullableEnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod | null
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    paymentIntentId?: NullableStringFieldUpdateOperationsInput | string | null
    paymentGateway?: NullableStringFieldUpdateOperationsInput | string | null
    gatewayReference?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    totalNet?: FloatFieldUpdateOperationsInput | number
    totalMarkup?: FloatFieldUpdateOperationsInput | number
    totalGross?: FloatFieldUpdateOperationsInput | number
    supplierRef?: NullableStringFieldUpdateOperationsInput | string | null
    voucherUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passengerCount?: IntFieldUpdateOperationsInput | number
    leadPassenger?: InputJsonValue | InputJsonValue | null
    externalBookingId?: NullableStringFieldUpdateOperationsInput | string | null
    apiResponse?: InputJsonValue | InputJsonValue | null
    apiCalledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    paymentTransactions?: PaymentTransactionUncheckedUpdateManyWithoutBookingNestedInput
    billingRecords?: BillingRecordUncheckedUpdateManyWithoutBookingNestedInput
    complaints?: ComplaintUncheckedUpdateManyWithoutBookingNestedInput
  }

  export type ProductUpsertWithoutBookingItemsInput = {
    update: XOR<ProductUpdateWithoutBookingItemsInput, ProductUncheckedUpdateWithoutBookingItemsInput>
    create: XOR<ProductCreateWithoutBookingItemsInput, ProductUncheckedCreateWithoutBookingItemsInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutBookingItemsInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutBookingItemsInput, ProductUncheckedUpdateWithoutBookingItemsInput>
  }

  export type ProductUpdateWithoutBookingItemsInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    type?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    longDesc?: NullableStringFieldUpdateOperationsInput | string | null
    baseCurrency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    basePrice?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    externalIds?: InputJsonValue | InputJsonValue | null
    images?: ProductImageUpdateManyWithoutProductNestedInput
    category?: CategoryUpdateOneRequiredWithoutProductsNestedInput
    createdBy?: UserUpdateOneWithoutCreatedProductsNestedInput
    markupRules?: MarkupRuleUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutBookingItemsInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    type?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    longDesc?: NullableStringFieldUpdateOperationsInput | string | null
    baseCurrency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    basePrice?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    categoryId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    externalIds?: InputJsonValue | InputJsonValue | null
    images?: ProductImageUncheckedUpdateManyWithoutProductNestedInput
    markupRules?: MarkupRuleUncheckedUpdateManyWithoutProductNestedInput
  }

  export type BookingCreateWithoutPaymentTransactionsInput = {
    id?: string
    reference: string
    status?: $Enums.BookingStatus
    paymentMethod?: $Enums.PaymentMethod | null
    paymentStatus?: $Enums.PaymentStatus
    paymentIntentId?: string | null
    paymentGateway?: string | null
    gatewayReference?: string | null
    currency?: $Enums.Currency
    totalNet: number
    totalMarkup: number
    totalGross: number
    supplierRef?: string | null
    voucherUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    passengerCount?: number
    leadPassenger?: InputJsonValue | null
    externalBookingId?: string | null
    apiResponse?: InputJsonValue | null
    apiCalledAt?: Date | string | null
    syncedAt?: Date | string | null
    user?: UserCreateNestedOneWithoutBookingsInput
    b2bAccount?: B2BAccountCreateNestedOneWithoutBookingsInput
    items?: BookingItemCreateNestedManyWithoutBookingInput
    billingRecords?: BillingRecordCreateNestedManyWithoutBookingInput
    complaints?: ComplaintCreateNestedManyWithoutBookingInput
  }

  export type BookingUncheckedCreateWithoutPaymentTransactionsInput = {
    id?: string
    reference: string
    userId?: string | null
    b2bAccountId?: string | null
    status?: $Enums.BookingStatus
    paymentMethod?: $Enums.PaymentMethod | null
    paymentStatus?: $Enums.PaymentStatus
    paymentIntentId?: string | null
    paymentGateway?: string | null
    gatewayReference?: string | null
    currency?: $Enums.Currency
    totalNet: number
    totalMarkup: number
    totalGross: number
    supplierRef?: string | null
    voucherUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    passengerCount?: number
    leadPassenger?: InputJsonValue | null
    externalBookingId?: string | null
    apiResponse?: InputJsonValue | null
    apiCalledAt?: Date | string | null
    syncedAt?: Date | string | null
    items?: BookingItemUncheckedCreateNestedManyWithoutBookingInput
    billingRecords?: BillingRecordUncheckedCreateNestedManyWithoutBookingInput
    complaints?: ComplaintUncheckedCreateNestedManyWithoutBookingInput
  }

  export type BookingCreateOrConnectWithoutPaymentTransactionsInput = {
    where: BookingWhereUniqueInput
    create: XOR<BookingCreateWithoutPaymentTransactionsInput, BookingUncheckedCreateWithoutPaymentTransactionsInput>
  }

  export type BookingUpsertWithoutPaymentTransactionsInput = {
    update: XOR<BookingUpdateWithoutPaymentTransactionsInput, BookingUncheckedUpdateWithoutPaymentTransactionsInput>
    create: XOR<BookingCreateWithoutPaymentTransactionsInput, BookingUncheckedCreateWithoutPaymentTransactionsInput>
    where?: BookingWhereInput
  }

  export type BookingUpdateToOneWithWhereWithoutPaymentTransactionsInput = {
    where?: BookingWhereInput
    data: XOR<BookingUpdateWithoutPaymentTransactionsInput, BookingUncheckedUpdateWithoutPaymentTransactionsInput>
  }

  export type BookingUpdateWithoutPaymentTransactionsInput = {
    reference?: StringFieldUpdateOperationsInput | string
    status?: EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus
    paymentMethod?: NullableEnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod | null
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    paymentIntentId?: NullableStringFieldUpdateOperationsInput | string | null
    paymentGateway?: NullableStringFieldUpdateOperationsInput | string | null
    gatewayReference?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    totalNet?: FloatFieldUpdateOperationsInput | number
    totalMarkup?: FloatFieldUpdateOperationsInput | number
    totalGross?: FloatFieldUpdateOperationsInput | number
    supplierRef?: NullableStringFieldUpdateOperationsInput | string | null
    voucherUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passengerCount?: IntFieldUpdateOperationsInput | number
    leadPassenger?: InputJsonValue | InputJsonValue | null
    externalBookingId?: NullableStringFieldUpdateOperationsInput | string | null
    apiResponse?: InputJsonValue | InputJsonValue | null
    apiCalledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneWithoutBookingsNestedInput
    b2bAccount?: B2BAccountUpdateOneWithoutBookingsNestedInput
    items?: BookingItemUpdateManyWithoutBookingNestedInput
    billingRecords?: BillingRecordUpdateManyWithoutBookingNestedInput
    complaints?: ComplaintUpdateManyWithoutBookingNestedInput
  }

  export type BookingUncheckedUpdateWithoutPaymentTransactionsInput = {
    reference?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    b2bAccountId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus
    paymentMethod?: NullableEnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod | null
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    paymentIntentId?: NullableStringFieldUpdateOperationsInput | string | null
    paymentGateway?: NullableStringFieldUpdateOperationsInput | string | null
    gatewayReference?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    totalNet?: FloatFieldUpdateOperationsInput | number
    totalMarkup?: FloatFieldUpdateOperationsInput | number
    totalGross?: FloatFieldUpdateOperationsInput | number
    supplierRef?: NullableStringFieldUpdateOperationsInput | string | null
    voucherUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passengerCount?: IntFieldUpdateOperationsInput | number
    leadPassenger?: InputJsonValue | InputJsonValue | null
    externalBookingId?: NullableStringFieldUpdateOperationsInput | string | null
    apiResponse?: InputJsonValue | InputJsonValue | null
    apiCalledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    items?: BookingItemUncheckedUpdateManyWithoutBookingNestedInput
    billingRecords?: BillingRecordUncheckedUpdateManyWithoutBookingNestedInput
    complaints?: ComplaintUncheckedUpdateManyWithoutBookingNestedInput
  }

  export type UserCreateWithoutBillingRecordsInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phoneNumber: string
    dateOfBirth?: Date | string | null
    nationality: string
    password: string
    role?: $Enums.Role
    preferredLanguage?: string
    companyName?: string | null
    businessLicense?: string | null
    markupType?: string | null
    markupValue?: number | null
    isActive?: boolean
    emailVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    metadata?: InputJsonValue | null
    bookings?: BookingCreateNestedManyWithoutUserInput
    createdProducts?: ProductCreateNestedManyWithoutCreatedByInput
    b2bAccounts?: B2BAccountCreateNestedManyWithoutUserInput
    managedUsers?: UserCreateNestedManyWithoutAccountManagerInput
    accountManager?: UserCreateNestedOneWithoutManagedUsersInput
    complaints?: ComplaintCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutBillingRecordsInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phoneNumber: string
    dateOfBirth?: Date | string | null
    nationality: string
    password: string
    role?: $Enums.Role
    preferredLanguage?: string
    companyName?: string | null
    businessLicense?: string | null
    markupType?: string | null
    markupValue?: number | null
    isActive?: boolean
    emailVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    metadata?: InputJsonValue | null
    accountManagerId?: string | null
    bookings?: BookingUncheckedCreateNestedManyWithoutUserInput
    createdProducts?: ProductUncheckedCreateNestedManyWithoutCreatedByInput
    b2bAccounts?: B2BAccountUncheckedCreateNestedManyWithoutUserInput
    managedUsers?: UserUncheckedCreateNestedManyWithoutAccountManagerInput
    complaints?: ComplaintUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutBillingRecordsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBillingRecordsInput, UserUncheckedCreateWithoutBillingRecordsInput>
  }

  export type BookingCreateWithoutBillingRecordsInput = {
    id?: string
    reference: string
    status?: $Enums.BookingStatus
    paymentMethod?: $Enums.PaymentMethod | null
    paymentStatus?: $Enums.PaymentStatus
    paymentIntentId?: string | null
    paymentGateway?: string | null
    gatewayReference?: string | null
    currency?: $Enums.Currency
    totalNet: number
    totalMarkup: number
    totalGross: number
    supplierRef?: string | null
    voucherUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    passengerCount?: number
    leadPassenger?: InputJsonValue | null
    externalBookingId?: string | null
    apiResponse?: InputJsonValue | null
    apiCalledAt?: Date | string | null
    syncedAt?: Date | string | null
    user?: UserCreateNestedOneWithoutBookingsInput
    b2bAccount?: B2BAccountCreateNestedOneWithoutBookingsInput
    items?: BookingItemCreateNestedManyWithoutBookingInput
    paymentTransactions?: PaymentTransactionCreateNestedManyWithoutBookingInput
    complaints?: ComplaintCreateNestedManyWithoutBookingInput
  }

  export type BookingUncheckedCreateWithoutBillingRecordsInput = {
    id?: string
    reference: string
    userId?: string | null
    b2bAccountId?: string | null
    status?: $Enums.BookingStatus
    paymentMethod?: $Enums.PaymentMethod | null
    paymentStatus?: $Enums.PaymentStatus
    paymentIntentId?: string | null
    paymentGateway?: string | null
    gatewayReference?: string | null
    currency?: $Enums.Currency
    totalNet: number
    totalMarkup: number
    totalGross: number
    supplierRef?: string | null
    voucherUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    passengerCount?: number
    leadPassenger?: InputJsonValue | null
    externalBookingId?: string | null
    apiResponse?: InputJsonValue | null
    apiCalledAt?: Date | string | null
    syncedAt?: Date | string | null
    items?: BookingItemUncheckedCreateNestedManyWithoutBookingInput
    paymentTransactions?: PaymentTransactionUncheckedCreateNestedManyWithoutBookingInput
    complaints?: ComplaintUncheckedCreateNestedManyWithoutBookingInput
  }

  export type BookingCreateOrConnectWithoutBillingRecordsInput = {
    where: BookingWhereUniqueInput
    create: XOR<BookingCreateWithoutBillingRecordsInput, BookingUncheckedCreateWithoutBillingRecordsInput>
  }

  export type UserUpsertWithoutBillingRecordsInput = {
    update: XOR<UserUpdateWithoutBillingRecordsInput, UserUncheckedUpdateWithoutBillingRecordsInput>
    create: XOR<UserCreateWithoutBillingRecordsInput, UserUncheckedCreateWithoutBillingRecordsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutBillingRecordsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutBillingRecordsInput, UserUncheckedUpdateWithoutBillingRecordsInput>
  }

  export type UserUpdateWithoutBillingRecordsInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nationality?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    businessLicense?: NullableStringFieldUpdateOperationsInput | string | null
    markupType?: NullableStringFieldUpdateOperationsInput | string | null
    markupValue?: NullableFloatFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: InputJsonValue | InputJsonValue | null
    bookings?: BookingUpdateManyWithoutUserNestedInput
    createdProducts?: ProductUpdateManyWithoutCreatedByNestedInput
    b2bAccounts?: B2BAccountUpdateManyWithoutUserNestedInput
    managedUsers?: UserUpdateManyWithoutAccountManagerNestedInput
    accountManager?: UserUpdateOneWithoutManagedUsersNestedInput
    complaints?: ComplaintUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutBillingRecordsInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nationality?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    businessLicense?: NullableStringFieldUpdateOperationsInput | string | null
    markupType?: NullableStringFieldUpdateOperationsInput | string | null
    markupValue?: NullableFloatFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: InputJsonValue | InputJsonValue | null
    accountManagerId?: NullableStringFieldUpdateOperationsInput | string | null
    bookings?: BookingUncheckedUpdateManyWithoutUserNestedInput
    createdProducts?: ProductUncheckedUpdateManyWithoutCreatedByNestedInput
    b2bAccounts?: B2BAccountUncheckedUpdateManyWithoutUserNestedInput
    managedUsers?: UserUncheckedUpdateManyWithoutAccountManagerNestedInput
    complaints?: ComplaintUncheckedUpdateManyWithoutUserNestedInput
  }

  export type BookingUpsertWithoutBillingRecordsInput = {
    update: XOR<BookingUpdateWithoutBillingRecordsInput, BookingUncheckedUpdateWithoutBillingRecordsInput>
    create: XOR<BookingCreateWithoutBillingRecordsInput, BookingUncheckedCreateWithoutBillingRecordsInput>
    where?: BookingWhereInput
  }

  export type BookingUpdateToOneWithWhereWithoutBillingRecordsInput = {
    where?: BookingWhereInput
    data: XOR<BookingUpdateWithoutBillingRecordsInput, BookingUncheckedUpdateWithoutBillingRecordsInput>
  }

  export type BookingUpdateWithoutBillingRecordsInput = {
    reference?: StringFieldUpdateOperationsInput | string
    status?: EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus
    paymentMethod?: NullableEnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod | null
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    paymentIntentId?: NullableStringFieldUpdateOperationsInput | string | null
    paymentGateway?: NullableStringFieldUpdateOperationsInput | string | null
    gatewayReference?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    totalNet?: FloatFieldUpdateOperationsInput | number
    totalMarkup?: FloatFieldUpdateOperationsInput | number
    totalGross?: FloatFieldUpdateOperationsInput | number
    supplierRef?: NullableStringFieldUpdateOperationsInput | string | null
    voucherUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passengerCount?: IntFieldUpdateOperationsInput | number
    leadPassenger?: InputJsonValue | InputJsonValue | null
    externalBookingId?: NullableStringFieldUpdateOperationsInput | string | null
    apiResponse?: InputJsonValue | InputJsonValue | null
    apiCalledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneWithoutBookingsNestedInput
    b2bAccount?: B2BAccountUpdateOneWithoutBookingsNestedInput
    items?: BookingItemUpdateManyWithoutBookingNestedInput
    paymentTransactions?: PaymentTransactionUpdateManyWithoutBookingNestedInput
    complaints?: ComplaintUpdateManyWithoutBookingNestedInput
  }

  export type BookingUncheckedUpdateWithoutBillingRecordsInput = {
    reference?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    b2bAccountId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus
    paymentMethod?: NullableEnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod | null
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    paymentIntentId?: NullableStringFieldUpdateOperationsInput | string | null
    paymentGateway?: NullableStringFieldUpdateOperationsInput | string | null
    gatewayReference?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    totalNet?: FloatFieldUpdateOperationsInput | number
    totalMarkup?: FloatFieldUpdateOperationsInput | number
    totalGross?: FloatFieldUpdateOperationsInput | number
    supplierRef?: NullableStringFieldUpdateOperationsInput | string | null
    voucherUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passengerCount?: IntFieldUpdateOperationsInput | number
    leadPassenger?: InputJsonValue | InputJsonValue | null
    externalBookingId?: NullableStringFieldUpdateOperationsInput | string | null
    apiResponse?: InputJsonValue | InputJsonValue | null
    apiCalledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    items?: BookingItemUncheckedUpdateManyWithoutBookingNestedInput
    paymentTransactions?: PaymentTransactionUncheckedUpdateManyWithoutBookingNestedInput
    complaints?: ComplaintUncheckedUpdateManyWithoutBookingNestedInput
  }

  export type UserCreateWithoutComplaintsInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phoneNumber: string
    dateOfBirth?: Date | string | null
    nationality: string
    password: string
    role?: $Enums.Role
    preferredLanguage?: string
    companyName?: string | null
    businessLicense?: string | null
    markupType?: string | null
    markupValue?: number | null
    isActive?: boolean
    emailVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    metadata?: InputJsonValue | null
    bookings?: BookingCreateNestedManyWithoutUserInput
    createdProducts?: ProductCreateNestedManyWithoutCreatedByInput
    b2bAccounts?: B2BAccountCreateNestedManyWithoutUserInput
    managedUsers?: UserCreateNestedManyWithoutAccountManagerInput
    accountManager?: UserCreateNestedOneWithoutManagedUsersInput
    billingRecords?: BillingRecordCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutComplaintsInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phoneNumber: string
    dateOfBirth?: Date | string | null
    nationality: string
    password: string
    role?: $Enums.Role
    preferredLanguage?: string
    companyName?: string | null
    businessLicense?: string | null
    markupType?: string | null
    markupValue?: number | null
    isActive?: boolean
    emailVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    metadata?: InputJsonValue | null
    accountManagerId?: string | null
    bookings?: BookingUncheckedCreateNestedManyWithoutUserInput
    createdProducts?: ProductUncheckedCreateNestedManyWithoutCreatedByInput
    b2bAccounts?: B2BAccountUncheckedCreateNestedManyWithoutUserInput
    managedUsers?: UserUncheckedCreateNestedManyWithoutAccountManagerInput
    billingRecords?: BillingRecordUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutComplaintsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutComplaintsInput, UserUncheckedCreateWithoutComplaintsInput>
  }

  export type BookingCreateWithoutComplaintsInput = {
    id?: string
    reference: string
    status?: $Enums.BookingStatus
    paymentMethod?: $Enums.PaymentMethod | null
    paymentStatus?: $Enums.PaymentStatus
    paymentIntentId?: string | null
    paymentGateway?: string | null
    gatewayReference?: string | null
    currency?: $Enums.Currency
    totalNet: number
    totalMarkup: number
    totalGross: number
    supplierRef?: string | null
    voucherUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    passengerCount?: number
    leadPassenger?: InputJsonValue | null
    externalBookingId?: string | null
    apiResponse?: InputJsonValue | null
    apiCalledAt?: Date | string | null
    syncedAt?: Date | string | null
    user?: UserCreateNestedOneWithoutBookingsInput
    b2bAccount?: B2BAccountCreateNestedOneWithoutBookingsInput
    items?: BookingItemCreateNestedManyWithoutBookingInput
    paymentTransactions?: PaymentTransactionCreateNestedManyWithoutBookingInput
    billingRecords?: BillingRecordCreateNestedManyWithoutBookingInput
  }

  export type BookingUncheckedCreateWithoutComplaintsInput = {
    id?: string
    reference: string
    userId?: string | null
    b2bAccountId?: string | null
    status?: $Enums.BookingStatus
    paymentMethod?: $Enums.PaymentMethod | null
    paymentStatus?: $Enums.PaymentStatus
    paymentIntentId?: string | null
    paymentGateway?: string | null
    gatewayReference?: string | null
    currency?: $Enums.Currency
    totalNet: number
    totalMarkup: number
    totalGross: number
    supplierRef?: string | null
    voucherUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    passengerCount?: number
    leadPassenger?: InputJsonValue | null
    externalBookingId?: string | null
    apiResponse?: InputJsonValue | null
    apiCalledAt?: Date | string | null
    syncedAt?: Date | string | null
    items?: BookingItemUncheckedCreateNestedManyWithoutBookingInput
    paymentTransactions?: PaymentTransactionUncheckedCreateNestedManyWithoutBookingInput
    billingRecords?: BillingRecordUncheckedCreateNestedManyWithoutBookingInput
  }

  export type BookingCreateOrConnectWithoutComplaintsInput = {
    where: BookingWhereUniqueInput
    create: XOR<BookingCreateWithoutComplaintsInput, BookingUncheckedCreateWithoutComplaintsInput>
  }

  export type ComplaintMessageCreateWithoutComplaintInput = {
    id?: string
    senderType: string
    senderId: string
    message: string
    attachments?: InputJsonValue | null
    isRead?: boolean
    createdAt?: Date | string
  }

  export type ComplaintMessageUncheckedCreateWithoutComplaintInput = {
    id?: string
    senderType: string
    senderId: string
    message: string
    attachments?: InputJsonValue | null
    isRead?: boolean
    createdAt?: Date | string
  }

  export type ComplaintMessageCreateOrConnectWithoutComplaintInput = {
    where: ComplaintMessageWhereUniqueInput
    create: XOR<ComplaintMessageCreateWithoutComplaintInput, ComplaintMessageUncheckedCreateWithoutComplaintInput>
  }

  export type ComplaintMessageCreateManyComplaintInputEnvelope = {
    data: ComplaintMessageCreateManyComplaintInput | ComplaintMessageCreateManyComplaintInput[]
  }

  export type UserUpsertWithoutComplaintsInput = {
    update: XOR<UserUpdateWithoutComplaintsInput, UserUncheckedUpdateWithoutComplaintsInput>
    create: XOR<UserCreateWithoutComplaintsInput, UserUncheckedCreateWithoutComplaintsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutComplaintsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutComplaintsInput, UserUncheckedUpdateWithoutComplaintsInput>
  }

  export type UserUpdateWithoutComplaintsInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nationality?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    businessLicense?: NullableStringFieldUpdateOperationsInput | string | null
    markupType?: NullableStringFieldUpdateOperationsInput | string | null
    markupValue?: NullableFloatFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: InputJsonValue | InputJsonValue | null
    bookings?: BookingUpdateManyWithoutUserNestedInput
    createdProducts?: ProductUpdateManyWithoutCreatedByNestedInput
    b2bAccounts?: B2BAccountUpdateManyWithoutUserNestedInput
    managedUsers?: UserUpdateManyWithoutAccountManagerNestedInput
    accountManager?: UserUpdateOneWithoutManagedUsersNestedInput
    billingRecords?: BillingRecordUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutComplaintsInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nationality?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    businessLicense?: NullableStringFieldUpdateOperationsInput | string | null
    markupType?: NullableStringFieldUpdateOperationsInput | string | null
    markupValue?: NullableFloatFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: InputJsonValue | InputJsonValue | null
    accountManagerId?: NullableStringFieldUpdateOperationsInput | string | null
    bookings?: BookingUncheckedUpdateManyWithoutUserNestedInput
    createdProducts?: ProductUncheckedUpdateManyWithoutCreatedByNestedInput
    b2bAccounts?: B2BAccountUncheckedUpdateManyWithoutUserNestedInput
    managedUsers?: UserUncheckedUpdateManyWithoutAccountManagerNestedInput
    billingRecords?: BillingRecordUncheckedUpdateManyWithoutUserNestedInput
  }

  export type BookingUpsertWithoutComplaintsInput = {
    update: XOR<BookingUpdateWithoutComplaintsInput, BookingUncheckedUpdateWithoutComplaintsInput>
    create: XOR<BookingCreateWithoutComplaintsInput, BookingUncheckedCreateWithoutComplaintsInput>
    where?: BookingWhereInput
  }

  export type BookingUpdateToOneWithWhereWithoutComplaintsInput = {
    where?: BookingWhereInput
    data: XOR<BookingUpdateWithoutComplaintsInput, BookingUncheckedUpdateWithoutComplaintsInput>
  }

  export type BookingUpdateWithoutComplaintsInput = {
    reference?: StringFieldUpdateOperationsInput | string
    status?: EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus
    paymentMethod?: NullableEnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod | null
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    paymentIntentId?: NullableStringFieldUpdateOperationsInput | string | null
    paymentGateway?: NullableStringFieldUpdateOperationsInput | string | null
    gatewayReference?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    totalNet?: FloatFieldUpdateOperationsInput | number
    totalMarkup?: FloatFieldUpdateOperationsInput | number
    totalGross?: FloatFieldUpdateOperationsInput | number
    supplierRef?: NullableStringFieldUpdateOperationsInput | string | null
    voucherUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passengerCount?: IntFieldUpdateOperationsInput | number
    leadPassenger?: InputJsonValue | InputJsonValue | null
    externalBookingId?: NullableStringFieldUpdateOperationsInput | string | null
    apiResponse?: InputJsonValue | InputJsonValue | null
    apiCalledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneWithoutBookingsNestedInput
    b2bAccount?: B2BAccountUpdateOneWithoutBookingsNestedInput
    items?: BookingItemUpdateManyWithoutBookingNestedInput
    paymentTransactions?: PaymentTransactionUpdateManyWithoutBookingNestedInput
    billingRecords?: BillingRecordUpdateManyWithoutBookingNestedInput
  }

  export type BookingUncheckedUpdateWithoutComplaintsInput = {
    reference?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    b2bAccountId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus
    paymentMethod?: NullableEnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod | null
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    paymentIntentId?: NullableStringFieldUpdateOperationsInput | string | null
    paymentGateway?: NullableStringFieldUpdateOperationsInput | string | null
    gatewayReference?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    totalNet?: FloatFieldUpdateOperationsInput | number
    totalMarkup?: FloatFieldUpdateOperationsInput | number
    totalGross?: FloatFieldUpdateOperationsInput | number
    supplierRef?: NullableStringFieldUpdateOperationsInput | string | null
    voucherUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passengerCount?: IntFieldUpdateOperationsInput | number
    leadPassenger?: InputJsonValue | InputJsonValue | null
    externalBookingId?: NullableStringFieldUpdateOperationsInput | string | null
    apiResponse?: InputJsonValue | InputJsonValue | null
    apiCalledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    items?: BookingItemUncheckedUpdateManyWithoutBookingNestedInput
    paymentTransactions?: PaymentTransactionUncheckedUpdateManyWithoutBookingNestedInput
    billingRecords?: BillingRecordUncheckedUpdateManyWithoutBookingNestedInput
  }

  export type ComplaintMessageUpsertWithWhereUniqueWithoutComplaintInput = {
    where: ComplaintMessageWhereUniqueInput
    update: XOR<ComplaintMessageUpdateWithoutComplaintInput, ComplaintMessageUncheckedUpdateWithoutComplaintInput>
    create: XOR<ComplaintMessageCreateWithoutComplaintInput, ComplaintMessageUncheckedCreateWithoutComplaintInput>
  }

  export type ComplaintMessageUpdateWithWhereUniqueWithoutComplaintInput = {
    where: ComplaintMessageWhereUniqueInput
    data: XOR<ComplaintMessageUpdateWithoutComplaintInput, ComplaintMessageUncheckedUpdateWithoutComplaintInput>
  }

  export type ComplaintMessageUpdateManyWithWhereWithoutComplaintInput = {
    where: ComplaintMessageScalarWhereInput
    data: XOR<ComplaintMessageUpdateManyMutationInput, ComplaintMessageUncheckedUpdateManyWithoutComplaintInput>
  }

  export type ComplaintMessageScalarWhereInput = {
    AND?: ComplaintMessageScalarWhereInput | ComplaintMessageScalarWhereInput[]
    OR?: ComplaintMessageScalarWhereInput[]
    NOT?: ComplaintMessageScalarWhereInput | ComplaintMessageScalarWhereInput[]
    id?: StringFilter<"ComplaintMessage"> | string
    complaintId?: StringFilter<"ComplaintMessage"> | string
    senderType?: StringFilter<"ComplaintMessage"> | string
    senderId?: StringFilter<"ComplaintMessage"> | string
    message?: StringFilter<"ComplaintMessage"> | string
    attachments?: JsonNullableFilter<"ComplaintMessage">
    isRead?: BoolFilter<"ComplaintMessage"> | boolean
    createdAt?: DateTimeFilter<"ComplaintMessage"> | Date | string
  }

  export type ComplaintCreateWithoutMessagesInput = {
    id?: string
    subject: string
    category: $Enums.ComplaintCategory
    priority?: $Enums.ComplaintPriority
    status?: $Enums.ComplaintStatus
    tourId?: string | null
    tourName?: string | null
    description: string
    expectedOutcome?: string | null
    refundAmount?: number | null
    contactEmail: string
    contactPhone: string
    preferredContactMethod?: string | null
    attachments?: InputJsonValue | null
    adminResponse?: string | null
    resolvedAt?: Date | string | null
    assignedTo?: string | null
    rating?: number | null
    ratingComment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutComplaintsInput
    booking?: BookingCreateNestedOneWithoutComplaintsInput
  }

  export type ComplaintUncheckedCreateWithoutMessagesInput = {
    id?: string
    userId: string
    subject: string
    category: $Enums.ComplaintCategory
    priority?: $Enums.ComplaintPriority
    status?: $Enums.ComplaintStatus
    bookingId?: string | null
    tourId?: string | null
    tourName?: string | null
    description: string
    expectedOutcome?: string | null
    refundAmount?: number | null
    contactEmail: string
    contactPhone: string
    preferredContactMethod?: string | null
    attachments?: InputJsonValue | null
    adminResponse?: string | null
    resolvedAt?: Date | string | null
    assignedTo?: string | null
    rating?: number | null
    ratingComment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ComplaintCreateOrConnectWithoutMessagesInput = {
    where: ComplaintWhereUniqueInput
    create: XOR<ComplaintCreateWithoutMessagesInput, ComplaintUncheckedCreateWithoutMessagesInput>
  }

  export type ComplaintUpsertWithoutMessagesInput = {
    update: XOR<ComplaintUpdateWithoutMessagesInput, ComplaintUncheckedUpdateWithoutMessagesInput>
    create: XOR<ComplaintCreateWithoutMessagesInput, ComplaintUncheckedCreateWithoutMessagesInput>
    where?: ComplaintWhereInput
  }

  export type ComplaintUpdateToOneWithWhereWithoutMessagesInput = {
    where?: ComplaintWhereInput
    data: XOR<ComplaintUpdateWithoutMessagesInput, ComplaintUncheckedUpdateWithoutMessagesInput>
  }

  export type ComplaintUpdateWithoutMessagesInput = {
    subject?: StringFieldUpdateOperationsInput | string
    category?: EnumComplaintCategoryFieldUpdateOperationsInput | $Enums.ComplaintCategory
    priority?: EnumComplaintPriorityFieldUpdateOperationsInput | $Enums.ComplaintPriority
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    tourId?: NullableStringFieldUpdateOperationsInput | string | null
    tourName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    expectedOutcome?: NullableStringFieldUpdateOperationsInput | string | null
    refundAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    contactEmail?: StringFieldUpdateOperationsInput | string
    contactPhone?: StringFieldUpdateOperationsInput | string
    preferredContactMethod?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: InputJsonValue | InputJsonValue | null
    adminResponse?: NullableStringFieldUpdateOperationsInput | string | null
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedTo?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    ratingComment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutComplaintsNestedInput
    booking?: BookingUpdateOneWithoutComplaintsNestedInput
  }

  export type ComplaintUncheckedUpdateWithoutMessagesInput = {
    userId?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    category?: EnumComplaintCategoryFieldUpdateOperationsInput | $Enums.ComplaintCategory
    priority?: EnumComplaintPriorityFieldUpdateOperationsInput | $Enums.ComplaintPriority
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    bookingId?: NullableStringFieldUpdateOperationsInput | string | null
    tourId?: NullableStringFieldUpdateOperationsInput | string | null
    tourName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    expectedOutcome?: NullableStringFieldUpdateOperationsInput | string | null
    refundAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    contactEmail?: StringFieldUpdateOperationsInput | string
    contactPhone?: StringFieldUpdateOperationsInput | string
    preferredContactMethod?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: InputJsonValue | InputJsonValue | null
    adminResponse?: NullableStringFieldUpdateOperationsInput | string | null
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedTo?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    ratingComment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BookingCreateManyUserInput = {
    id?: string
    reference: string
    b2bAccountId?: string | null
    status?: $Enums.BookingStatus
    paymentMethod?: $Enums.PaymentMethod | null
    paymentStatus?: $Enums.PaymentStatus
    paymentIntentId?: string | null
    paymentGateway?: string | null
    gatewayReference?: string | null
    currency?: $Enums.Currency
    totalNet: number
    totalMarkup: number
    totalGross: number
    supplierRef?: string | null
    voucherUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    passengerCount?: number
    leadPassenger?: InputJsonValue | null
    externalBookingId?: string | null
    apiResponse?: InputJsonValue | null
    apiCalledAt?: Date | string | null
    syncedAt?: Date | string | null
  }

  export type ProductCreateManyCreatedByInput = {
    id?: string
    name: string
    slug: string
    type: $Enums.ProductType
    shortDesc?: string | null
    longDesc?: string | null
    baseCurrency?: $Enums.Currency
    basePrice: number
    isActive?: boolean
    categoryId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    externalIds?: InputJsonValue | null
  }

  export type B2BAccountCreateManyUserInput = {
    id?: string
    name: string
    code: string
    defaultMarkup?: number
    currency?: $Enums.Currency
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCreateManyAccountManagerInput = {
    id?: string
    firstName: string
    lastName: string
    email: string
    phoneNumber: string
    dateOfBirth?: Date | string | null
    nationality: string
    password: string
    role?: $Enums.Role
    preferredLanguage?: string
    companyName?: string | null
    businessLicense?: string | null
    markupType?: string | null
    markupValue?: number | null
    isActive?: boolean
    emailVerified?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    metadata?: InputJsonValue | null
  }

  export type BillingRecordCreateManyUserInput = {
    id?: string
    bookingId: string
    planName?: string | null
    duration?: number | null
    price: number
    paymentSessionId?: string | null
    purchasedAt?: Date | string
  }

  export type ComplaintCreateManyUserInput = {
    id?: string
    subject: string
    category: $Enums.ComplaintCategory
    priority?: $Enums.ComplaintPriority
    status?: $Enums.ComplaintStatus
    bookingId?: string | null
    tourId?: string | null
    tourName?: string | null
    description: string
    expectedOutcome?: string | null
    refundAmount?: number | null
    contactEmail: string
    contactPhone: string
    preferredContactMethod?: string | null
    attachments?: InputJsonValue | null
    adminResponse?: string | null
    resolvedAt?: Date | string | null
    assignedTo?: string | null
    rating?: number | null
    ratingComment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookingUpdateWithoutUserInput = {
    reference?: StringFieldUpdateOperationsInput | string
    status?: EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus
    paymentMethod?: NullableEnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod | null
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    paymentIntentId?: NullableStringFieldUpdateOperationsInput | string | null
    paymentGateway?: NullableStringFieldUpdateOperationsInput | string | null
    gatewayReference?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    totalNet?: FloatFieldUpdateOperationsInput | number
    totalMarkup?: FloatFieldUpdateOperationsInput | number
    totalGross?: FloatFieldUpdateOperationsInput | number
    supplierRef?: NullableStringFieldUpdateOperationsInput | string | null
    voucherUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passengerCount?: IntFieldUpdateOperationsInput | number
    leadPassenger?: InputJsonValue | InputJsonValue | null
    externalBookingId?: NullableStringFieldUpdateOperationsInput | string | null
    apiResponse?: InputJsonValue | InputJsonValue | null
    apiCalledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    b2bAccount?: B2BAccountUpdateOneWithoutBookingsNestedInput
    items?: BookingItemUpdateManyWithoutBookingNestedInput
    paymentTransactions?: PaymentTransactionUpdateManyWithoutBookingNestedInput
    billingRecords?: BillingRecordUpdateManyWithoutBookingNestedInput
    complaints?: ComplaintUpdateManyWithoutBookingNestedInput
  }

  export type BookingUncheckedUpdateWithoutUserInput = {
    reference?: StringFieldUpdateOperationsInput | string
    b2bAccountId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus
    paymentMethod?: NullableEnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod | null
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    paymentIntentId?: NullableStringFieldUpdateOperationsInput | string | null
    paymentGateway?: NullableStringFieldUpdateOperationsInput | string | null
    gatewayReference?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    totalNet?: FloatFieldUpdateOperationsInput | number
    totalMarkup?: FloatFieldUpdateOperationsInput | number
    totalGross?: FloatFieldUpdateOperationsInput | number
    supplierRef?: NullableStringFieldUpdateOperationsInput | string | null
    voucherUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passengerCount?: IntFieldUpdateOperationsInput | number
    leadPassenger?: InputJsonValue | InputJsonValue | null
    externalBookingId?: NullableStringFieldUpdateOperationsInput | string | null
    apiResponse?: InputJsonValue | InputJsonValue | null
    apiCalledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    items?: BookingItemUncheckedUpdateManyWithoutBookingNestedInput
    paymentTransactions?: PaymentTransactionUncheckedUpdateManyWithoutBookingNestedInput
    billingRecords?: BillingRecordUncheckedUpdateManyWithoutBookingNestedInput
    complaints?: ComplaintUncheckedUpdateManyWithoutBookingNestedInput
  }

  export type BookingUncheckedUpdateManyWithoutUserInput = {
    reference?: StringFieldUpdateOperationsInput | string
    b2bAccountId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus
    paymentMethod?: NullableEnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod | null
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    paymentIntentId?: NullableStringFieldUpdateOperationsInput | string | null
    paymentGateway?: NullableStringFieldUpdateOperationsInput | string | null
    gatewayReference?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    totalNet?: FloatFieldUpdateOperationsInput | number
    totalMarkup?: FloatFieldUpdateOperationsInput | number
    totalGross?: FloatFieldUpdateOperationsInput | number
    supplierRef?: NullableStringFieldUpdateOperationsInput | string | null
    voucherUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passengerCount?: IntFieldUpdateOperationsInput | number
    leadPassenger?: InputJsonValue | InputJsonValue | null
    externalBookingId?: NullableStringFieldUpdateOperationsInput | string | null
    apiResponse?: InputJsonValue | InputJsonValue | null
    apiCalledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProductUpdateWithoutCreatedByInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    type?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    longDesc?: NullableStringFieldUpdateOperationsInput | string | null
    baseCurrency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    basePrice?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    externalIds?: InputJsonValue | InputJsonValue | null
    images?: ProductImageUpdateManyWithoutProductNestedInput
    category?: CategoryUpdateOneRequiredWithoutProductsNestedInput
    markupRules?: MarkupRuleUpdateManyWithoutProductNestedInput
    bookingItems?: BookingItemUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutCreatedByInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    type?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    longDesc?: NullableStringFieldUpdateOperationsInput | string | null
    baseCurrency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    basePrice?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    categoryId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    externalIds?: InputJsonValue | InputJsonValue | null
    images?: ProductImageUncheckedUpdateManyWithoutProductNestedInput
    markupRules?: MarkupRuleUncheckedUpdateManyWithoutProductNestedInput
    bookingItems?: BookingItemUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateManyWithoutCreatedByInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    type?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    longDesc?: NullableStringFieldUpdateOperationsInput | string | null
    baseCurrency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    basePrice?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    categoryId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    externalIds?: InputJsonValue | InputJsonValue | null
  }

  export type B2BAccountUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    defaultMarkup?: FloatFieldUpdateOperationsInput | number
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    markupRules?: MarkupRuleUpdateManyWithoutB2bAccountNestedInput
    bookings?: BookingUpdateManyWithoutB2bAccountNestedInput
  }

  export type B2BAccountUncheckedUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    defaultMarkup?: FloatFieldUpdateOperationsInput | number
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    markupRules?: MarkupRuleUncheckedUpdateManyWithoutB2bAccountNestedInput
    bookings?: BookingUncheckedUpdateManyWithoutB2bAccountNestedInput
  }

  export type B2BAccountUncheckedUpdateManyWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    defaultMarkup?: FloatFieldUpdateOperationsInput | number
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpdateWithoutAccountManagerInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nationality?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    businessLicense?: NullableStringFieldUpdateOperationsInput | string | null
    markupType?: NullableStringFieldUpdateOperationsInput | string | null
    markupValue?: NullableFloatFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: InputJsonValue | InputJsonValue | null
    bookings?: BookingUpdateManyWithoutUserNestedInput
    createdProducts?: ProductUpdateManyWithoutCreatedByNestedInput
    b2bAccounts?: B2BAccountUpdateManyWithoutUserNestedInput
    managedUsers?: UserUpdateManyWithoutAccountManagerNestedInput
    billingRecords?: BillingRecordUpdateManyWithoutUserNestedInput
    complaints?: ComplaintUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAccountManagerInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nationality?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    businessLicense?: NullableStringFieldUpdateOperationsInput | string | null
    markupType?: NullableStringFieldUpdateOperationsInput | string | null
    markupValue?: NullableFloatFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: InputJsonValue | InputJsonValue | null
    bookings?: BookingUncheckedUpdateManyWithoutUserNestedInput
    createdProducts?: ProductUncheckedUpdateManyWithoutCreatedByNestedInput
    b2bAccounts?: B2BAccountUncheckedUpdateManyWithoutUserNestedInput
    managedUsers?: UserUncheckedUpdateManyWithoutAccountManagerNestedInput
    billingRecords?: BillingRecordUncheckedUpdateManyWithoutUserNestedInput
    complaints?: ComplaintUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutAccountManagerInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    dateOfBirth?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    nationality?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    preferredLanguage?: StringFieldUpdateOperationsInput | string
    companyName?: NullableStringFieldUpdateOperationsInput | string | null
    businessLicense?: NullableStringFieldUpdateOperationsInput | string | null
    markupType?: NullableStringFieldUpdateOperationsInput | string | null
    markupValue?: NullableFloatFieldUpdateOperationsInput | number | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    metadata?: InputJsonValue | InputJsonValue | null
  }

  export type BillingRecordUpdateWithoutUserInput = {
    planName?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    price?: FloatFieldUpdateOperationsInput | number
    paymentSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    purchasedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    booking?: BookingUpdateOneRequiredWithoutBillingRecordsNestedInput
  }

  export type BillingRecordUncheckedUpdateWithoutUserInput = {
    bookingId?: StringFieldUpdateOperationsInput | string
    planName?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    price?: FloatFieldUpdateOperationsInput | number
    paymentSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    purchasedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BillingRecordUncheckedUpdateManyWithoutUserInput = {
    bookingId?: StringFieldUpdateOperationsInput | string
    planName?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    price?: FloatFieldUpdateOperationsInput | number
    paymentSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    purchasedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ComplaintUpdateWithoutUserInput = {
    subject?: StringFieldUpdateOperationsInput | string
    category?: EnumComplaintCategoryFieldUpdateOperationsInput | $Enums.ComplaintCategory
    priority?: EnumComplaintPriorityFieldUpdateOperationsInput | $Enums.ComplaintPriority
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    tourId?: NullableStringFieldUpdateOperationsInput | string | null
    tourName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    expectedOutcome?: NullableStringFieldUpdateOperationsInput | string | null
    refundAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    contactEmail?: StringFieldUpdateOperationsInput | string
    contactPhone?: StringFieldUpdateOperationsInput | string
    preferredContactMethod?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: InputJsonValue | InputJsonValue | null
    adminResponse?: NullableStringFieldUpdateOperationsInput | string | null
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedTo?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    ratingComment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    booking?: BookingUpdateOneWithoutComplaintsNestedInput
    messages?: ComplaintMessageUpdateManyWithoutComplaintNestedInput
  }

  export type ComplaintUncheckedUpdateWithoutUserInput = {
    subject?: StringFieldUpdateOperationsInput | string
    category?: EnumComplaintCategoryFieldUpdateOperationsInput | $Enums.ComplaintCategory
    priority?: EnumComplaintPriorityFieldUpdateOperationsInput | $Enums.ComplaintPriority
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    bookingId?: NullableStringFieldUpdateOperationsInput | string | null
    tourId?: NullableStringFieldUpdateOperationsInput | string | null
    tourName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    expectedOutcome?: NullableStringFieldUpdateOperationsInput | string | null
    refundAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    contactEmail?: StringFieldUpdateOperationsInput | string
    contactPhone?: StringFieldUpdateOperationsInput | string
    preferredContactMethod?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: InputJsonValue | InputJsonValue | null
    adminResponse?: NullableStringFieldUpdateOperationsInput | string | null
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedTo?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    ratingComment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: ComplaintMessageUncheckedUpdateManyWithoutComplaintNestedInput
  }

  export type ComplaintUncheckedUpdateManyWithoutUserInput = {
    subject?: StringFieldUpdateOperationsInput | string
    category?: EnumComplaintCategoryFieldUpdateOperationsInput | $Enums.ComplaintCategory
    priority?: EnumComplaintPriorityFieldUpdateOperationsInput | $Enums.ComplaintPriority
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    bookingId?: NullableStringFieldUpdateOperationsInput | string | null
    tourId?: NullableStringFieldUpdateOperationsInput | string | null
    tourName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    expectedOutcome?: NullableStringFieldUpdateOperationsInput | string | null
    refundAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    contactEmail?: StringFieldUpdateOperationsInput | string
    contactPhone?: StringFieldUpdateOperationsInput | string
    preferredContactMethod?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: InputJsonValue | InputJsonValue | null
    adminResponse?: NullableStringFieldUpdateOperationsInput | string | null
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedTo?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    ratingComment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductCreateManyCategoryInput = {
    id?: string
    name: string
    slug: string
    type: $Enums.ProductType
    shortDesc?: string | null
    longDesc?: string | null
    baseCurrency?: $Enums.Currency
    basePrice: number
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    externalIds?: InputJsonValue | null
  }

  export type ProductUpdateWithoutCategoryInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    type?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    longDesc?: NullableStringFieldUpdateOperationsInput | string | null
    baseCurrency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    basePrice?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    externalIds?: InputJsonValue | InputJsonValue | null
    images?: ProductImageUpdateManyWithoutProductNestedInput
    createdBy?: UserUpdateOneWithoutCreatedProductsNestedInput
    markupRules?: MarkupRuleUpdateManyWithoutProductNestedInput
    bookingItems?: BookingItemUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutCategoryInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    type?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    longDesc?: NullableStringFieldUpdateOperationsInput | string | null
    baseCurrency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    basePrice?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    externalIds?: InputJsonValue | InputJsonValue | null
    images?: ProductImageUncheckedUpdateManyWithoutProductNestedInput
    markupRules?: MarkupRuleUncheckedUpdateManyWithoutProductNestedInput
    bookingItems?: BookingItemUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateManyWithoutCategoryInput = {
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    type?: EnumProductTypeFieldUpdateOperationsInput | $Enums.ProductType
    shortDesc?: NullableStringFieldUpdateOperationsInput | string | null
    longDesc?: NullableStringFieldUpdateOperationsInput | string | null
    baseCurrency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    basePrice?: FloatFieldUpdateOperationsInput | number
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    externalIds?: InputJsonValue | InputJsonValue | null
  }

  export type ProductImageCreateManyProductInput = {
    id?: string
    url: string
    alt?: string | null
  }

  export type MarkupRuleCreateManyProductInput = {
    id?: string
    b2bAccountId?: string | null
    percentage: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
  }

  export type BookingItemCreateManyProductInput = {
    id?: string
    bookingId: string
    name: string
    date?: Date | string | null
    quantity?: number
    unitNet: number
    unitGross: number
    subtotalNet: number
    subtotalGross: number
  }

  export type ProductImageUpdateWithoutProductInput = {
    url?: StringFieldUpdateOperationsInput | string
    alt?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProductImageUncheckedUpdateWithoutProductInput = {
    url?: StringFieldUpdateOperationsInput | string
    alt?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProductImageUncheckedUpdateManyWithoutProductInput = {
    url?: StringFieldUpdateOperationsInput | string
    alt?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MarkupRuleUpdateWithoutProductInput = {
    percentage?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    b2bAccount?: B2BAccountUpdateOneWithoutMarkupRulesNestedInput
  }

  export type MarkupRuleUncheckedUpdateWithoutProductInput = {
    b2bAccountId?: NullableStringFieldUpdateOperationsInput | string | null
    percentage?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MarkupRuleUncheckedUpdateManyWithoutProductInput = {
    b2bAccountId?: NullableStringFieldUpdateOperationsInput | string | null
    percentage?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type BookingItemUpdateWithoutProductInput = {
    name?: StringFieldUpdateOperationsInput | string
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    unitNet?: FloatFieldUpdateOperationsInput | number
    unitGross?: FloatFieldUpdateOperationsInput | number
    subtotalNet?: FloatFieldUpdateOperationsInput | number
    subtotalGross?: FloatFieldUpdateOperationsInput | number
    booking?: BookingUpdateOneRequiredWithoutItemsNestedInput
  }

  export type BookingItemUncheckedUpdateWithoutProductInput = {
    bookingId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    unitNet?: FloatFieldUpdateOperationsInput | number
    unitGross?: FloatFieldUpdateOperationsInput | number
    subtotalNet?: FloatFieldUpdateOperationsInput | number
    subtotalGross?: FloatFieldUpdateOperationsInput | number
  }

  export type BookingItemUncheckedUpdateManyWithoutProductInput = {
    bookingId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    unitNet?: FloatFieldUpdateOperationsInput | number
    unitGross?: FloatFieldUpdateOperationsInput | number
    subtotalNet?: FloatFieldUpdateOperationsInput | number
    subtotalGross?: FloatFieldUpdateOperationsInput | number
  }

  export type MarkupRuleCreateManyB2bAccountInput = {
    id?: string
    productId?: string | null
    percentage: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
  }

  export type BookingCreateManyB2bAccountInput = {
    id?: string
    reference: string
    userId?: string | null
    status?: $Enums.BookingStatus
    paymentMethod?: $Enums.PaymentMethod | null
    paymentStatus?: $Enums.PaymentStatus
    paymentIntentId?: string | null
    paymentGateway?: string | null
    gatewayReference?: string | null
    currency?: $Enums.Currency
    totalNet: number
    totalMarkup: number
    totalGross: number
    supplierRef?: string | null
    voucherUrl?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    passengerCount?: number
    leadPassenger?: InputJsonValue | null
    externalBookingId?: string | null
    apiResponse?: InputJsonValue | null
    apiCalledAt?: Date | string | null
    syncedAt?: Date | string | null
  }

  export type MarkupRuleUpdateWithoutB2bAccountInput = {
    percentage?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    product?: ProductUpdateOneWithoutMarkupRulesNestedInput
  }

  export type MarkupRuleUncheckedUpdateWithoutB2bAccountInput = {
    productId?: NullableStringFieldUpdateOperationsInput | string | null
    percentage?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MarkupRuleUncheckedUpdateManyWithoutB2bAccountInput = {
    productId?: NullableStringFieldUpdateOperationsInput | string | null
    percentage?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type BookingUpdateWithoutB2bAccountInput = {
    reference?: StringFieldUpdateOperationsInput | string
    status?: EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus
    paymentMethod?: NullableEnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod | null
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    paymentIntentId?: NullableStringFieldUpdateOperationsInput | string | null
    paymentGateway?: NullableStringFieldUpdateOperationsInput | string | null
    gatewayReference?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    totalNet?: FloatFieldUpdateOperationsInput | number
    totalMarkup?: FloatFieldUpdateOperationsInput | number
    totalGross?: FloatFieldUpdateOperationsInput | number
    supplierRef?: NullableStringFieldUpdateOperationsInput | string | null
    voucherUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passengerCount?: IntFieldUpdateOperationsInput | number
    leadPassenger?: InputJsonValue | InputJsonValue | null
    externalBookingId?: NullableStringFieldUpdateOperationsInput | string | null
    apiResponse?: InputJsonValue | InputJsonValue | null
    apiCalledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneWithoutBookingsNestedInput
    items?: BookingItemUpdateManyWithoutBookingNestedInput
    paymentTransactions?: PaymentTransactionUpdateManyWithoutBookingNestedInput
    billingRecords?: BillingRecordUpdateManyWithoutBookingNestedInput
    complaints?: ComplaintUpdateManyWithoutBookingNestedInput
  }

  export type BookingUncheckedUpdateWithoutB2bAccountInput = {
    reference?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus
    paymentMethod?: NullableEnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod | null
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    paymentIntentId?: NullableStringFieldUpdateOperationsInput | string | null
    paymentGateway?: NullableStringFieldUpdateOperationsInput | string | null
    gatewayReference?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    totalNet?: FloatFieldUpdateOperationsInput | number
    totalMarkup?: FloatFieldUpdateOperationsInput | number
    totalGross?: FloatFieldUpdateOperationsInput | number
    supplierRef?: NullableStringFieldUpdateOperationsInput | string | null
    voucherUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passengerCount?: IntFieldUpdateOperationsInput | number
    leadPassenger?: InputJsonValue | InputJsonValue | null
    externalBookingId?: NullableStringFieldUpdateOperationsInput | string | null
    apiResponse?: InputJsonValue | InputJsonValue | null
    apiCalledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    items?: BookingItemUncheckedUpdateManyWithoutBookingNestedInput
    paymentTransactions?: PaymentTransactionUncheckedUpdateManyWithoutBookingNestedInput
    billingRecords?: BillingRecordUncheckedUpdateManyWithoutBookingNestedInput
    complaints?: ComplaintUncheckedUpdateManyWithoutBookingNestedInput
  }

  export type BookingUncheckedUpdateManyWithoutB2bAccountInput = {
    reference?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumBookingStatusFieldUpdateOperationsInput | $Enums.BookingStatus
    paymentMethod?: NullableEnumPaymentMethodFieldUpdateOperationsInput | $Enums.PaymentMethod | null
    paymentStatus?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    paymentIntentId?: NullableStringFieldUpdateOperationsInput | string | null
    paymentGateway?: NullableStringFieldUpdateOperationsInput | string | null
    gatewayReference?: NullableStringFieldUpdateOperationsInput | string | null
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    totalNet?: FloatFieldUpdateOperationsInput | number
    totalMarkup?: FloatFieldUpdateOperationsInput | number
    totalGross?: FloatFieldUpdateOperationsInput | number
    supplierRef?: NullableStringFieldUpdateOperationsInput | string | null
    voucherUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passengerCount?: IntFieldUpdateOperationsInput | number
    leadPassenger?: InputJsonValue | InputJsonValue | null
    externalBookingId?: NullableStringFieldUpdateOperationsInput | string | null
    apiResponse?: InputJsonValue | InputJsonValue | null
    apiCalledAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    syncedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type BookingItemCreateManyBookingInput = {
    id?: string
    productId?: string | null
    name: string
    date?: Date | string | null
    quantity?: number
    unitNet: number
    unitGross: number
    subtotalNet: number
    subtotalGross: number
  }

  export type PaymentTransactionCreateManyBookingInput = {
    id?: string
    paymentIntentId: string
    amount: number
    currency?: $Enums.Currency
    status: $Enums.PaymentStatus
    gatewayResponse?: InputJsonValue | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BillingRecordCreateManyBookingInput = {
    id?: string
    userId: string
    planName?: string | null
    duration?: number | null
    price: number
    paymentSessionId?: string | null
    purchasedAt?: Date | string
  }

  export type ComplaintCreateManyBookingInput = {
    id?: string
    userId: string
    subject: string
    category: $Enums.ComplaintCategory
    priority?: $Enums.ComplaintPriority
    status?: $Enums.ComplaintStatus
    tourId?: string | null
    tourName?: string | null
    description: string
    expectedOutcome?: string | null
    refundAmount?: number | null
    contactEmail: string
    contactPhone: string
    preferredContactMethod?: string | null
    attachments?: InputJsonValue | null
    adminResponse?: string | null
    resolvedAt?: Date | string | null
    assignedTo?: string | null
    rating?: number | null
    ratingComment?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BookingItemUpdateWithoutBookingInput = {
    name?: StringFieldUpdateOperationsInput | string
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    unitNet?: FloatFieldUpdateOperationsInput | number
    unitGross?: FloatFieldUpdateOperationsInput | number
    subtotalNet?: FloatFieldUpdateOperationsInput | number
    subtotalGross?: FloatFieldUpdateOperationsInput | number
    product?: ProductUpdateOneWithoutBookingItemsNestedInput
  }

  export type BookingItemUncheckedUpdateWithoutBookingInput = {
    productId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    unitNet?: FloatFieldUpdateOperationsInput | number
    unitGross?: FloatFieldUpdateOperationsInput | number
    subtotalNet?: FloatFieldUpdateOperationsInput | number
    subtotalGross?: FloatFieldUpdateOperationsInput | number
  }

  export type BookingItemUncheckedUpdateManyWithoutBookingInput = {
    productId?: NullableStringFieldUpdateOperationsInput | string | null
    name?: StringFieldUpdateOperationsInput | string
    date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    quantity?: IntFieldUpdateOperationsInput | number
    unitNet?: FloatFieldUpdateOperationsInput | number
    unitGross?: FloatFieldUpdateOperationsInput | number
    subtotalNet?: FloatFieldUpdateOperationsInput | number
    subtotalGross?: FloatFieldUpdateOperationsInput | number
  }

  export type PaymentTransactionUpdateWithoutBookingInput = {
    paymentIntentId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    gatewayResponse?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentTransactionUncheckedUpdateWithoutBookingInput = {
    paymentIntentId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    gatewayResponse?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentTransactionUncheckedUpdateManyWithoutBookingInput = {
    paymentIntentId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    currency?: EnumCurrencyFieldUpdateOperationsInput | $Enums.Currency
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    gatewayResponse?: InputJsonValue | InputJsonValue | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BillingRecordUpdateWithoutBookingInput = {
    planName?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    price?: FloatFieldUpdateOperationsInput | number
    paymentSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    purchasedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutBillingRecordsNestedInput
  }

  export type BillingRecordUncheckedUpdateWithoutBookingInput = {
    userId?: StringFieldUpdateOperationsInput | string
    planName?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    price?: FloatFieldUpdateOperationsInput | number
    paymentSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    purchasedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BillingRecordUncheckedUpdateManyWithoutBookingInput = {
    userId?: StringFieldUpdateOperationsInput | string
    planName?: NullableStringFieldUpdateOperationsInput | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    price?: FloatFieldUpdateOperationsInput | number
    paymentSessionId?: NullableStringFieldUpdateOperationsInput | string | null
    purchasedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ComplaintUpdateWithoutBookingInput = {
    subject?: StringFieldUpdateOperationsInput | string
    category?: EnumComplaintCategoryFieldUpdateOperationsInput | $Enums.ComplaintCategory
    priority?: EnumComplaintPriorityFieldUpdateOperationsInput | $Enums.ComplaintPriority
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    tourId?: NullableStringFieldUpdateOperationsInput | string | null
    tourName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    expectedOutcome?: NullableStringFieldUpdateOperationsInput | string | null
    refundAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    contactEmail?: StringFieldUpdateOperationsInput | string
    contactPhone?: StringFieldUpdateOperationsInput | string
    preferredContactMethod?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: InputJsonValue | InputJsonValue | null
    adminResponse?: NullableStringFieldUpdateOperationsInput | string | null
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedTo?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    ratingComment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutComplaintsNestedInput
    messages?: ComplaintMessageUpdateManyWithoutComplaintNestedInput
  }

  export type ComplaintUncheckedUpdateWithoutBookingInput = {
    userId?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    category?: EnumComplaintCategoryFieldUpdateOperationsInput | $Enums.ComplaintCategory
    priority?: EnumComplaintPriorityFieldUpdateOperationsInput | $Enums.ComplaintPriority
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    tourId?: NullableStringFieldUpdateOperationsInput | string | null
    tourName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    expectedOutcome?: NullableStringFieldUpdateOperationsInput | string | null
    refundAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    contactEmail?: StringFieldUpdateOperationsInput | string
    contactPhone?: StringFieldUpdateOperationsInput | string
    preferredContactMethod?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: InputJsonValue | InputJsonValue | null
    adminResponse?: NullableStringFieldUpdateOperationsInput | string | null
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedTo?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    ratingComment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messages?: ComplaintMessageUncheckedUpdateManyWithoutComplaintNestedInput
  }

  export type ComplaintUncheckedUpdateManyWithoutBookingInput = {
    userId?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    category?: EnumComplaintCategoryFieldUpdateOperationsInput | $Enums.ComplaintCategory
    priority?: EnumComplaintPriorityFieldUpdateOperationsInput | $Enums.ComplaintPriority
    status?: EnumComplaintStatusFieldUpdateOperationsInput | $Enums.ComplaintStatus
    tourId?: NullableStringFieldUpdateOperationsInput | string | null
    tourName?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    expectedOutcome?: NullableStringFieldUpdateOperationsInput | string | null
    refundAmount?: NullableFloatFieldUpdateOperationsInput | number | null
    contactEmail?: StringFieldUpdateOperationsInput | string
    contactPhone?: StringFieldUpdateOperationsInput | string
    preferredContactMethod?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: InputJsonValue | InputJsonValue | null
    adminResponse?: NullableStringFieldUpdateOperationsInput | string | null
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedTo?: NullableStringFieldUpdateOperationsInput | string | null
    rating?: NullableIntFieldUpdateOperationsInput | number | null
    ratingComment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ComplaintMessageCreateManyComplaintInput = {
    id?: string
    senderType: string
    senderId: string
    message: string
    attachments?: InputJsonValue | null
    isRead?: boolean
    createdAt?: Date | string
  }

  export type ComplaintMessageUpdateWithoutComplaintInput = {
    senderType?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    attachments?: InputJsonValue | InputJsonValue | null
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ComplaintMessageUncheckedUpdateWithoutComplaintInput = {
    senderType?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    attachments?: InputJsonValue | InputJsonValue | null
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ComplaintMessageUncheckedUpdateManyWithoutComplaintInput = {
    senderType?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    attachments?: InputJsonValue | InputJsonValue | null
    isRead?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}