datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

model User {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  firstName         String
  lastName          String
  email             String    @unique
  phoneNumber       String
  dateOfBirth       DateTime?
  nationality       String
  password          String
  role              Role      @default(CUSTOMER)
  preferredLanguage String    @default("en")
  companyName       String?
  businessLicense   String?
  markupType        String?   @default("percentage") // 'percentage' or 'fixed'
  markupValue       Float?    @default(0)
  isActive          Boolean   @default(true)
  emailVerified     Boolean   @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  metadata          Json?     @default("{}")

  // Relations
  bookings        Booking[]
  createdProducts Product[]    @relation("ProductCreator")
  b2bAccounts     B2BAccount[] @relation("B2BAccountUser")

  // Account management relations
  managedUsers     User[]  @relation("AccountManager")
  accountManagerId String? @db.ObjectId
  accountManager   User?   @relation("AccountManager", fields: [accountManagerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

enum Role {
  CUSTOMER
  B2B
  ADMIN
  ACCOUNT_MANAGER
}

// ---------- Enums ----------
enum ProductType {
  THEME_PARK
  TOUR
  ACTIVITY
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  FAILED
}

enum PaymentStatus {
  UNPAID
  PAID
  REFUNDED
}

enum Currency {
  AED
  USD
  EUR
}

// ADDED: Missing CategoryStatus enum
enum CategoryStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

// FIXED: Category model for MongoDB - CORRECTED
model Category {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  description  String
  slug         String         @unique
  icon         String?        @default("ðŸ“‚")
  status       CategoryStatus @default(ACTIVE)
  displayOrder Int            @default(0)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  // Relations
  products Product[]

  @@index([status, displayOrder])
  @@map("categories")
}

// ---------- Models ----------

model Product {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  slug         String         @unique
  type         ProductType
  shortDesc    String?
  longDesc     String?
  baseCurrency Currency       @default(AED)
  basePrice    Float
  isActive     Boolean        @default(true)
  images       ProductImage[]
  categoryId   String         @db.ObjectId
  category     Category       @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  createdById  String?        @db.ObjectId
  createdBy    User?          @relation("ProductCreator", fields: [createdById], references: [id], onDelete: NoAction, onUpdate: NoAction)

  // Markup rules that target this product
  markupRules  MarkupRule[]
  bookingItems BookingItem[]

  @@index([categoryId, isActive])
}

model ProductImage {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  url       String
  alt       String?
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model B2BAccount {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  code          String   @unique
  userId        String?  @db.ObjectId
  user          User?    @relation("B2BAccountUser", fields: [userId], references: [id], onDelete: NoAction)
  defaultMarkup Float    @default(0)
  currency      Currency @default(AED)
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  markupRules MarkupRule[]
  bookings    Booking[]

  @@index([code, isActive])
}

model MarkupRule {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  b2bAccountId String?     @db.ObjectId
  b2bAccount   B2BAccount? @relation(fields: [b2bAccountId], references: [id], onDelete: Cascade)
  productId    String?     @db.ObjectId
  product      Product?    @relation(fields: [productId], references: [id], onDelete: Cascade)
  percentage   Float
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  isActive     Boolean     @default(true)

  @@index([b2bAccountId, productId, isActive])
}

model Booking {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  reference     String        @unique
  userId        String?       @db.ObjectId
  user          User?         @relation(fields: [userId], references: [id], onDelete: NoAction)
  b2bAccountId  String?       @db.ObjectId
  b2bAccount    B2BAccount?   @relation(fields: [b2bAccountId], references: [id], onDelete: NoAction)
  status        BookingStatus @default(PENDING)
  paymentStatus PaymentStatus @default(UNPAID)
  currency      Currency      @default(AED)
  totalNet      Float
  totalMarkup   Float
  totalGross    Float
  supplierRef   String?
  voucherUrl    String?
  items         BookingItem[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([userId, b2bAccountId, status, paymentStatus, createdAt])
}

model BookingItem {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  bookingId     String    @db.ObjectId
  booking       Booking   @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  productId     String?   @db.ObjectId
  product       Product?  @relation(fields: [productId], references: [id], onDelete: NoAction)
  name          String
  date          DateTime?
  quantity      Int       @default(1)
  unitNet       Float
  unitGross     Float
  subtotalNet   Float
  subtotalGross Float

  @@index([bookingId, productId, date])
}

model Settings {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  type      String   @unique
  value     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("settings")
}

// aprove api data 

model ApprovedTour {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  tourId    String   @unique
  createdAt DateTime @default(now())
}
