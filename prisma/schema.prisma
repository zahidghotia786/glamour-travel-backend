datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

model User {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  firstName         String
  lastName          String
  email             String    @unique
  phoneNumber       String
  dateOfBirth       DateTime?
  nationality       String
  password          String
  role              Role      @default(CUSTOMER)
  preferredLanguage String    @default("en")
  companyName       String?
  businessLicense   String?
  markupType        String?   @default("percentage") // 'percentage' or 'fixed'
  markupValue       Float?    @default(0)
  isActive          Boolean   @default(true)
  emailVerified     Boolean   @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  metadata          Json?     @default("{}")

  // Relations
  bookings        Booking[]
  createdProducts Product[]    @relation("ProductCreator")
  b2bAccounts     B2BAccount[] @relation("B2BAccountUser")

  // Account management relations
  managedUsers     User[]  @relation("AccountManager")
  accountManagerId String? @db.ObjectId
  accountManager   User?   @relation("AccountManager", fields: [accountManagerId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  // üÜï Add relations for new models
  billingRecords BillingRecord[]

  complaints Complaint[]
}

enum Role {
  CUSTOMER
  B2B
  ADMIN
  ACCOUNT_MANAGER
}

// ---------- Enums ----------
enum ProductType {
  THEME_PARK
  TOUR
  ACTIVITY
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  FAILED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  ZIINA
  BANK_TRANSFER
  CASH
}

enum PaymentStatus {
  UNPAID
  PENDING
  PAID
  FAILED
  REFUNDED
  CANCELLED
}

enum Currency {
  AED
  USD
  EUR
}

// ADDED: Missing CategoryStatus enum
enum CategoryStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

// FIXED: Category model for MongoDB - CORRECTED
model Category {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  description  String
  slug         String         @unique
  icon         String?        @default("üìÇ")
  status       CategoryStatus @default(ACTIVE)
  displayOrder Int            @default(0)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  // Relations
  products Product[]

  @@index([status, displayOrder])
  @@map("categories")
}

// ---------- Models ----------

model Product {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  slug         String         @unique
  type         ProductType
  shortDesc    String?
  longDesc     String?
  baseCurrency Currency       @default(AED)
  basePrice    Float
  isActive     Boolean        @default(true)
  images       ProductImage[]
  categoryId   String         @db.ObjectId
  category     Category       @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  createdById  String?        @db.ObjectId
  createdBy    User?          @relation("ProductCreator", fields: [createdById], references: [id], onDelete: NoAction, onUpdate: NoAction)

  // Markup rules that target this product
  markupRules  MarkupRule[]
  bookingItems BookingItem[]

  externalIds Json?

  @@index([categoryId, isActive])
}

model ProductImage {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  url       String
  alt       String?
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model B2BAccount {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  code          String   @unique
  userId        String?  @db.ObjectId
  user          User?    @relation("B2BAccountUser", fields: [userId], references: [id], onDelete: NoAction)
  defaultMarkup Float    @default(0)
  currency      Currency @default(AED)
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  markupRules MarkupRule[]
  bookings    Booking[]

  @@index([code, isActive])
}

model MarkupRule {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  b2bAccountId String?     @db.ObjectId
  b2bAccount   B2BAccount? @relation(fields: [b2bAccountId], references: [id], onDelete: Cascade)
  productId    String?     @db.ObjectId
  product      Product?    @relation(fields: [productId], references: [id], onDelete: Cascade)
  percentage   Float
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  isActive     Boolean     @default(true)

  @@index([b2bAccountId, productId, isActive])
}

model Booking {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  reference    String        @unique
  userId       String?       @db.ObjectId
  user         User?         @relation(fields: [userId], references: [id], onDelete: NoAction)
  b2bAccountId String?       @db.ObjectId
  b2bAccount   B2BAccount?   @relation(fields: [b2bAccountId], references: [id], onDelete: NoAction)
  status       BookingStatus @default(PENDING)

  // Payment fields
  paymentMethod    PaymentMethod?
  paymentStatus    PaymentStatus  @default(UNPAID)
  paymentIntentId  String? // Ziina payment intent ID
  paymentGateway   String? // Payment gateway used
  gatewayReference String? // Reference from payment gateway

  currency    Currency      @default(AED)
  totalNet    Float
  totalMarkup Float
  totalGross  Float
  supplierRef String?
  voucherUrl  String?
  items       BookingItem[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // ADD: Passenger information summary
  passengerCount Int   @default(1)
  leadPassenger  Json? // Store lead passenger details

  // FIX: Add missing commas and proper field definitions
  externalBookingId String? // Store the API's bookingId
  apiResponse       Json? // Store full API response for debugging
  apiCalledAt       DateTime? // When API was called
  syncedAt          DateTime? // When successfully saved to DB

  // üÜï Add relations for new models
  paymentTransactions PaymentTransaction[]
  billingRecords      BillingRecord[]

  complaints Complaint[]

  @@index([userId, b2bAccountId, status, paymentStatus, createdAt])
  // Consider adding index for external booking tracking
  @@index([externalBookingId])
  @@index([syncedAt])
}

model BookingItem {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  bookingId     String    @db.ObjectId
  booking       Booking   @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  productId     String?   @db.ObjectId
  product       Product?  @relation(fields: [productId], references: [id], onDelete: NoAction)
  name          String
  date          DateTime?
  quantity      Int       @default(1)
  unitNet       Float
  unitGross     Float
  subtotalNet   Float
  subtotalGross Float

  @@index([bookingId, productId, date])
}

// Optional: Create a mapping table for external services
model ExternalServiceMapping {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  serviceName  String // e.g., 'RAYNA_TOURS'
  externalId   String // ID from external service
  internalId   String // Your internal ID
  internalType String // e.g., 'PRODUCT', 'TOUR'
  metadata     Json? // Additional mapping data
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([serviceName, externalId, internalType])
  @@index([serviceName, internalType, isActive])
  @@index([internalId, internalType])
  @@map("external_service_mappings")
}

// üÜï Fixed PaymentTransaction model
model PaymentTransaction {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  bookingId       String        @db.ObjectId
  booking         Booking       @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  paymentIntentId String        @unique
  amount          Float
  currency        Currency      @default(AED)
  status          PaymentStatus
  gatewayResponse Json? // Raw response from payment gateway
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // üõ†Ô∏è FIXED: Remove duplicate indexes, use only one @@index
  @@index([bookingId, paymentIntentId, createdAt])
  @@map("payment_transactions") // üÜï Add map name
}

// üÜï Fixed BillingRecord model
model BillingRecord {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  userId           String   @db.ObjectId
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookingId        String   @db.ObjectId
  booking          Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  planName         String?
  duration         Int?
  price            Float
  paymentSessionId String?
  purchasedAt      DateTime @default(now())

  // üõ†Ô∏è FIXED: Remove duplicate indexes, use only one @@index
  @@index([userId, bookingId, purchasedAt])
  @@map("billing_records")
}

model Settings {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  type      String   @unique
  value     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("settings")
}

// aprove api data 
model ApprovedTour {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  tourId     String   @unique
  type       String   @default("TOUR") // 'TOUR' or 'CUSTOM_PRODUCT'
  approvedBy String?  @db.ObjectId // admin who approved it
  createdAt  DateTime @default(now())
  @@map("approved_tours")
}

// ======================
// Complaint Section Code
// ======================

enum ComplaintCategory {
  TOUR_QUALITY
  TOUR_GUIDE
  BOOKING_ISSUES
  PAYMENT_ISSUES
  CANCELLATION
  REFUND_REQUEST
  TRANSPORTATION
  FACILITY
  SAFETY
  TICKET_REJECTION
  OTHER
}

enum ComplaintStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum ComplaintPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model Complaint {
  id       String            @id @default(auto()) @map("_id") @db.ObjectId
  userId   String            @db.ObjectId
  user     User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  subject  String
  category ComplaintCategory
  priority ComplaintPriority @default(MEDIUM)
  status   ComplaintStatus   @default(OPEN)

  // Reference to booking/tour
  bookingId String?  @db.ObjectId
  booking   Booking? @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  tourId    String?
  tourName  String?

  // Complaint details
  description     String
  expectedOutcome String? // What user expects (refund, reschedule, etc.)
  refundAmount    Float? // If refund is requested

  // Contact information
  contactEmail           String
  contactPhone           String
  preferredContactMethod String? // email, phone, both

  // Attachments
  attachments Json? // Array of file URLs

  // Admin response
  adminResponse String?
  resolvedAt    DateTime?
  assignedTo    String? // Admin user ID

  // Rating
  rating        Int? // 1-5 stars
  ratingComment String?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  messages ComplaintMessage[]

  @@index([userId, status, category, createdAt])
  @@map("complaints")
}

model ComplaintMessage {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  complaintId String    @db.ObjectId
  complaint   Complaint @relation(fields: [complaintId], references: [id], onDelete: Cascade)
  senderType  String // 'user' or 'admin'
  senderId    String // User ID or Admin ID
  message     String
  attachments Json? // Array of file URLs
  isRead      Boolean   @default(false)
  createdAt   DateTime  @default(now())

  @@index([complaintId, createdAt])
  @@map("complaint_messages")
}



model Tour {
  id          Int      @id @default(auto())
  tourId      String
  cityName    String
  countryName String
  rawJson     Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
